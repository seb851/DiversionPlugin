// Copyright 2024 Diversion Company, Inc. All Rights Reserved.
/**
 * Agent API
 * API of Diversion sync agent
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPISupportBundle.h"

#include "AgentAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace AgentAPI
{

inline FString ToString(const OpenAPISupportBundle::UrgencyLevelEnum& Value)
{
	switch (Value)
	{
	case OpenAPISupportBundle::UrgencyLevelEnum::_0:
		return TEXT("0");
	case OpenAPISupportBundle::UrgencyLevelEnum::_1:
		return TEXT("1");
	case OpenAPISupportBundle::UrgencyLevelEnum::_2:
		return TEXT("2");
	case OpenAPISupportBundle::UrgencyLevelEnum::_3:
		return TEXT("3");
	case OpenAPISupportBundle::UrgencyLevelEnum::_4:
		return TEXT("4");
	}

	UE_LOG(LogAgentAPI, Error, TEXT("Invalid OpenAPISupportBundle::UrgencyLevelEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPISupportBundle::EnumToString(const OpenAPISupportBundle::UrgencyLevelEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPISupportBundle::UrgencyLevelEnum& Value)
{
	static TMap<FString, OpenAPISupportBundle::UrgencyLevelEnum> StringToEnum = { 
		{ TEXT("0"), OpenAPISupportBundle::UrgencyLevelEnum::_0 },
		{ TEXT("1"), OpenAPISupportBundle::UrgencyLevelEnum::_1 },
		{ TEXT("2"), OpenAPISupportBundle::UrgencyLevelEnum::_2 },
		{ TEXT("3"), OpenAPISupportBundle::UrgencyLevelEnum::_3 },
		{ TEXT("4"), OpenAPISupportBundle::UrgencyLevelEnum::_4 }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPISupportBundle::EnumFromString(const FString& EnumAsString, OpenAPISupportBundle::UrgencyLevelEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPISupportBundle::UrgencyLevelEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPISupportBundle::UrgencyLevelEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void OpenAPISupportBundle::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	if (RepoID.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("RepoID")); WriteJsonValue(Writer, RepoID.GetValue());
	}
	Writer->WriteIdentifierPrefix(TEXT("Message")); WriteJsonValue(Writer, Message);
	if (UrgencyLevel.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("UrgencyLevel")); WriteJsonValue(Writer, UrgencyLevel.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPISupportBundle::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* InnerGeneratorOpenAPIObject;
	if (!JsonValue->TryGetObject(InnerGeneratorOpenAPIObject))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("RepoID"), RepoID);
	ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("Message"), Message);
	ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("UrgencyLevel"), UrgencyLevel);

	return ParseSuccess;
}

}
