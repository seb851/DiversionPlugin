// Copyright 2024 Diversion Company, Inc. All Rights Reserved.
/**
 * Agent API
 * API of Diversion sync agent
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.10.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "DefaultApi.h"
#include "HTTPResult.h"
#include "JsonBody.h"

#include "Types.h"


namespace Diversion {
namespace AgentAPI {

using namespace Diversion::AgentAPI::Model;

DefaultApi::DefaultApi(TSharedPtr<DiversionHttp::FHttpRequestManager> InApiClient)
     : ApiClient(InApiClient) {}

DefaultApi::~DefaultApi() {}



THTTPResult<TVariant<TMap<FString, TSharedPtr<WorkspaceConfiguration>>>> DefaultApi::GetAllWorkspaces(
        const FString& Token,
        const TMap<FString, FString>& Headers,
		int ConnectionTimeoutSeconds, int RequestTimeoutSeconds) const
{

    FString URL = TEXT("/workspaces");

    TMap<FString, FString> localVarQueryParams;
    TMap<FString, FString> localVarFormParams;
    //TMap<FString, TSharedPtr<HttpContent>> localVarFileParams;

    
    TSet<FString> localVarResponseHttpContentTypes;
    localVarResponseHttpContentTypes.Add(TEXT("application/json"));

    FString localVarResponseHttpContentType;

    // use JSON if possible
    if (localVarResponseHttpContentTypes.Num() == 0)
    {
        localVarResponseHttpContentType = TEXT("application/json");
    }
    // JSON
    else if (localVarResponseHttpContentTypes.Contains(TEXT("application/json")))
    {
        localVarResponseHttpContentType = TEXT("application/json");
    }
    else
    {
        return THTTPResult<TVariant<TMap<FString, TSharedPtr<WorkspaceConfiguration>>>>::Failure(TEXT("DefaultApi->GetAllWorkspaces does not produce any supported media type"), 400, {});
    }

    // TODO: Add this to the headers
    //Headers[TEXT("Accept")] = localVarResponseHttpContentType;

    TSet<FString> localVarConsumeHttpContentTypes;


    FString Content = TEXT("");
    // TSharedPtr<IHttpBody> localVarHttpBody;
    FString localVarRequestHttpContentType;

    // use JSON if possible
    if (localVarConsumeHttpContentTypes.Num() == 0 || localVarConsumeHttpContentTypes.Contains(TEXT("application/json")))
    {
        localVarRequestHttpContentType = TEXT("application/json");
    }
    else
    {
        return THTTPResult<TVariant<TMap<FString, TSharedPtr<WorkspaceConfiguration>>>>::Failure(TEXT("DefaultApi->GetAllWorkspaces does not consume any supported media type"), 415, {});
    }

    // Add query params
    if (localVarQueryParams.Num() > 0) {
        URL += TEXT("?");
        FString QueryParams;
        for (const auto& Param : localVarQueryParams)
        {
            QueryParams += Param.Key + TEXT("=") + Param.Value + TEXT("&");
        }
        QueryParams.RemoveFromEnd(TEXT("&"));
        URL += QueryParams;
    }

    DiversionHttp::HTTPCallResponse Response = ApiClient->SendRequest(URL, DiversionHttp::HttpMethod::GET, Token, localVarRequestHttpContentType, 
        Content, Headers, ConnectionTimeoutSeconds, RequestTimeoutSeconds);

    // TODO: Add validation - check response content type
    
    if (Response.ResponseCode == 200) {
        if(localVarResponseHttpContentType == TEXT("application/json"))
        {
            TMap<FString, TSharedPtr<WorkspaceConfiguration>> localVarResult;
            TSharedPtr<FJsonValue> JsonValue;
            TSharedRef<TJsonReader<>> JsonReader = TJsonReaderFactory<>::Create(Response.Contents);
            if (!FJsonSerializer::Deserialize(JsonReader, JsonValue) || !JsonValue.IsValid())
            {
                return THTTPResult<TVariant<TMap<FString, TSharedPtr<WorkspaceConfiguration>>>>::Failure(TEXT("error calling getAllWorkspaces: JSON reader failed parsing the response string"), 500, Response.Headers);
            }


            // Parse the JSON response as a map
            const TSharedPtr<FJsonObject> JsonObject = JsonValue->AsObject();
            for(auto& [Key, Value] : JsonObject->Values)
            {
                TSharedPtr<WorkspaceConfiguration> localMapObject = MakeShared<WorkspaceConfiguration>();
                if (localMapObject->FromJson(Value)) {
                    localVarResult.Add(Key, localMapObject);
                }
                else {
                    return THTTPResult<TVariant<TMap<FString, TSharedPtr<WorkspaceConfiguration>>>>::Failure(TEXT("error calling getAllWorkspaces: JSON response was not in the expected format"), 500, Response.Headers);
                }
            }

            TVariant<TMap<FString, TSharedPtr<WorkspaceConfiguration>>> variantResult;
            variantResult.Emplace<TMap<FString, TSharedPtr<WorkspaceConfiguration>>>(localVarResult);
            return THTTPResult<TVariant<TMap<FString, TSharedPtr<WorkspaceConfiguration>>>>::Success(TOptional(variantResult), Response.ResponseCode, Response.Headers);

            
        }


        else
        {
            return THTTPResult<TVariant<TMap<FString, TSharedPtr<WorkspaceConfiguration>>>>::Failure(TEXT("error calling getAllWorkspaces: unsupported response type"), 500, Response.Headers);
        }
    }


    if (Response.ResponseCode >= 400)
    {
            FString ErrorMessage = TEXT("General Failure");
            if(Response.Error.IsSet()) {
                ErrorMessage = Response.Error.GetValue();
            } 
            else if(!Response.Contents.IsEmpty()) {
                // Try parsing as JSON
                TSharedPtr<FJsonObject> JsonObject;
                TSharedRef<TJsonReader<>> JsonReader = TJsonReaderFactory<>::Create(Response.Contents);
                if (FJsonSerializer::Deserialize(JsonReader, JsonObject) 
                    && JsonObject.IsValid())
                {
                    if (JsonObject->HasField(TEXT("error_message"))) {
                        ErrorMessage = JsonObject->GetStringField(TEXT("error_message"));
                    }
                    else {
                        // Treat it as an error string 
                        ErrorMessage = Response.Contents;
                    }
                }
                else {
                    // Treat it as an error string 
                    ErrorMessage = Response.Contents;
                }
            }

            FString CurrError = TEXT("error calling getAllWorkspaces: ") + ErrorMessage;
            return THTTPResult<TVariant<TMap<FString, TSharedPtr<WorkspaceConfiguration>>>>::Failure(CurrError, Response.ResponseCode, Response.Headers);
    }

    // Unepxected response code - TODO: try parse as any of the expected response types
    return THTTPResult<TVariant<TMap<FString, TSharedPtr<WorkspaceConfiguration>>>>::Failure(TEXT("error calling GetAllWorkspaces: unexpected response code"), Response.ResponseCode, Response.Headers);
}



THTTPResult<TVariant<TArray<TSharedPtr<FileSyncStatus>>, void*>> DefaultApi::GetFileSyncStatus(FString repoID, FString workspaceID, TArray<FString> paths, 
        const FString& Token,
        const TMap<FString, FString>& Headers,
		int ConnectionTimeoutSeconds, int RequestTimeoutSeconds) const
{

    FString URL = TEXT("/repo/{RepoID}/workspace/{WorkspaceID}/files/status");
    URL.ReplaceInline(TEXT("{RepoID}"), *DiversionHttp::URLEncode(DiversionHttp::parameterToString(repoID)));
    URL.ReplaceInline(TEXT("{WorkspaceID}"), *DiversionHttp::URLEncode(DiversionHttp::parameterToString(workspaceID)));

    TMap<FString, FString> localVarQueryParams;
    TMap<FString, FString> localVarFormParams;
    //TMap<FString, TSharedPtr<HttpContent>> localVarFileParams;

    
    TSet<FString> localVarResponseHttpContentTypes;
    localVarResponseHttpContentTypes.Add(TEXT("application/json"));

    FString localVarResponseHttpContentType;

    // use JSON if possible
    if (localVarResponseHttpContentTypes.Num() == 0)
    {
        localVarResponseHttpContentType = TEXT("application/json");
    }
    // JSON
    else if (localVarResponseHttpContentTypes.Contains(TEXT("application/json")))
    {
        localVarResponseHttpContentType = TEXT("application/json");
    }
    else
    {
        return THTTPResult<TVariant<TArray<TSharedPtr<FileSyncStatus>>, void*>>::Failure(TEXT("DefaultApi->GetFileSyncStatus does not produce any supported media type"), 400, {});
    }

    // TODO: Add this to the headers
    //Headers[TEXT("Accept")] = localVarResponseHttpContentType;

    TSet<FString> localVarConsumeHttpContentTypes;

    {
        for (const auto& Item : paths)
        {
            localVarQueryParams.Add(TEXT("Paths"), DiversionHttp::URLEncode(DiversionHttp::parameterToString(Item)));
        }
    }

    FString Content = TEXT("");
    // TSharedPtr<IHttpBody> localVarHttpBody;
    FString localVarRequestHttpContentType;

    // use JSON if possible
    if (localVarConsumeHttpContentTypes.Num() == 0 || localVarConsumeHttpContentTypes.Contains(TEXT("application/json")))
    {
        localVarRequestHttpContentType = TEXT("application/json");
    }
    else
    {
        return THTTPResult<TVariant<TArray<TSharedPtr<FileSyncStatus>>, void*>>::Failure(TEXT("DefaultApi->GetFileSyncStatus does not consume any supported media type"), 415, {});
    }

    // Add query params
    if (localVarQueryParams.Num() > 0) {
        URL += TEXT("?");
        FString QueryParams;
        for (const auto& Param : localVarQueryParams)
        {
            QueryParams += Param.Key + TEXT("=") + Param.Value + TEXT("&");
        }
        QueryParams.RemoveFromEnd(TEXT("&"));
        URL += QueryParams;
    }

    DiversionHttp::HTTPCallResponse Response = ApiClient->SendRequest(URL, DiversionHttp::HttpMethod::GET, Token, localVarRequestHttpContentType, 
        Content, Headers, ConnectionTimeoutSeconds, RequestTimeoutSeconds);

    // TODO: Add validation - check response content type
    
    if (Response.ResponseCode == 200) {
        if(localVarResponseHttpContentType == TEXT("application/json"))
        {
            TArray<TSharedPtr<FileSyncStatus>> localVarResult;
            TSharedPtr<FJsonValue> JsonValue;
            TSharedRef<TJsonReader<>> JsonReader = TJsonReaderFactory<>::Create(Response.Contents);
            if (!FJsonSerializer::Deserialize(JsonReader, JsonValue) || !JsonValue.IsValid())
            {
                return THTTPResult<TVariant<TArray<TSharedPtr<FileSyncStatus>>, void*>>::Failure(TEXT("error calling getFileSyncStatus: JSON reader failed parsing the response string"), 500, Response.Headers);
            }

            // Parse the JSON response as an Array
            const TArray<TSharedPtr<FJsonValue>> JsonArray = JsonValue->AsArray();
            for (const TSharedPtr<FJsonValue>& Element : JsonArray)
            {
                // Create a new object to hold this array element
                TSharedPtr<FileSyncStatus> localItemObject = MakeShared<FileSyncStatus>();
                if (localItemObject->FromJson(Element))
                {
                    // For a list, we just add it to localVarResult (e.g., TArray)
                    localVarResult.Add(localItemObject);
                }
                else
                {
                    return THTTPResult<TVariant<TArray<TSharedPtr<FileSyncStatus>>, void*>>::Failure(
                        TEXT("error calling getFileSyncStatus: JSON response was not in the expected format"),
                        500, Response.Headers
                    );
                }
            }
                        
        }


        else
        {
            return THTTPResult<TVariant<TArray<TSharedPtr<FileSyncStatus>>, void*>>::Failure(TEXT("error calling getFileSyncStatus: unsupported response type"), 500, Response.Headers);
        }
    }
    if (Response.ResponseCode == 400) {
            FString ErrorMessage = TEXT("General Failure");
            if(Response.Error.IsSet()) {
                ErrorMessage = Response.Error.GetValue();
            } 
            FString CurrError = TEXT("error calling getFileSyncStatus: ") + ErrorMessage;
            return THTTPResult<TVariant<TArray<TSharedPtr<FileSyncStatus>>, void*>>::Failure(CurrError, Response.ResponseCode, Response.Headers);

    }
    if (Response.ResponseCode == 412) {
            FString ErrorMessage = TEXT("General Failure");
            if(Response.Error.IsSet()) {
                ErrorMessage = Response.Error.GetValue();
            } 
            FString CurrError = TEXT("error calling getFileSyncStatus: ") + ErrorMessage;
            return THTTPResult<TVariant<TArray<TSharedPtr<FileSyncStatus>>, void*>>::Failure(CurrError, Response.ResponseCode, Response.Headers);

    }


    if (Response.ResponseCode >= 400)
    {
            FString ErrorMessage = TEXT("General Failure");
            if(Response.Error.IsSet()) {
                ErrorMessage = Response.Error.GetValue();
            } 
            else if(!Response.Contents.IsEmpty()) {
                // Try parsing as JSON
                TSharedPtr<FJsonObject> JsonObject;
                TSharedRef<TJsonReader<>> JsonReader = TJsonReaderFactory<>::Create(Response.Contents);
                if (FJsonSerializer::Deserialize(JsonReader, JsonObject) 
                    && JsonObject.IsValid())
                {
                    if (JsonObject->HasField(TEXT("error_message"))) {
                        ErrorMessage = JsonObject->GetStringField(TEXT("error_message"));
                    }
                    else {
                        // Treat it as an error string 
                        ErrorMessage = Response.Contents;
                    }
                }
                else {
                    // Treat it as an error string 
                    ErrorMessage = Response.Contents;
                }
            }

            FString CurrError = TEXT("error calling getFileSyncStatus: ") + ErrorMessage;
            return THTTPResult<TVariant<TArray<TSharedPtr<FileSyncStatus>>, void*>>::Failure(CurrError, Response.ResponseCode, Response.Headers);
    }

    // Unepxected response code - TODO: try parse as any of the expected response types
    return THTTPResult<TVariant<TArray<TSharedPtr<FileSyncStatus>>, void*>>::Failure(TEXT("error calling GetFileSyncStatus: unexpected response code"), Response.ResponseCode, Response.Headers);
}



THTTPResult<TVariant<TSharedPtr<WorkspaceSyncProgress>, void*>> DefaultApi::GetSyncProgress(FString repoID, FString workspaceID, 
        const FString& Token,
        const TMap<FString, FString>& Headers,
		int ConnectionTimeoutSeconds, int RequestTimeoutSeconds) const
{

    FString URL = TEXT("/repo/{RepoID}/workspace/{WorkspaceID}/sync/progress");
    URL.ReplaceInline(TEXT("{RepoID}"), *DiversionHttp::URLEncode(DiversionHttp::parameterToString(repoID)));
    URL.ReplaceInline(TEXT("{WorkspaceID}"), *DiversionHttp::URLEncode(DiversionHttp::parameterToString(workspaceID)));

    TMap<FString, FString> localVarQueryParams;
    TMap<FString, FString> localVarFormParams;
    //TMap<FString, TSharedPtr<HttpContent>> localVarFileParams;

    
    TSet<FString> localVarResponseHttpContentTypes;
    localVarResponseHttpContentTypes.Add(TEXT("application/json"));

    FString localVarResponseHttpContentType;

    // use JSON if possible
    if (localVarResponseHttpContentTypes.Num() == 0)
    {
        localVarResponseHttpContentType = TEXT("application/json");
    }
    // JSON
    else if (localVarResponseHttpContentTypes.Contains(TEXT("application/json")))
    {
        localVarResponseHttpContentType = TEXT("application/json");
    }
    else
    {
        return THTTPResult<TVariant<TSharedPtr<WorkspaceSyncProgress>, void*>>::Failure(TEXT("DefaultApi->GetSyncProgress does not produce any supported media type"), 400, {});
    }

    // TODO: Add this to the headers
    //Headers[TEXT("Accept")] = localVarResponseHttpContentType;

    TSet<FString> localVarConsumeHttpContentTypes;


    FString Content = TEXT("");
    // TSharedPtr<IHttpBody> localVarHttpBody;
    FString localVarRequestHttpContentType;

    // use JSON if possible
    if (localVarConsumeHttpContentTypes.Num() == 0 || localVarConsumeHttpContentTypes.Contains(TEXT("application/json")))
    {
        localVarRequestHttpContentType = TEXT("application/json");
    }
    else
    {
        return THTTPResult<TVariant<TSharedPtr<WorkspaceSyncProgress>, void*>>::Failure(TEXT("DefaultApi->GetSyncProgress does not consume any supported media type"), 415, {});
    }

    // Add query params
    if (localVarQueryParams.Num() > 0) {
        URL += TEXT("?");
        FString QueryParams;
        for (const auto& Param : localVarQueryParams)
        {
            QueryParams += Param.Key + TEXT("=") + Param.Value + TEXT("&");
        }
        QueryParams.RemoveFromEnd(TEXT("&"));
        URL += QueryParams;
    }

    DiversionHttp::HTTPCallResponse Response = ApiClient->SendRequest(URL, DiversionHttp::HttpMethod::GET, Token, localVarRequestHttpContentType, 
        Content, Headers, ConnectionTimeoutSeconds, RequestTimeoutSeconds);

    // TODO: Add validation - check response content type
    
    if (Response.ResponseCode == 200) {
        if(localVarResponseHttpContentType == TEXT("application/json"))
        {
            TSharedPtr<WorkspaceSyncProgress> localVarResult = MakeShared<WorkspaceSyncProgress>();
            TSharedPtr<FJsonValue> JsonValue;
            TSharedRef<TJsonReader<>> JsonReader = TJsonReaderFactory<>::Create(Response.Contents);
            if (!FJsonSerializer::Deserialize(JsonReader, JsonValue) || !JsonValue.IsValid())
            {
                return THTTPResult<TVariant<TSharedPtr<WorkspaceSyncProgress>, void*>>::Failure(TEXT("error calling getSyncProgress: JSON reader failed parsing the response string"), 500, Response.Headers);
            }

            
            if (localVarResult->FromJson(JsonValue)) {
                TVariant<TSharedPtr<WorkspaceSyncProgress>, void*> variantResult;
                variantResult.Emplace<TSharedPtr<WorkspaceSyncProgress>>(localVarResult);
                return THTTPResult<TVariant<TSharedPtr<WorkspaceSyncProgress>, void*>>::Success(TOptional(variantResult), Response.ResponseCode, Response.Headers);
            }
            else {
                return THTTPResult<TVariant<TSharedPtr<WorkspaceSyncProgress>, void*>>::Failure(TEXT("error calling getSyncProgress: JSON response was not in the expected format"), 500, Response.Headers);
            }
        }


        else
        {
            return THTTPResult<TVariant<TSharedPtr<WorkspaceSyncProgress>, void*>>::Failure(TEXT("error calling getSyncProgress: unsupported response type"), 500, Response.Headers);
        }
    }
    if (Response.ResponseCode == 412) {
            FString ErrorMessage = TEXT("General Failure");
            if(Response.Error.IsSet()) {
                ErrorMessage = Response.Error.GetValue();
            } 
            FString CurrError = TEXT("error calling getSyncProgress: ") + ErrorMessage;
            return THTTPResult<TVariant<TSharedPtr<WorkspaceSyncProgress>, void*>>::Failure(CurrError, Response.ResponseCode, Response.Headers);

    }


    if (Response.ResponseCode >= 400)
    {
            FString ErrorMessage = TEXT("General Failure");
            if(Response.Error.IsSet()) {
                ErrorMessage = Response.Error.GetValue();
            } 
            else if(!Response.Contents.IsEmpty()) {
                // Try parsing as JSON
                TSharedPtr<FJsonObject> JsonObject;
                TSharedRef<TJsonReader<>> JsonReader = TJsonReaderFactory<>::Create(Response.Contents);
                if (FJsonSerializer::Deserialize(JsonReader, JsonObject) 
                    && JsonObject.IsValid())
                {
                    if (JsonObject->HasField(TEXT("error_message"))) {
                        ErrorMessage = JsonObject->GetStringField(TEXT("error_message"));
                    }
                    else {
                        // Treat it as an error string 
                        ErrorMessage = Response.Contents;
                    }
                }
                else {
                    // Treat it as an error string 
                    ErrorMessage = Response.Contents;
                }
            }

            FString CurrError = TEXT("error calling getSyncProgress: ") + ErrorMessage;
            return THTTPResult<TVariant<TSharedPtr<WorkspaceSyncProgress>, void*>>::Failure(CurrError, Response.ResponseCode, Response.Headers);
    }

    // Unepxected response code - TODO: try parse as any of the expected response types
    return THTTPResult<TVariant<TSharedPtr<WorkspaceSyncProgress>, void*>>::Failure(TEXT("error calling GetSyncProgress: unexpected response code"), Response.ResponseCode, Response.Headers);
}



THTTPResult<TVariant<TMap<FString, TSharedPtr<WorkspaceConfiguration>>>> DefaultApi::GetWorkspaceByPath(FString absPath, 
        const FString& Token,
        const TMap<FString, FString>& Headers,
		int ConnectionTimeoutSeconds, int RequestTimeoutSeconds) const
{

    FString URL = TEXT("/workspace");

    TMap<FString, FString> localVarQueryParams;
    TMap<FString, FString> localVarFormParams;
    //TMap<FString, TSharedPtr<HttpContent>> localVarFileParams;

    
    TSet<FString> localVarResponseHttpContentTypes;
    localVarResponseHttpContentTypes.Add(TEXT("application/json"));

    FString localVarResponseHttpContentType;

    // use JSON if possible
    if (localVarResponseHttpContentTypes.Num() == 0)
    {
        localVarResponseHttpContentType = TEXT("application/json");
    }
    // JSON
    else if (localVarResponseHttpContentTypes.Contains(TEXT("application/json")))
    {
        localVarResponseHttpContentType = TEXT("application/json");
    }
    else
    {
        return THTTPResult<TVariant<TMap<FString, TSharedPtr<WorkspaceConfiguration>>>>::Failure(TEXT("DefaultApi->GetWorkspaceByPath does not produce any supported media type"), 400, {});
    }

    // TODO: Add this to the headers
    //Headers[TEXT("Accept")] = localVarResponseHttpContentType;

    TSet<FString> localVarConsumeHttpContentTypes;

    {
        localVarQueryParams.Add(TEXT("abs_path"), DiversionHttp::URLEncode(DiversionHttp::parameterToString(absPath)));
    }

    FString Content = TEXT("");
    // TSharedPtr<IHttpBody> localVarHttpBody;
    FString localVarRequestHttpContentType;

    // use JSON if possible
    if (localVarConsumeHttpContentTypes.Num() == 0 || localVarConsumeHttpContentTypes.Contains(TEXT("application/json")))
    {
        localVarRequestHttpContentType = TEXT("application/json");
    }
    else
    {
        return THTTPResult<TVariant<TMap<FString, TSharedPtr<WorkspaceConfiguration>>>>::Failure(TEXT("DefaultApi->GetWorkspaceByPath does not consume any supported media type"), 415, {});
    }

    // Add query params
    if (localVarQueryParams.Num() > 0) {
        URL += TEXT("?");
        FString QueryParams;
        for (const auto& Param : localVarQueryParams)
        {
            QueryParams += Param.Key + TEXT("=") + Param.Value + TEXT("&");
        }
        QueryParams.RemoveFromEnd(TEXT("&"));
        URL += QueryParams;
    }

    DiversionHttp::HTTPCallResponse Response = ApiClient->SendRequest(URL, DiversionHttp::HttpMethod::GET, Token, localVarRequestHttpContentType, 
        Content, Headers, ConnectionTimeoutSeconds, RequestTimeoutSeconds);

    // TODO: Add validation - check response content type
    
    if (Response.ResponseCode == 200) {
        if(localVarResponseHttpContentType == TEXT("application/json"))
        {
            TMap<FString, TSharedPtr<WorkspaceConfiguration>> localVarResult;
            TSharedPtr<FJsonValue> JsonValue;
            TSharedRef<TJsonReader<>> JsonReader = TJsonReaderFactory<>::Create(Response.Contents);
            if (!FJsonSerializer::Deserialize(JsonReader, JsonValue) || !JsonValue.IsValid())
            {
                return THTTPResult<TVariant<TMap<FString, TSharedPtr<WorkspaceConfiguration>>>>::Failure(TEXT("error calling getWorkspaceByPath: JSON reader failed parsing the response string"), 500, Response.Headers);
            }


            // Parse the JSON response as a map
            const TSharedPtr<FJsonObject> JsonObject = JsonValue->AsObject();
            for(auto& [Key, Value] : JsonObject->Values)
            {
                TSharedPtr<WorkspaceConfiguration> localMapObject = MakeShared<WorkspaceConfiguration>();
                if (localMapObject->FromJson(Value)) {
                    localVarResult.Add(Key, localMapObject);
                }
                else {
                    return THTTPResult<TVariant<TMap<FString, TSharedPtr<WorkspaceConfiguration>>>>::Failure(TEXT("error calling getWorkspaceByPath: JSON response was not in the expected format"), 500, Response.Headers);
                }
            }

            TVariant<TMap<FString, TSharedPtr<WorkspaceConfiguration>>> variantResult;
            variantResult.Emplace<TMap<FString, TSharedPtr<WorkspaceConfiguration>>>(localVarResult);
            return THTTPResult<TVariant<TMap<FString, TSharedPtr<WorkspaceConfiguration>>>>::Success(TOptional(variantResult), Response.ResponseCode, Response.Headers);

            
        }


        else
        {
            return THTTPResult<TVariant<TMap<FString, TSharedPtr<WorkspaceConfiguration>>>>::Failure(TEXT("error calling getWorkspaceByPath: unsupported response type"), 500, Response.Headers);
        }
    }


    if (Response.ResponseCode >= 400)
    {
            FString ErrorMessage = TEXT("General Failure");
            if(Response.Error.IsSet()) {
                ErrorMessage = Response.Error.GetValue();
            } 
            else if(!Response.Contents.IsEmpty()) {
                // Try parsing as JSON
                TSharedPtr<FJsonObject> JsonObject;
                TSharedRef<TJsonReader<>> JsonReader = TJsonReaderFactory<>::Create(Response.Contents);
                if (FJsonSerializer::Deserialize(JsonReader, JsonObject) 
                    && JsonObject.IsValid())
                {
                    if (JsonObject->HasField(TEXT("error_message"))) {
                        ErrorMessage = JsonObject->GetStringField(TEXT("error_message"));
                    }
                    else {
                        // Treat it as an error string 
                        ErrorMessage = Response.Contents;
                    }
                }
                else {
                    // Treat it as an error string 
                    ErrorMessage = Response.Contents;
                }
            }

            FString CurrError = TEXT("error calling getWorkspaceByPath: ") + ErrorMessage;
            return THTTPResult<TVariant<TMap<FString, TSharedPtr<WorkspaceConfiguration>>>>::Failure(CurrError, Response.ResponseCode, Response.Headers);
    }

    // Unepxected response code - TODO: try parse as any of the expected response types
    return THTTPResult<TVariant<TMap<FString, TSharedPtr<WorkspaceConfiguration>>>>::Failure(TEXT("error calling GetWorkspaceByPath: unexpected response code"), Response.ResponseCode, Response.Headers);
}



THTTPResult<TVariant<TSharedPtr<WorkspaceSyncStatus>>> DefaultApi::GetWorkspaceSyncStatus(FString repoID, FString workspaceID, 
        const FString& Token,
        const TMap<FString, FString>& Headers,
		int ConnectionTimeoutSeconds, int RequestTimeoutSeconds) const
{

    FString URL = TEXT("/repo/{RepoID}/workspace/{WorkspaceID}/sync");
    URL.ReplaceInline(TEXT("{RepoID}"), *DiversionHttp::URLEncode(DiversionHttp::parameterToString(repoID)));
    URL.ReplaceInline(TEXT("{WorkspaceID}"), *DiversionHttp::URLEncode(DiversionHttp::parameterToString(workspaceID)));

    TMap<FString, FString> localVarQueryParams;
    TMap<FString, FString> localVarFormParams;
    //TMap<FString, TSharedPtr<HttpContent>> localVarFileParams;

    
    TSet<FString> localVarResponseHttpContentTypes;
    localVarResponseHttpContentTypes.Add(TEXT("application/json"));

    FString localVarResponseHttpContentType;

    // use JSON if possible
    if (localVarResponseHttpContentTypes.Num() == 0)
    {
        localVarResponseHttpContentType = TEXT("application/json");
    }
    // JSON
    else if (localVarResponseHttpContentTypes.Contains(TEXT("application/json")))
    {
        localVarResponseHttpContentType = TEXT("application/json");
    }
    else
    {
        return THTTPResult<TVariant<TSharedPtr<WorkspaceSyncStatus>>>::Failure(TEXT("DefaultApi->GetWorkspaceSyncStatus does not produce any supported media type"), 400, {});
    }

    // TODO: Add this to the headers
    //Headers[TEXT("Accept")] = localVarResponseHttpContentType;

    TSet<FString> localVarConsumeHttpContentTypes;


    FString Content = TEXT("");
    // TSharedPtr<IHttpBody> localVarHttpBody;
    FString localVarRequestHttpContentType;

    // use JSON if possible
    if (localVarConsumeHttpContentTypes.Num() == 0 || localVarConsumeHttpContentTypes.Contains(TEXT("application/json")))
    {
        localVarRequestHttpContentType = TEXT("application/json");
    }
    else
    {
        return THTTPResult<TVariant<TSharedPtr<WorkspaceSyncStatus>>>::Failure(TEXT("DefaultApi->GetWorkspaceSyncStatus does not consume any supported media type"), 415, {});
    }

    // Add query params
    if (localVarQueryParams.Num() > 0) {
        URL += TEXT("?");
        FString QueryParams;
        for (const auto& Param : localVarQueryParams)
        {
            QueryParams += Param.Key + TEXT("=") + Param.Value + TEXT("&");
        }
        QueryParams.RemoveFromEnd(TEXT("&"));
        URL += QueryParams;
    }

    DiversionHttp::HTTPCallResponse Response = ApiClient->SendRequest(URL, DiversionHttp::HttpMethod::GET, Token, localVarRequestHttpContentType, 
        Content, Headers, ConnectionTimeoutSeconds, RequestTimeoutSeconds);

    // TODO: Add validation - check response content type
    
    if (Response.ResponseCode == 200) {
        if(localVarResponseHttpContentType == TEXT("application/json"))
        {
            TSharedPtr<WorkspaceSyncStatus> localVarResult = MakeShared<WorkspaceSyncStatus>();
            TSharedPtr<FJsonValue> JsonValue;
            TSharedRef<TJsonReader<>> JsonReader = TJsonReaderFactory<>::Create(Response.Contents);
            if (!FJsonSerializer::Deserialize(JsonReader, JsonValue) || !JsonValue.IsValid())
            {
                return THTTPResult<TVariant<TSharedPtr<WorkspaceSyncStatus>>>::Failure(TEXT("error calling getWorkspaceSyncStatus: JSON reader failed parsing the response string"), 500, Response.Headers);
            }

            
            if (localVarResult->FromJson(JsonValue)) {
                TVariant<TSharedPtr<WorkspaceSyncStatus>> variantResult;
                variantResult.Emplace<TSharedPtr<WorkspaceSyncStatus>>(localVarResult);
                return THTTPResult<TVariant<TSharedPtr<WorkspaceSyncStatus>>>::Success(TOptional(variantResult), Response.ResponseCode, Response.Headers);
            }
            else {
                return THTTPResult<TVariant<TSharedPtr<WorkspaceSyncStatus>>>::Failure(TEXT("error calling getWorkspaceSyncStatus: JSON response was not in the expected format"), 500, Response.Headers);
            }
        }


        else
        {
            return THTTPResult<TVariant<TSharedPtr<WorkspaceSyncStatus>>>::Failure(TEXT("error calling getWorkspaceSyncStatus: unsupported response type"), 500, Response.Headers);
        }
    }


    if (Response.ResponseCode >= 400)
    {
            FString ErrorMessage = TEXT("General Failure");
            if(Response.Error.IsSet()) {
                ErrorMessage = Response.Error.GetValue();
            } 
            else if(!Response.Contents.IsEmpty()) {
                // Try parsing as JSON
                TSharedPtr<FJsonObject> JsonObject;
                TSharedRef<TJsonReader<>> JsonReader = TJsonReaderFactory<>::Create(Response.Contents);
                if (FJsonSerializer::Deserialize(JsonReader, JsonObject) 
                    && JsonObject.IsValid())
                {
                    if (JsonObject->HasField(TEXT("error_message"))) {
                        ErrorMessage = JsonObject->GetStringField(TEXT("error_message"));
                    }
                    else {
                        // Treat it as an error string 
                        ErrorMessage = Response.Contents;
                    }
                }
                else {
                    // Treat it as an error string 
                    ErrorMessage = Response.Contents;
                }
            }

            FString CurrError = TEXT("error calling getWorkspaceSyncStatus: ") + ErrorMessage;
            return THTTPResult<TVariant<TSharedPtr<WorkspaceSyncStatus>>>::Failure(CurrError, Response.ResponseCode, Response.Headers);
    }

    // Unepxected response code - TODO: try parse as any of the expected response types
    return THTTPResult<TVariant<TSharedPtr<WorkspaceSyncStatus>>>::Failure(TEXT("error calling GetWorkspaceSyncStatus: unexpected response code"), Response.ResponseCode, Response.Headers);
}



THTTPResult<TVariant<TSharedPtr<IsAlive_200_response>>> DefaultApi::IsAlive(TOptional<bool> dumpTrace, 
        const FString& Token,
        const TMap<FString, FString>& Headers,
		int ConnectionTimeoutSeconds, int RequestTimeoutSeconds) const
{

    FString URL = TEXT("/health");

    TMap<FString, FString> localVarQueryParams;
    TMap<FString, FString> localVarFormParams;
    //TMap<FString, TSharedPtr<HttpContent>> localVarFileParams;

    
    TSet<FString> localVarResponseHttpContentTypes;
    localVarResponseHttpContentTypes.Add(TEXT("application/json"));

    FString localVarResponseHttpContentType;

    // use JSON if possible
    if (localVarResponseHttpContentTypes.Num() == 0)
    {
        localVarResponseHttpContentType = TEXT("application/json");
    }
    // JSON
    else if (localVarResponseHttpContentTypes.Contains(TEXT("application/json")))
    {
        localVarResponseHttpContentType = TEXT("application/json");
    }
    else
    {
        return THTTPResult<TVariant<TSharedPtr<IsAlive_200_response>>>::Failure(TEXT("DefaultApi->IsAlive does not produce any supported media type"), 400, {});
    }

    // TODO: Add this to the headers
    //Headers[TEXT("Accept")] = localVarResponseHttpContentType;

    TSet<FString> localVarConsumeHttpContentTypes;

    if (dumpTrace.IsSet())
    {
        localVarQueryParams.Add(TEXT("dump_trace"), DiversionHttp::URLEncode(DiversionHttp::parameterToString(dumpTrace.Get(false))));
    }

    FString Content = TEXT("");
    // TSharedPtr<IHttpBody> localVarHttpBody;
    FString localVarRequestHttpContentType;

    // use JSON if possible
    if (localVarConsumeHttpContentTypes.Num() == 0 || localVarConsumeHttpContentTypes.Contains(TEXT("application/json")))
    {
        localVarRequestHttpContentType = TEXT("application/json");
    }
    else
    {
        return THTTPResult<TVariant<TSharedPtr<IsAlive_200_response>>>::Failure(TEXT("DefaultApi->IsAlive does not consume any supported media type"), 415, {});
    }

    // Add query params
    if (localVarQueryParams.Num() > 0) {
        URL += TEXT("?");
        FString QueryParams;
        for (const auto& Param : localVarQueryParams)
        {
            QueryParams += Param.Key + TEXT("=") + Param.Value + TEXT("&");
        }
        QueryParams.RemoveFromEnd(TEXT("&"));
        URL += QueryParams;
    }

    DiversionHttp::HTTPCallResponse Response = ApiClient->SendRequest(URL, DiversionHttp::HttpMethod::GET, Token, localVarRequestHttpContentType, 
        Content, Headers, ConnectionTimeoutSeconds, RequestTimeoutSeconds);

    // TODO: Add validation - check response content type
    
    if (Response.ResponseCode == 200) {
        if(localVarResponseHttpContentType == TEXT("application/json"))
        {
            TSharedPtr<IsAlive_200_response> localVarResult = MakeShared<IsAlive_200_response>();
            TSharedPtr<FJsonValue> JsonValue;
            TSharedRef<TJsonReader<>> JsonReader = TJsonReaderFactory<>::Create(Response.Contents);
            if (!FJsonSerializer::Deserialize(JsonReader, JsonValue) || !JsonValue.IsValid())
            {
                return THTTPResult<TVariant<TSharedPtr<IsAlive_200_response>>>::Failure(TEXT("error calling isAlive: JSON reader failed parsing the response string"), 500, Response.Headers);
            }

            
            if (localVarResult->FromJson(JsonValue)) {
                TVariant<TSharedPtr<IsAlive_200_response>> variantResult;
                variantResult.Emplace<TSharedPtr<IsAlive_200_response>>(localVarResult);
                return THTTPResult<TVariant<TSharedPtr<IsAlive_200_response>>>::Success(TOptional(variantResult), Response.ResponseCode, Response.Headers);
            }
            else {
                return THTTPResult<TVariant<TSharedPtr<IsAlive_200_response>>>::Failure(TEXT("error calling isAlive: JSON response was not in the expected format"), 500, Response.Headers);
            }
        }


        else
        {
            return THTTPResult<TVariant<TSharedPtr<IsAlive_200_response>>>::Failure(TEXT("error calling isAlive: unsupported response type"), 500, Response.Headers);
        }
    }


    if (Response.ResponseCode >= 400)
    {
            FString ErrorMessage = TEXT("General Failure");
            if(Response.Error.IsSet()) {
                ErrorMessage = Response.Error.GetValue();
            } 
            else if(!Response.Contents.IsEmpty()) {
                // Try parsing as JSON
                TSharedPtr<FJsonObject> JsonObject;
                TSharedRef<TJsonReader<>> JsonReader = TJsonReaderFactory<>::Create(Response.Contents);
                if (FJsonSerializer::Deserialize(JsonReader, JsonObject) 
                    && JsonObject.IsValid())
                {
                    if (JsonObject->HasField(TEXT("error_message"))) {
                        ErrorMessage = JsonObject->GetStringField(TEXT("error_message"));
                    }
                    else {
                        // Treat it as an error string 
                        ErrorMessage = Response.Contents;
                    }
                }
                else {
                    // Treat it as an error string 
                    ErrorMessage = Response.Contents;
                }
            }

            FString CurrError = TEXT("error calling isAlive: ") + ErrorMessage;
            return THTTPResult<TVariant<TSharedPtr<IsAlive_200_response>>>::Failure(CurrError, Response.ResponseCode, Response.Headers);
    }

    // Unepxected response code - TODO: try parse as any of the expected response types
    return THTTPResult<TVariant<TSharedPtr<IsAlive_200_response>>>::Failure(TEXT("error calling IsAlive: unexpected response code"), Response.ResponseCode, Response.Headers);
}



THTTPResult<TVariant<void*>> DefaultApi::NotifySyncRequired(FString repoID, FString workspaceID, 
        const FString& Token,
        const TMap<FString, FString>& Headers,
		int ConnectionTimeoutSeconds, int RequestTimeoutSeconds) const
{

    FString URL = TEXT("/repo/{RepoID}/workspace/{WorkspaceID}/sync");
    URL.ReplaceInline(TEXT("{RepoID}"), *DiversionHttp::URLEncode(DiversionHttp::parameterToString(repoID)));
    URL.ReplaceInline(TEXT("{WorkspaceID}"), *DiversionHttp::URLEncode(DiversionHttp::parameterToString(workspaceID)));

    TMap<FString, FString> localVarQueryParams;
    TMap<FString, FString> localVarFormParams;
    //TMap<FString, TSharedPtr<HttpContent>> localVarFileParams;

    
    TSet<FString> localVarResponseHttpContentTypes;

    FString localVarResponseHttpContentType;

    // use JSON if possible
    if (localVarResponseHttpContentTypes.Num() == 0)
    {
        localVarResponseHttpContentType = TEXT("application/json");
    }
    // JSON
    else if (localVarResponseHttpContentTypes.Contains(TEXT("application/json")))
    {
        localVarResponseHttpContentType = TEXT("application/json");
    }
    else
    {
        return THTTPResult<TVariant<void*>>::Failure(TEXT("DefaultApi->NotifySyncRequired does not produce any supported media type"), 400, {});
    }

    // TODO: Add this to the headers
    //Headers[TEXT("Accept")] = localVarResponseHttpContentType;

    TSet<FString> localVarConsumeHttpContentTypes;


    FString Content = TEXT("");
    // TSharedPtr<IHttpBody> localVarHttpBody;
    FString localVarRequestHttpContentType;

    // use JSON if possible
    if (localVarConsumeHttpContentTypes.Num() == 0 || localVarConsumeHttpContentTypes.Contains(TEXT("application/json")))
    {
        localVarRequestHttpContentType = TEXT("application/json");
    }
    else
    {
        return THTTPResult<TVariant<void*>>::Failure(TEXT("DefaultApi->NotifySyncRequired does not consume any supported media type"), 415, {});
    }

    // Add query params
    if (localVarQueryParams.Num() > 0) {
        URL += TEXT("?");
        FString QueryParams;
        for (const auto& Param : localVarQueryParams)
        {
            QueryParams += Param.Key + TEXT("=") + Param.Value + TEXT("&");
        }
        QueryParams.RemoveFromEnd(TEXT("&"));
        URL += QueryParams;
    }

    DiversionHttp::HTTPCallResponse Response = ApiClient->SendRequest(URL, DiversionHttp::HttpMethod::POST, Token, localVarRequestHttpContentType, 
        Content, Headers, ConnectionTimeoutSeconds, RequestTimeoutSeconds);

    // TODO: Add validation - check response content type
    
    if (Response.ResponseCode == 200) {
        TVariant<void*> variantResult;
        variantResult.Emplace<void*>(nullptr);
        return THTTPResult<TVariant<void*>>::Success(TOptional(variantResult), Response.ResponseCode, Response.Headers);

    }


    if (Response.ResponseCode >= 400)
    {
            FString ErrorMessage = TEXT("General Failure");
            if(Response.Error.IsSet()) {
                ErrorMessage = Response.Error.GetValue();
            } 
            else if(!Response.Contents.IsEmpty()) {
                // Try parsing as JSON
                TSharedPtr<FJsonObject> JsonObject;
                TSharedRef<TJsonReader<>> JsonReader = TJsonReaderFactory<>::Create(Response.Contents);
                if (FJsonSerializer::Deserialize(JsonReader, JsonObject) 
                    && JsonObject.IsValid())
                {
                    if (JsonObject->HasField(TEXT("error_message"))) {
                        ErrorMessage = JsonObject->GetStringField(TEXT("error_message"));
                    }
                    else {
                        // Treat it as an error string 
                        ErrorMessage = Response.Contents;
                    }
                }
                else {
                    // Treat it as an error string 
                    ErrorMessage = Response.Contents;
                }
            }

            FString CurrError = TEXT("error calling notifySyncRequired: ") + ErrorMessage;
            return THTTPResult<TVariant<void*>>::Failure(CurrError, Response.ResponseCode, Response.Headers);
    }

    // Unepxected response code - TODO: try parse as any of the expected response types
    return THTTPResult<TVariant<void*>>::Failure(TEXT("error calling NotifySyncRequired: unexpected response code"), Response.ResponseCode, Response.Headers);
}



THTTPResult<TVariant<void*, TSharedPtr<UserErrors>>> DefaultApi::RepoInit(TSharedPtr<InitRepo> initRepo, 
        const FString& Token,
        const TMap<FString, FString>& Headers,
		int ConnectionTimeoutSeconds, int RequestTimeoutSeconds) const
{

    // verify the required parameter 'initRepo' is set
    if (initRepo == nullptr)
    {
        return THTTPResult<TVariant<void*, TSharedPtr<UserErrors>>>::Failure(TEXT("Missing required parameter 'initRepo' when calling DefaultApi->RepoInit"), 400, {});
    }

    FString URL = TEXT("/repo/init");

    TMap<FString, FString> localVarQueryParams;
    TMap<FString, FString> localVarFormParams;
    //TMap<FString, TSharedPtr<HttpContent>> localVarFileParams;

    
    TSet<FString> localVarResponseHttpContentTypes;
    localVarResponseHttpContentTypes.Add(TEXT("application/json"));

    FString localVarResponseHttpContentType;

    // use JSON if possible
    if (localVarResponseHttpContentTypes.Num() == 0)
    {
        localVarResponseHttpContentType = TEXT("application/json");
    }
    // JSON
    else if (localVarResponseHttpContentTypes.Contains(TEXT("application/json")))
    {
        localVarResponseHttpContentType = TEXT("application/json");
    }
    else
    {
        return THTTPResult<TVariant<void*, TSharedPtr<UserErrors>>>::Failure(TEXT("DefaultApi->RepoInit does not produce any supported media type"), 400, {});
    }

    // TODO: Add this to the headers
    //Headers[TEXT("Accept")] = localVarResponseHttpContentType;

    TSet<FString> localVarConsumeHttpContentTypes;
    localVarConsumeHttpContentTypes.Add(TEXT("application/json"));


    FString Content = TEXT("");
    // TSharedPtr<IHttpBody> localVarHttpBody;
    FString localVarRequestHttpContentType;

    // use JSON if possible
    if (localVarConsumeHttpContentTypes.Num() == 0 || localVarConsumeHttpContentTypes.Contains(TEXT("application/json")))
    {
        localVarRequestHttpContentType = TEXT("application/json");

        JsonWriter ContentWriter = TJsonWriterFactory<>::Create(&Content);
        
        initRepo->WriteJson(ContentWriter);
        
        ContentWriter->Close();

    }
    else
    {
        return THTTPResult<TVariant<void*, TSharedPtr<UserErrors>>>::Failure(TEXT("DefaultApi->RepoInit does not consume any supported media type"), 415, {});
    }

    // Add query params
    if (localVarQueryParams.Num() > 0) {
        URL += TEXT("?");
        FString QueryParams;
        for (const auto& Param : localVarQueryParams)
        {
            QueryParams += Param.Key + TEXT("=") + Param.Value + TEXT("&");
        }
        QueryParams.RemoveFromEnd(TEXT("&"));
        URL += QueryParams;
    }

    DiversionHttp::HTTPCallResponse Response = ApiClient->SendRequest(URL, DiversionHttp::HttpMethod::POST, Token, localVarRequestHttpContentType, 
        Content, Headers, ConnectionTimeoutSeconds, RequestTimeoutSeconds);

    // TODO: Add validation - check response content type
    
    if (Response.ResponseCode == 200) {
        TVariant<void*, TSharedPtr<UserErrors>> variantResult;
        variantResult.Emplace<void*>(nullptr);
        return THTTPResult<TVariant<void*, TSharedPtr<UserErrors>>>::Success(TOptional(variantResult), Response.ResponseCode, Response.Headers);

    }
    if (Response.ResponseCode == 400) {
            FString ErrorMessage = TEXT("General Failure");
            if(Response.Error.IsSet()) {
                ErrorMessage = Response.Error.GetValue();
            } 
            // Try parsing as JSON
            else if(!Response.Contents.IsEmpty()) {
                if(localVarResponseHttpContentType == TEXT("application/json"))
                {
                    TSharedPtr<UserErrors> localVarResult = MakeShared<UserErrors>();
                    TSharedPtr<FJsonValue> JsonValue;
                    TSharedRef<TJsonReader<>> JsonReader = TJsonReaderFactory<>::Create(Response.Contents);
                    if (!FJsonSerializer::Deserialize(JsonReader, JsonValue) || !JsonValue.IsValid())
                    {
                        ErrorMessage = TEXT("Received corrupted error data");
                    }
                    
                    if (localVarResult->FromJson(JsonValue)) {
                        TVariant<void*, TSharedPtr<UserErrors>> variantResult;
                        variantResult.Emplace<TSharedPtr<UserErrors>>(localVarResult);
                        return THTTPResult<TVariant<void*, TSharedPtr<UserErrors>>>::Failure(TEXT("ParsedJsonError"), Response.ResponseCode, Response.Headers, TOptional(variantResult));
                    }
                    else {
                        ErrorMessage = TEXT("Received corrupted error data");
                    }
                }
            }
            FString CurrError = TEXT("error calling repoInit: ") + ErrorMessage;
            return THTTPResult<TVariant<void*, TSharedPtr<UserErrors>>>::Failure(CurrError, Response.ResponseCode, Response.Headers);

    }


    if (Response.ResponseCode >= 400)
    {
            FString ErrorMessage = TEXT("General Failure");
            if(Response.Error.IsSet()) {
                ErrorMessage = Response.Error.GetValue();
            } 
            else if(!Response.Contents.IsEmpty()) {
                // Try parsing as JSON
                TSharedPtr<FJsonObject> JsonObject;
                TSharedRef<TJsonReader<>> JsonReader = TJsonReaderFactory<>::Create(Response.Contents);
                if (FJsonSerializer::Deserialize(JsonReader, JsonObject) 
                    && JsonObject.IsValid())
                {
                    if (JsonObject->HasField(TEXT("error_message"))) {
                        ErrorMessage = JsonObject->GetStringField(TEXT("error_message"));
                    }
                    else {
                        // Treat it as an error string 
                        ErrorMessage = Response.Contents;
                    }
                }
                else {
                    // Treat it as an error string 
                    ErrorMessage = Response.Contents;
                }
            }

            FString CurrError = TEXT("error calling repoInit: ") + ErrorMessage;
            return THTTPResult<TVariant<void*, TSharedPtr<UserErrors>>>::Failure(CurrError, Response.ResponseCode, Response.Headers);
    }

    // Unepxected response code - TODO: try parse as any of the expected response types
    return THTTPResult<TVariant<void*, TSharedPtr<UserErrors>>>::Failure(TEXT("error calling RepoInit: unexpected response code"), Response.ResponseCode, Response.Headers);
}


}
}

