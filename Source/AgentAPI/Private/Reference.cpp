// Copyright 2024 Diversion Company, Inc. All Rights Reserved.
/**
 * Agent API
 * API of Diversion sync agent
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.10.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "JsonBody.h"
#include "Reference.h"

namespace Diversion {
namespace AgentAPI {
namespace Model {



void Reference::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("Id")); WriteJsonValue(Writer, mId);
	Writer->WriteIdentifierPrefix(TEXT("Type")); WriteJsonValue(Writer, Reference::EnumToString(mType));
	Writer->WriteObjectEnd();
}

bool Reference::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{

	const TSharedPtr<FJsonObject>* InnerGeneratorOpenAPIObject;
	if (!JsonValue->TryGetObject(InnerGeneratorOpenAPIObject))
		return false;

	bool ParseSuccess = true;

    FString TypeString;
    

	ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("Id"), mId);
	ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("Type"), TypeString);

    if (ParseSuccess) {
        ParseSuccess &= Reference::EnumFromString(TypeString, mType);
    }

	return ParseSuccess;
}


FString Reference::EnumToString(const TypeEnum& EnumValue) {
    switch (EnumValue)
    {
    case TypeEnum::BRANCH:
        return TEXT("BRANCH");
    case TypeEnum::COMMIT:
        return TEXT("COMMIT");
    default:
        return TEXT("");
    }
}

bool Reference::EnumFromString(const FString& EnumAsString, TypeEnum& EnumValue) {
    if(EnumAsString.IsEmpty()) return false;
    if(EnumAsString == TEXT("BRANCH")) {
        EnumValue = TypeEnum::BRANCH;
        return true;
    }
    if(EnumAsString == TEXT("COMMIT")) {
        EnumValue = TypeEnum::COMMIT;
        return true;
    }

    return false;
}


}
}
}

