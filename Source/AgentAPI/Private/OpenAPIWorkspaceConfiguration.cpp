// Copyright 2024 Diversion Company, Inc. All Rights Reserved.
/**
 * Agent API
 * API of Diversion sync agent
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIWorkspaceConfiguration.h"

#include "AgentAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace AgentAPI
{

void OpenAPIWorkspaceConfiguration::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("WorkspaceID")); WriteJsonValue(Writer, WorkspaceID);
	Writer->WriteIdentifierPrefix(TEXT("RepoID")); WriteJsonValue(Writer, RepoID);
	Writer->WriteIdentifierPrefix(TEXT("Path")); WriteJsonValue(Writer, Path);
	Writer->WriteIdentifierPrefix(TEXT("AccountID")); WriteJsonValue(Writer, AccountID);
	if (BranchID.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("BranchID")); WriteJsonValue(Writer, BranchID.GetValue());
	}
	if (BranchName.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("BranchName")); WriteJsonValue(Writer, BranchName.GetValue());
	}
	Writer->WriteIdentifierPrefix(TEXT("CommitID")); WriteJsonValue(Writer, CommitID);
	Writer->WriteIdentifierPrefix(TEXT("Paused")); WriteJsonValue(Writer, Paused);
	Writer->WriteIdentifierPrefix(TEXT("ShouldDownload")); WriteJsonValue(Writer, ShouldDownload);
	if (MaxConcurrentWrites.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("MaxConcurrentWrites")); WriteJsonValue(Writer, MaxConcurrentWrites.GetValue());
	}
	if (RepoName.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("RepoName")); WriteJsonValue(Writer, RepoName.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPIWorkspaceConfiguration::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* InnerGeneratorOpenAPIObject;
	if (!JsonValue->TryGetObject(InnerGeneratorOpenAPIObject))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("WorkspaceID"), WorkspaceID);
	ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("RepoID"), RepoID);
	ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("Path"), Path);
	ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("AccountID"), AccountID);
	ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("BranchID"), BranchID);
	ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("BranchName"), BranchName);
	ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("CommitID"), CommitID);
	ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("Paused"), Paused);
	ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("ShouldDownload"), ShouldDownload);
	ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("MaxConcurrentWrites"), MaxConcurrentWrites);
	ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("RepoName"), RepoName);

	return ParseSuccess;
}

}
