// Copyright 2024 Diversion Company, Inc. All Rights Reserved.
/**
 * Agent API
 * API of Diversion sync agent
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIDefaultApi.h"

#include "OpenAPIDefaultApiOperations.h"
#include "AgentAPIModule.h"

#include "HttpModule.h"
#include "Serialization/JsonSerializer.h"
#include "DiversionAgentAddress.h"

namespace AgentAPI
{

OpenAPIDefaultApi::OpenAPIDefaultApi()
: Url(TEXT("http://localhost:8797"))
{
}

OpenAPIDefaultApi::~OpenAPIDefaultApi() {}

void OpenAPIDefaultApi::SetURL(const FString& InUrl)
{
	Url = InUrl;
}

void OpenAPIDefaultApi::AddHeaderParam(const FString& Key, const FString& Value)
{
	AdditionalHeaderParams.Add(Key, Value);
}

void OpenAPIDefaultApi::ClearHeaderParams()
{
	AdditionalHeaderParams.Reset();
}

bool OpenAPIDefaultApi::IsValid() const
{
	if (Url.IsEmpty())
	{
		UE_LOG(LogAgentAPI, Error, TEXT("OpenAPIDefaultApi: Endpoint Url is not set, request cannot be performed"));
		return false;
	}

	return true;
}

void OpenAPIDefaultApi::SetHttpRetryManager(FHttpRetrySystem::FManager& InRetryManager)
{
	if (RetryManager != &InRetryManager)
	{
		DefaultRetryManager.Reset();
		RetryManager = &InRetryManager;
	}
}

FHttpRetrySystem::FManager& OpenAPIDefaultApi::GetHttpRetryManager()
{
	checkf(RetryManager, TEXT("OpenAPIDefaultApi: RetryManager is null.  You may have meant to set it with SetHttpRetryManager first, or you may not be using a custom RetryManager at all."))
	return *RetryManager;
}

FHttpRequestRef OpenAPIDefaultApi::CreateHttpRequest(const Request& Request) const
{
	if (!Request.GetRetryParams().IsSet())
	{
		return FHttpModule::Get().CreateRequest();
	}
	else
	{
		if (!RetryManager)
		{
			// Create default retry manager if none was specified
			DefaultRetryManager = MakeUnique<HttpRetryManager>(6, 60);
			RetryManager = DefaultRetryManager.Get();
		}

		const HttpRetryParams& Params = Request.GetRetryParams().GetValue();
		return RetryManager->CreateRequest(Params.RetryLimitCountOverride, Params.RetryTimeoutRelativeSecondsOverride, Params.RetryResponseCodes, Params.RetryVerbs, Params.RetryDomains);
	}
}

void OpenAPIDefaultApi::HandleResponse(FHttpResponsePtr HttpResponse, bool bSucceeded, Response& InOutResponse) const
{
	InOutResponse.SetHttpResponse(HttpResponse);
	InOutResponse.SetSuccessful(bSucceeded);

	if (bSucceeded && HttpResponse.IsValid())
	{
		InOutResponse.SetHttpResponseCode((EHttpResponseCodes::Type)HttpResponse->GetResponseCode());
		FString ContentType = HttpResponse->GetContentType();
		FString Content;

		if (ContentType.IsEmpty() || HttpResponse->GetContentLength() == 0)
		{
			return; // Nothing to parse
		}
		else if (ContentType.StartsWith(TEXT("application/json")) || ContentType.StartsWith("text/json"))
		{
			Content = HttpResponse->GetContentAsString();

			TSharedPtr<FJsonValue> JsonValue;
			auto Reader = TJsonReaderFactory<>::Create(Content);

			if (FJsonSerializer::Deserialize(Reader, JsonValue) && JsonValue.IsValid())
			{
				if (InOutResponse.FromJson(JsonValue))
					return; // Successfully parsed
			}
		}
		else if(ContentType.StartsWith(TEXT("text/plain")))
		{
			Content = HttpResponse->GetContentAsString();
			InOutResponse.SetResponseString(Content);
			return; // Successfully parsed
		}

		// Report the parse error but do not mark the request as unsuccessful. Data could be partial or malformed, but the request succeeded.
		UE_LOG(LogAgentAPI, Error, TEXT("Failed to deserialize Http response content (type:%s):\n%s"), *ContentType , *Content);
		return;
	}

	// By default, assume we failed to establish connection
	InOutResponse.SetHttpResponseCode(EHttpResponseCodes::RequestTimeout);
}

FHttpRequestPtr OpenAPIDefaultApi::AddOrUpdateClonedWorkspace(const AddOrUpdateClonedWorkspaceRequest& Request, const FAddOrUpdateClonedWorkspaceDelegate& Delegate /*= FAddOrUpdateClonedWorkspaceDelegate()*/, float InTimeoutSecs /*= -1.f*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(FDiversionAgentAddress::GetAgentURL() + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	if(InTimeoutSecs > 0.f){
		HttpRequest->SetTimeout(InTimeoutSecs);
	}
	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindSP(SharedThis(this), &OpenAPIDefaultApi::OnAddOrUpdateClonedWorkspaceResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnAddOrUpdateClonedWorkspaceResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FAddOrUpdateClonedWorkspaceDelegate Delegate) const
{
	AddOrUpdateClonedWorkspaceResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::CloneRepository(const CloneRepositoryRequest& Request, const FCloneRepositoryDelegate& Delegate /*= FCloneRepositoryDelegate()*/, float InTimeoutSecs /*= -1.f*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(FDiversionAgentAddress::GetAgentURL() + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	if(InTimeoutSecs > 0.f){
		HttpRequest->SetTimeout(InTimeoutSecs);
	}
	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindSP(SharedThis(this), &OpenAPIDefaultApi::OnCloneRepositoryResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnCloneRepositoryResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FCloneRepositoryDelegate Delegate) const
{
	CloneRepositoryResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::CoreAccessToken(const CoreAccessTokenRequest& Request, const FCoreAccessTokenDelegate& Delegate /*= FCoreAccessTokenDelegate()*/, float InTimeoutSecs /*= -1.f*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(FDiversionAgentAddress::GetAgentURL() + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	if(InTimeoutSecs > 0.f){
		HttpRequest->SetTimeout(InTimeoutSecs);
	}
	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindSP(SharedThis(this), &OpenAPIDefaultApi::OnCoreAccessTokenResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnCoreAccessTokenResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FCoreAccessTokenDelegate Delegate) const
{
	CoreAccessTokenResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::GenerateSupportBundle(const GenerateSupportBundleRequest& Request, const FGenerateSupportBundleDelegate& Delegate /*= FGenerateSupportBundleDelegate()*/, float InTimeoutSecs /*= -1.f*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(FDiversionAgentAddress::GetAgentURL() + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	if(InTimeoutSecs > 0.f){
		HttpRequest->SetTimeout(InTimeoutSecs);
	}
	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindSP(SharedThis(this), &OpenAPIDefaultApi::OnGenerateSupportBundleResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnGenerateSupportBundleResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGenerateSupportBundleDelegate Delegate) const
{
	GenerateSupportBundleResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::GetAllWorkspaces(const GetAllWorkspacesRequest& Request, const FGetAllWorkspacesDelegate& Delegate /*= FGetAllWorkspacesDelegate()*/, float InTimeoutSecs /*= -1.f*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(FDiversionAgentAddress::GetAgentURL() + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	if(InTimeoutSecs > 0.f){
		HttpRequest->SetTimeout(InTimeoutSecs);
	}
	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindSP(SharedThis(this), &OpenAPIDefaultApi::OnGetAllWorkspacesResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnGetAllWorkspacesResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetAllWorkspacesDelegate Delegate) const
{
	GetAllWorkspacesResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::GetFileSyncStatus(const GetFileSyncStatusRequest& Request, const FGetFileSyncStatusDelegate& Delegate /*= FGetFileSyncStatusDelegate()*/, float InTimeoutSecs /*= -1.f*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(FDiversionAgentAddress::GetAgentURL() + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	if(InTimeoutSecs > 0.f){
		HttpRequest->SetTimeout(InTimeoutSecs);
	}
	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindSP(SharedThis(this), &OpenAPIDefaultApi::OnGetFileSyncStatusResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnGetFileSyncStatusResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetFileSyncStatusDelegate Delegate) const
{
	GetFileSyncStatusResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::GetSyncProgress(const GetSyncProgressRequest& Request, const FGetSyncProgressDelegate& Delegate /*= FGetSyncProgressDelegate()*/, float InTimeoutSecs /*= -1.f*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(FDiversionAgentAddress::GetAgentURL() + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	if(InTimeoutSecs > 0.f){
		HttpRequest->SetTimeout(InTimeoutSecs);
	}
	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindSP(SharedThis(this), &OpenAPIDefaultApi::OnGetSyncProgressResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnGetSyncProgressResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetSyncProgressDelegate Delegate) const
{
	GetSyncProgressResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::GetWorkspace(const GetWorkspaceRequest& Request, const FGetWorkspaceDelegate& Delegate /*= FGetWorkspaceDelegate()*/, float InTimeoutSecs /*= -1.f*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(FDiversionAgentAddress::GetAgentURL() + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	if(InTimeoutSecs > 0.f){
		HttpRequest->SetTimeout(InTimeoutSecs);
	}
	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindSP(SharedThis(this), &OpenAPIDefaultApi::OnGetWorkspaceResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnGetWorkspaceResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetWorkspaceDelegate Delegate) const
{
	GetWorkspaceResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::GetWorkspaceByPath(const GetWorkspaceByPathRequest& Request, const FGetWorkspaceByPathDelegate& Delegate /*= FGetWorkspaceByPathDelegate()*/, float InTimeoutSecs /*= -1.f*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(FDiversionAgentAddress::GetAgentURL() + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	if(InTimeoutSecs > 0.f){
		HttpRequest->SetTimeout(InTimeoutSecs);
	}
	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindSP(SharedThis(this), &OpenAPIDefaultApi::OnGetWorkspaceByPathResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnGetWorkspaceByPathResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetWorkspaceByPathDelegate Delegate) const
{
	GetWorkspaceByPathResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::GetWorkspaceSyncStatus(const GetWorkspaceSyncStatusRequest& Request, const FGetWorkspaceSyncStatusDelegate& Delegate /*= FGetWorkspaceSyncStatusDelegate()*/, float InTimeoutSecs /*= -1.f*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(FDiversionAgentAddress::GetAgentURL() + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	if(InTimeoutSecs > 0.f){
		HttpRequest->SetTimeout(InTimeoutSecs);
	}
	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindSP(SharedThis(this), &OpenAPIDefaultApi::OnGetWorkspaceSyncStatusResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnGetWorkspaceSyncStatusResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetWorkspaceSyncStatusDelegate Delegate) const
{
	GetWorkspaceSyncStatusResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::GetWorkspaces(const GetWorkspacesRequest& Request, const FGetWorkspacesDelegate& Delegate /*= FGetWorkspacesDelegate()*/, float InTimeoutSecs /*= -1.f*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(FDiversionAgentAddress::GetAgentURL() + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	if(InTimeoutSecs > 0.f){
		HttpRequest->SetTimeout(InTimeoutSecs);
	}
	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindSP(SharedThis(this), &OpenAPIDefaultApi::OnGetWorkspacesResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnGetWorkspacesResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetWorkspacesDelegate Delegate) const
{
	GetWorkspacesResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::IsAlive(const IsAliveRequest& Request, const FIsAliveDelegate& Delegate /*= FIsAliveDelegate()*/, float InTimeoutSecs /*= -1.f*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(FDiversionAgentAddress::GetAgentURL() + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	if(InTimeoutSecs > 0.f){
		HttpRequest->SetTimeout(InTimeoutSecs);
	}
	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindSP(SharedThis(this), &OpenAPIDefaultApi::OnIsAliveResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnIsAliveResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FIsAliveDelegate Delegate) const
{
	IsAliveResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ListDir(const ListDirRequest& Request, const FListDirDelegate& Delegate /*= FListDirDelegate()*/, float InTimeoutSecs /*= -1.f*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(FDiversionAgentAddress::GetAgentURL() + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	if(InTimeoutSecs > 0.f){
		HttpRequest->SetTimeout(InTimeoutSecs);
	}
	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindSP(SharedThis(this), &OpenAPIDefaultApi::OnListDirResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnListDirResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FListDirDelegate Delegate) const
{
	ListDirResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::NotifyOfAuthEvent(const NotifyOfAuthEventRequest& Request, const FNotifyOfAuthEventDelegate& Delegate /*= FNotifyOfAuthEventDelegate()*/, float InTimeoutSecs /*= -1.f*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(FDiversionAgentAddress::GetAgentURL() + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	if(InTimeoutSecs > 0.f){
		HttpRequest->SetTimeout(InTimeoutSecs);
	}
	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindSP(SharedThis(this), &OpenAPIDefaultApi::OnNotifyOfAuthEventResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnNotifyOfAuthEventResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FNotifyOfAuthEventDelegate Delegate) const
{
	NotifyOfAuthEventResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::NotifyScanRequired(const NotifyScanRequiredRequest& Request, const FNotifyScanRequiredDelegate& Delegate /*= FNotifyScanRequiredDelegate()*/, float InTimeoutSecs /*= -1.f*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(FDiversionAgentAddress::GetAgentURL() + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	if(InTimeoutSecs > 0.f){
		HttpRequest->SetTimeout(InTimeoutSecs);
	}
	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindSP(SharedThis(this), &OpenAPIDefaultApi::OnNotifyScanRequiredResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnNotifyScanRequiredResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FNotifyScanRequiredDelegate Delegate) const
{
	NotifyScanRequiredResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::NotifySyncRequired(const NotifySyncRequiredRequest& Request, const FNotifySyncRequiredDelegate& Delegate /*= FNotifySyncRequiredDelegate()*/, float InTimeoutSecs /*= -1.f*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(FDiversionAgentAddress::GetAgentURL() + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	if(InTimeoutSecs > 0.f){
		HttpRequest->SetTimeout(InTimeoutSecs);
	}
	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindSP(SharedThis(this), &OpenAPIDefaultApi::OnNotifySyncRequiredResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnNotifySyncRequiredResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FNotifySyncRequiredDelegate Delegate) const
{
	NotifySyncRequiredResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::OpenLocalWorkspace(const OpenLocalWorkspaceRequest& Request, const FOpenLocalWorkspaceDelegate& Delegate /*= FOpenLocalWorkspaceDelegate()*/, float InTimeoutSecs /*= -1.f*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(FDiversionAgentAddress::GetAgentURL() + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	if(InTimeoutSecs > 0.f){
		HttpRequest->SetTimeout(InTimeoutSecs);
	}
	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindSP(SharedThis(this), &OpenAPIDefaultApi::OnOpenLocalWorkspaceResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnOpenLocalWorkspaceResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FOpenLocalWorkspaceDelegate Delegate) const
{
	OpenLocalWorkspaceResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::OpenLocalWorkspaceFile(const OpenLocalWorkspaceFileRequest& Request, const FOpenLocalWorkspaceFileDelegate& Delegate /*= FOpenLocalWorkspaceFileDelegate()*/, float InTimeoutSecs /*= -1.f*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(FDiversionAgentAddress::GetAgentURL() + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	if(InTimeoutSecs > 0.f){
		HttpRequest->SetTimeout(InTimeoutSecs);
	}
	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindSP(SharedThis(this), &OpenAPIDefaultApi::OnOpenLocalWorkspaceFileResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnOpenLocalWorkspaceFileResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FOpenLocalWorkspaceFileDelegate Delegate) const
{
	OpenLocalWorkspaceFileResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::PauseWorkspaceSync(const PauseWorkspaceSyncRequest& Request, const FPauseWorkspaceSyncDelegate& Delegate /*= FPauseWorkspaceSyncDelegate()*/, float InTimeoutSecs /*= -1.f*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(FDiversionAgentAddress::GetAgentURL() + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	if(InTimeoutSecs > 0.f){
		HttpRequest->SetTimeout(InTimeoutSecs);
	}
	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindSP(SharedThis(this), &OpenAPIDefaultApi::OnPauseWorkspaceSyncResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnPauseWorkspaceSyncResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FPauseWorkspaceSyncDelegate Delegate) const
{
	PauseWorkspaceSyncResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::RemoveClonedWorkspace(const RemoveClonedWorkspaceRequest& Request, const FRemoveClonedWorkspaceDelegate& Delegate /*= FRemoveClonedWorkspaceDelegate()*/, float InTimeoutSecs /*= -1.f*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(FDiversionAgentAddress::GetAgentURL() + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	if(InTimeoutSecs > 0.f){
		HttpRequest->SetTimeout(InTimeoutSecs);
	}
	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindSP(SharedThis(this), &OpenAPIDefaultApi::OnRemoveClonedWorkspaceResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnRemoveClonedWorkspaceResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FRemoveClonedWorkspaceDelegate Delegate) const
{
	RemoveClonedWorkspaceResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::RepoInit(const RepoInitRequest& Request, const FRepoInitDelegate& Delegate /*= FRepoInitDelegate()*/, float InTimeoutSecs /*= -1.f*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(FDiversionAgentAddress::GetAgentURL() + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	if(InTimeoutSecs > 0.f){
		HttpRequest->SetTimeout(InTimeoutSecs);
	}
	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindSP(SharedThis(this), &OpenAPIDefaultApi::OnRepoInitResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnRepoInitResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FRepoInitDelegate Delegate) const
{
	RepoInitResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::ResumeWorkspaceSync(const ResumeWorkspaceSyncRequest& Request, const FResumeWorkspaceSyncDelegate& Delegate /*= FResumeWorkspaceSyncDelegate()*/, float InTimeoutSecs /*= -1.f*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(FDiversionAgentAddress::GetAgentURL() + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	if(InTimeoutSecs > 0.f){
		HttpRequest->SetTimeout(InTimeoutSecs);
	}
	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindSP(SharedThis(this), &OpenAPIDefaultApi::OnResumeWorkspaceSyncResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnResumeWorkspaceSyncResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FResumeWorkspaceSyncDelegate Delegate) const
{
	ResumeWorkspaceSyncResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::UpdateCoreCredentials(const UpdateCoreCredentialsRequest& Request, const FUpdateCoreCredentialsDelegate& Delegate /*= FUpdateCoreCredentialsDelegate()*/, float InTimeoutSecs /*= -1.f*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(FDiversionAgentAddress::GetAgentURL() + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	if(InTimeoutSecs > 0.f){
		HttpRequest->SetTimeout(InTimeoutSecs);
	}
	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindSP(SharedThis(this), &OpenAPIDefaultApi::OnUpdateCoreCredentialsResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnUpdateCoreCredentialsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUpdateCoreCredentialsDelegate Delegate) const
{
	UpdateCoreCredentialsResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIDefaultApi::WorkspaceStructureDump(const WorkspaceStructureDumpRequest& Request, const FWorkspaceStructureDumpDelegate& Delegate /*= FWorkspaceStructureDumpDelegate()*/, float InTimeoutSecs /*= -1.f*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(FDiversionAgentAddress::GetAgentURL() + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	if(InTimeoutSecs > 0.f){
		HttpRequest->SetTimeout(InTimeoutSecs);
	}
	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindSP(SharedThis(this), &OpenAPIDefaultApi::OnWorkspaceStructureDumpResponse, Delegate, Request.ResponseFilePath);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIDefaultApi::OnWorkspaceStructureDumpResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FWorkspaceStructureDumpDelegate Delegate, const FString InResponseFilePath) const
{
	WorkspaceStructureDumpResponse Response(InResponseFilePath);
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

}
