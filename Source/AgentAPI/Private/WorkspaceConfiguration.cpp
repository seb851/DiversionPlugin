// Copyright 2024 Diversion Company, Inc. All Rights Reserved.
/**
 * Agent API
 * API of Diversion sync agent
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.10.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "JsonBody.h"
#include "WorkspaceConfiguration.h"

namespace Diversion {
namespace AgentAPI {
namespace Model {



void WorkspaceConfiguration::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("WorkspaceID")); WriteJsonValue(Writer, mWorkspaceID);
	Writer->WriteIdentifierPrefix(TEXT("RepoID")); WriteJsonValue(Writer, mRepoID);
	Writer->WriteIdentifierPrefix(TEXT("Path")); WriteJsonValue(Writer, mPath);
	Writer->WriteIdentifierPrefix(TEXT("AccountID")); WriteJsonValue(Writer, mAccountID);
	if (mBranchID.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("BranchID")); WriteJsonValue(Writer, mBranchID.GetValue());
	}
	if (mBranchName.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("BranchName")); WriteJsonValue(Writer, mBranchName.GetValue());
	}
	Writer->WriteIdentifierPrefix(TEXT("CommitID")); WriteJsonValue(Writer, mCommitID);
	Writer->WriteIdentifierPrefix(TEXT("Paused")); WriteJsonValue(Writer, mPaused);
	Writer->WriteIdentifierPrefix(TEXT("ShouldDownload")); WriteJsonValue(Writer, mShouldDownload);
	if (mMaxConcurrentWrites.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("MaxConcurrentWrites")); WriteJsonValue(Writer, mMaxConcurrentWrites.GetValue());
	}
	if (mRepoName.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("RepoName")); WriteJsonValue(Writer, mRepoName.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool WorkspaceConfiguration::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{

	const TSharedPtr<FJsonObject>* InnerGeneratorOpenAPIObject;
	if (!JsonValue->TryGetObject(InnerGeneratorOpenAPIObject))
		return false;

	bool ParseSuccess = true;

    

	ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("WorkspaceID"), mWorkspaceID);
	ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("RepoID"), mRepoID);
	ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("Path"), mPath);
	ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("AccountID"), mAccountID);
    ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("BranchID"), mBranchID);
    ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("BranchName"), mBranchName);
	ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("CommitID"), mCommitID);
	ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("Paused"), mPaused);
	ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("ShouldDownload"), mShouldDownload);
    ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("MaxConcurrentWrites"), mMaxConcurrentWrites);
    ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("RepoName"), mRepoName);


	return ParseSuccess;
}


}
}
}

