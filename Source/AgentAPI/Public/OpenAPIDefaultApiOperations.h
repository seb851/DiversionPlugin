// Copyright 2024 Diversion Company, Inc. All Rights Reserved.
/**
 * Agent API
 * API of Diversion sync agent
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "OpenAPIBaseModel.h"
#include "OpenAPIDefaultApi.h"

#include "OpenAPIHelpers.h"
#include "OpenAPIAuthNotification.h"
#include "OpenAPICloneRepo.h"
#include "OpenAPICoreAccessToken200Response.h"
#include "OpenAPICoreApiCredentials.h"
#include "OpenAPIError.h"
#include "OpenAPIFileSyncStatus.h"
#include "OpenAPIInitRepo.h"
#include "OpenAPIIsAlive200Response.h"
#include "OpenAPIListDir200Response.h"
#include "OpenAPIListDirRequest.h"
#include "OpenAPIOpenLocalWorkspaceRequest.h"
#include "OpenAPIOpenWorkspaceFileParams.h"
#include "OpenAPISupportBundle.h"
#include "OpenAPISupportBundleResponse.h"
#include "OpenAPIUserErrors.h"
#include "OpenAPIWorkspaceConfiguration.h"
#include "OpenAPIWorkspaceSyncProgress.h"
#include "OpenAPIWorkspaceSyncStatus.h"

namespace AgentAPI
{

/* Add or update a cloned workspace

*/
class AGENTAPI_API OpenAPIDefaultApi::AddOrUpdateClonedWorkspaceRequest : public Request
{
public:
    virtual ~AddOrUpdateClonedWorkspaceRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	FString RepoID;
	FString WorkspaceID;
	OpenAPIWorkspaceConfiguration OpenAPIWorkspaceConfiguration;
};

class AGENTAPI_API OpenAPIDefaultApi::AddOrUpdateClonedWorkspaceResponse : public Response
{
public:
    virtual ~AddOrUpdateClonedWorkspaceResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    
};

/* Clone repository into a local workspace

*/
class AGENTAPI_API OpenAPIDefaultApi::CloneRepositoryRequest : public Request
{
public:
    virtual ~CloneRepositoryRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	FString RepoID;
	OpenAPICloneRepo OpenAPICloneRepo;
};

class AGENTAPI_API OpenAPIDefaultApi::CloneRepositoryResponse : public Response
{
public:
    virtual ~CloneRepositoryResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIWorkspaceConfiguration Content;
};

/* Get coreapi access token for the current user

*/
class AGENTAPI_API OpenAPIDefaultApi::CoreAccessTokenRequest : public Request
{
public:
    virtual ~CoreAccessTokenRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

};

class AGENTAPI_API OpenAPIDefaultApi::CoreAccessTokenResponse : public Response
{
public:
    virtual ~CoreAccessTokenResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPICoreAccessToken200Response Content;
};

/* Generate support bundle for the agent

*/
class AGENTAPI_API OpenAPIDefaultApi::GenerateSupportBundleRequest : public Request
{
public:
    virtual ~GenerateSupportBundleRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	OpenAPISupportBundle OpenAPISupportBundle;
};

class AGENTAPI_API OpenAPIDefaultApi::GenerateSupportBundleResponse : public Response
{
public:
    virtual ~GenerateSupportBundleResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPISupportBundleResponse Content;
};

/* Get all workspaces

*/
class AGENTAPI_API OpenAPIDefaultApi::GetAllWorkspacesRequest : public Request
{
public:
    virtual ~GetAllWorkspacesRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

};

class AGENTAPI_API OpenAPIDefaultApi::GetAllWorkspacesResponse : public Response
{
public:
    virtual ~GetAllWorkspacesResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    TMap<FString, OpenAPIWorkspaceConfiguration> Content;
};

/* Get file sync status for each path

*/
class AGENTAPI_API OpenAPIDefaultApi::GetFileSyncStatusRequest : public Request
{
public:
    virtual ~GetFileSyncStatusRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	FString RepoID;
	FString WorkspaceID;
	TOptional<TArray<FString>> Paths;
};

class AGENTAPI_API OpenAPIDefaultApi::GetFileSyncStatusResponse : public Response
{
public:
    virtual ~GetFileSyncStatusResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    TArray<OpenAPIFileSyncStatus> Content;
};

/* Get workspace sync progress

*/
class AGENTAPI_API OpenAPIDefaultApi::GetSyncProgressRequest : public Request
{
public:
    virtual ~GetSyncProgressRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	FString RepoID;
	FString WorkspaceID;
};

class AGENTAPI_API OpenAPIDefaultApi::GetSyncProgressResponse : public Response
{
public:
    virtual ~GetSyncProgressResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIWorkspaceSyncProgress Content;
};

/* Get workspace by ID

*/
class AGENTAPI_API OpenAPIDefaultApi::GetWorkspaceRequest : public Request
{
public:
    virtual ~GetWorkspaceRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	FString RepoID;
	FString WorkspaceID;
};

class AGENTAPI_API OpenAPIDefaultApi::GetWorkspaceResponse : public Response
{
public:
    virtual ~GetWorkspaceResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIWorkspaceConfiguration Content;
};

/* Get workspace configuration for the given path

*/
class AGENTAPI_API OpenAPIDefaultApi::GetWorkspaceByPathRequest : public Request
{
public:
    virtual ~GetWorkspaceByPathRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	FString AbsPath;
};

class AGENTAPI_API OpenAPIDefaultApi::GetWorkspaceByPathResponse : public Response
{
public:
    virtual ~GetWorkspaceByPathResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    TMap<FString, OpenAPIWorkspaceConfiguration> Content;
};

/* Get workspace sync status

*/
class AGENTAPI_API OpenAPIDefaultApi::GetWorkspaceSyncStatusRequest : public Request
{
public:
    virtual ~GetWorkspaceSyncStatusRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	FString RepoID;
	FString WorkspaceID;
};

class AGENTAPI_API OpenAPIDefaultApi::GetWorkspaceSyncStatusResponse : public Response
{
public:
    virtual ~GetWorkspaceSyncStatusResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIWorkspaceSyncStatus Content;
};

/* Get workspaces by repo ID

*/
class AGENTAPI_API OpenAPIDefaultApi::GetWorkspacesRequest : public Request
{
public:
    virtual ~GetWorkspacesRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	FString RepoID;
};

class AGENTAPI_API OpenAPIDefaultApi::GetWorkspacesResponse : public Response
{
public:
    virtual ~GetWorkspacesResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    TMap<FString, OpenAPIWorkspaceConfiguration> Content;
};

/* Is alive sanity check

*/
class AGENTAPI_API OpenAPIDefaultApi::IsAliveRequest : public Request
{
public:
    virtual ~IsAliveRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	TOptional<bool> DumpTrace;
};

class AGENTAPI_API OpenAPIDefaultApi::IsAliveResponse : public Response
{
public:
    virtual ~IsAliveResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIIsAlive200Response Content;
};

/* List directory paths to suggest candidates for cloning / init repos

*/
class AGENTAPI_API OpenAPIDefaultApi::ListDirRequest : public Request
{
public:
    virtual ~ListDirRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	OpenAPIListDirRequest OpenAPIListDirRequest;
};

class AGENTAPI_API OpenAPIDefaultApi::ListDirResponse : public Response
{
public:
    virtual ~ListDirResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIListDir200Response Content;
};

/* Notify of an authentication event

*/
class AGENTAPI_API OpenAPIDefaultApi::NotifyOfAuthEventRequest : public Request
{
public:
    virtual ~NotifyOfAuthEventRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	OpenAPIAuthNotification OpenAPIAuthNotification;
};

class AGENTAPI_API OpenAPIDefaultApi::NotifyOfAuthEventResponse : public Response
{
public:
    virtual ~NotifyOfAuthEventResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    
};

/* Scan workspace for changes

*/
class AGENTAPI_API OpenAPIDefaultApi::NotifyScanRequiredRequest : public Request
{
public:
    virtual ~NotifyScanRequiredRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	FString WorkspaceID;
};

class AGENTAPI_API OpenAPIDefaultApi::NotifyScanRequiredResponse : public Response
{
public:
    virtual ~NotifyScanRequiredResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    
};

/* Notify of sync required for a workspace

*/
class AGENTAPI_API OpenAPIDefaultApi::NotifySyncRequiredRequest : public Request
{
public:
    virtual ~NotifySyncRequiredRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	FString RepoID;
	FString WorkspaceID;
};

class AGENTAPI_API OpenAPIDefaultApi::NotifySyncRequiredResponse : public Response
{
public:
    virtual ~NotifySyncRequiredResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    
};

/* Open locally cloned workspace with finder / explorer (or sub path underneath it)

*/
class AGENTAPI_API OpenAPIDefaultApi::OpenLocalWorkspaceRequest : public Request
{
public:
    virtual ~OpenLocalWorkspaceRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	OpenAPIOpenLocalWorkspaceRequest OpenAPIOpenLocalWorkspaceRequest;
};

class AGENTAPI_API OpenAPIDefaultApi::OpenLocalWorkspaceResponse : public Response
{
public:
    virtual ~OpenLocalWorkspaceResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    
};

/* Open a file inside a locally cloned workspace with it&#39;s default application

*/
class AGENTAPI_API OpenAPIDefaultApi::OpenLocalWorkspaceFileRequest : public Request
{
public:
    virtual ~OpenLocalWorkspaceFileRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	OpenAPIOpenWorkspaceFileParams OpenAPIOpenWorkspaceFileParams;
};

class AGENTAPI_API OpenAPIDefaultApi::OpenLocalWorkspaceFileResponse : public Response
{
public:
    virtual ~OpenLocalWorkspaceFileResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    
};

/* Pause workspace sync

*/
class AGENTAPI_API OpenAPIDefaultApi::PauseWorkspaceSyncRequest : public Request
{
public:
    virtual ~PauseWorkspaceSyncRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	FString WorkspaceID;
};

class AGENTAPI_API OpenAPIDefaultApi::PauseWorkspaceSyncResponse : public Response
{
public:
    virtual ~PauseWorkspaceSyncResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    
};

/* Remove a cloned workspace

*/
class AGENTAPI_API OpenAPIDefaultApi::RemoveClonedWorkspaceRequest : public Request
{
public:
    virtual ~RemoveClonedWorkspaceRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	FString RepoID;
	FString WorkspaceID;
};

class AGENTAPI_API OpenAPIDefaultApi::RemoveClonedWorkspaceResponse : public Response
{
public:
    virtual ~RemoveClonedWorkspaceResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    
};

/* Create repo and workspace from local directory

*/
class AGENTAPI_API OpenAPIDefaultApi::RepoInitRequest : public Request
{
public:
    virtual ~RepoInitRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	OpenAPIInitRepo OpenAPIInitRepo;
};

class AGENTAPI_API OpenAPIDefaultApi::RepoInitResponse : public Response
{
public:
    virtual ~RepoInitResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    
};

/* Resume workspace sync

*/
class AGENTAPI_API OpenAPIDefaultApi::ResumeWorkspaceSyncRequest : public Request
{
public:
    virtual ~ResumeWorkspaceSyncRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	FString WorkspaceID;
};

class AGENTAPI_API OpenAPIDefaultApi::ResumeWorkspaceSyncResponse : public Response
{
public:
    virtual ~ResumeWorkspaceSyncResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    
};

/* Update / override coreapi credentials

*/
class AGENTAPI_API OpenAPIDefaultApi::UpdateCoreCredentialsRequest : public Request
{
public:
    virtual ~UpdateCoreCredentialsRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	OpenAPICoreApiCredentials OpenAPICoreApiCredentials;
};

class AGENTAPI_API OpenAPIDefaultApi::UpdateCoreCredentialsResponse : public Response
{
public:
    virtual ~UpdateCoreCredentialsResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    
};

/* Get workspace structure dump

*/
class AGENTAPI_API OpenAPIDefaultApi::WorkspaceStructureDumpRequest : public Request
{
public:
    virtual ~WorkspaceStructureDumpRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	FString RepoID;
	FString WorkspaceID;
	/* A path to the file in which to store response data. */
	FString ResponseFilePath;
};

class AGENTAPI_API OpenAPIDefaultApi::WorkspaceStructureDumpResponse : public Response
{
public:
	WorkspaceStructureDumpResponse(const FString& InResponseFilePath) : Content(InResponseFilePath) {}
    virtual ~WorkspaceStructureDumpResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    HttpFileInput Content;
};

}
