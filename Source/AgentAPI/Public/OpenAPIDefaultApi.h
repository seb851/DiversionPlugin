// Copyright 2024 Diversion Company, Inc. All Rights Reserved.
/**
 * Agent API
 * API of Diversion sync agent
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "CoreMinimal.h"
#include "OpenAPIBaseModel.h"

namespace AgentAPI
{

class AGENTAPI_API OpenAPIDefaultApi : public TSharedFromThis<OpenAPIDefaultApi>
{
public:
	OpenAPIDefaultApi();
	~OpenAPIDefaultApi();

	/* Sets the URL Endpoint.
	* Note: several fallback endpoints can be configured in request retry policies, see Request::SetShouldRetry */
	void SetURL(const FString& Url);

	/* Adds global header params to all requests */
	void AddHeaderParam(const FString& Key, const FString& Value);
	void ClearHeaderParams();

	/* Sets the retry manager to the user-defined retry manager. User must manage the lifetime of the retry manager.
	* If no retry manager is specified and a request needs retries, a default retry manager will be used.
	* See also: Request::SetShouldRetry */
	void SetHttpRetryManager(FHttpRetrySystem::FManager& RetryManager);
	FHttpRetrySystem::FManager& GetHttpRetryManager();

	class AddOrUpdateClonedWorkspaceRequest;
	class AddOrUpdateClonedWorkspaceResponse;
	class CloneRepositoryRequest;
	class CloneRepositoryResponse;
	class CoreAccessTokenRequest;
	class CoreAccessTokenResponse;
	class GenerateSupportBundleRequest;
	class GenerateSupportBundleResponse;
	class GetAllWorkspacesRequest;
	class GetAllWorkspacesResponse;
	class GetFileSyncStatusRequest;
	class GetFileSyncStatusResponse;
	class GetSyncProgressRequest;
	class GetSyncProgressResponse;
	class GetWorkspaceRequest;
	class GetWorkspaceResponse;
	class GetWorkspaceByPathRequest;
	class GetWorkspaceByPathResponse;
	class GetWorkspaceSyncStatusRequest;
	class GetWorkspaceSyncStatusResponse;
	class GetWorkspacesRequest;
	class GetWorkspacesResponse;
	class IsAliveRequest;
	class IsAliveResponse;
	class ListDirRequest;
	class ListDirResponse;
	class NotifyOfAuthEventRequest;
	class NotifyOfAuthEventResponse;
	class NotifyScanRequiredRequest;
	class NotifyScanRequiredResponse;
	class NotifySyncRequiredRequest;
	class NotifySyncRequiredResponse;
	class OpenLocalWorkspaceRequest;
	class OpenLocalWorkspaceResponse;
	class OpenLocalWorkspaceFileRequest;
	class OpenLocalWorkspaceFileResponse;
	class PauseWorkspaceSyncRequest;
	class PauseWorkspaceSyncResponse;
	class RemoveClonedWorkspaceRequest;
	class RemoveClonedWorkspaceResponse;
	class RepoInitRequest;
	class RepoInitResponse;
	class ResumeWorkspaceSyncRequest;
	class ResumeWorkspaceSyncResponse;
	class UpdateCoreCredentialsRequest;
	class UpdateCoreCredentialsResponse;
	class WorkspaceStructureDumpRequest;
	class WorkspaceStructureDumpResponse;
	
    DECLARE_DELEGATE_OneParam(FAddOrUpdateClonedWorkspaceDelegate, const AddOrUpdateClonedWorkspaceResponse&);
    DECLARE_DELEGATE_OneParam(FCloneRepositoryDelegate, const CloneRepositoryResponse&);
    DECLARE_DELEGATE_OneParam(FCoreAccessTokenDelegate, const CoreAccessTokenResponse&);
    DECLARE_DELEGATE_OneParam(FGenerateSupportBundleDelegate, const GenerateSupportBundleResponse&);
    DECLARE_DELEGATE_OneParam(FGetAllWorkspacesDelegate, const GetAllWorkspacesResponse&);
    DECLARE_DELEGATE_OneParam(FGetFileSyncStatusDelegate, const GetFileSyncStatusResponse&);
    DECLARE_DELEGATE_OneParam(FGetSyncProgressDelegate, const GetSyncProgressResponse&);
    DECLARE_DELEGATE_OneParam(FGetWorkspaceDelegate, const GetWorkspaceResponse&);
    DECLARE_DELEGATE_OneParam(FGetWorkspaceByPathDelegate, const GetWorkspaceByPathResponse&);
    DECLARE_DELEGATE_OneParam(FGetWorkspaceSyncStatusDelegate, const GetWorkspaceSyncStatusResponse&);
    DECLARE_DELEGATE_OneParam(FGetWorkspacesDelegate, const GetWorkspacesResponse&);
    DECLARE_DELEGATE_OneParam(FIsAliveDelegate, const IsAliveResponse&);
    DECLARE_DELEGATE_OneParam(FListDirDelegate, const ListDirResponse&);
    DECLARE_DELEGATE_OneParam(FNotifyOfAuthEventDelegate, const NotifyOfAuthEventResponse&);
    DECLARE_DELEGATE_OneParam(FNotifyScanRequiredDelegate, const NotifyScanRequiredResponse&);
    DECLARE_DELEGATE_OneParam(FNotifySyncRequiredDelegate, const NotifySyncRequiredResponse&);
    DECLARE_DELEGATE_OneParam(FOpenLocalWorkspaceDelegate, const OpenLocalWorkspaceResponse&);
    DECLARE_DELEGATE_OneParam(FOpenLocalWorkspaceFileDelegate, const OpenLocalWorkspaceFileResponse&);
    DECLARE_DELEGATE_OneParam(FPauseWorkspaceSyncDelegate, const PauseWorkspaceSyncResponse&);
    DECLARE_DELEGATE_OneParam(FRemoveClonedWorkspaceDelegate, const RemoveClonedWorkspaceResponse&);
    DECLARE_DELEGATE_OneParam(FRepoInitDelegate, const RepoInitResponse&);
    DECLARE_DELEGATE_OneParam(FResumeWorkspaceSyncDelegate, const ResumeWorkspaceSyncResponse&);
    DECLARE_DELEGATE_OneParam(FUpdateCoreCredentialsDelegate, const UpdateCoreCredentialsResponse&);
    DECLARE_DELEGATE_OneParam(FWorkspaceStructureDumpDelegate, const WorkspaceStructureDumpResponse&);
    
    FHttpRequestPtr AddOrUpdateClonedWorkspace(const AddOrUpdateClonedWorkspaceRequest& Request, const FAddOrUpdateClonedWorkspaceDelegate& Delegate = FAddOrUpdateClonedWorkspaceDelegate(), float InTimeoutSecs = -1.f) const;
    FHttpRequestPtr CloneRepository(const CloneRepositoryRequest& Request, const FCloneRepositoryDelegate& Delegate = FCloneRepositoryDelegate(), float InTimeoutSecs = -1.f) const;
    FHttpRequestPtr CoreAccessToken(const CoreAccessTokenRequest& Request, const FCoreAccessTokenDelegate& Delegate = FCoreAccessTokenDelegate(), float InTimeoutSecs = -1.f) const;
    FHttpRequestPtr GenerateSupportBundle(const GenerateSupportBundleRequest& Request, const FGenerateSupportBundleDelegate& Delegate = FGenerateSupportBundleDelegate(), float InTimeoutSecs = -1.f) const;
    FHttpRequestPtr GetAllWorkspaces(const GetAllWorkspacesRequest& Request, const FGetAllWorkspacesDelegate& Delegate = FGetAllWorkspacesDelegate(), float InTimeoutSecs = -1.f) const;
    FHttpRequestPtr GetFileSyncStatus(const GetFileSyncStatusRequest& Request, const FGetFileSyncStatusDelegate& Delegate = FGetFileSyncStatusDelegate(), float InTimeoutSecs = -1.f) const;
    FHttpRequestPtr GetSyncProgress(const GetSyncProgressRequest& Request, const FGetSyncProgressDelegate& Delegate = FGetSyncProgressDelegate(), float InTimeoutSecs = -1.f) const;
    FHttpRequestPtr GetWorkspace(const GetWorkspaceRequest& Request, const FGetWorkspaceDelegate& Delegate = FGetWorkspaceDelegate(), float InTimeoutSecs = -1.f) const;
    FHttpRequestPtr GetWorkspaceByPath(const GetWorkspaceByPathRequest& Request, const FGetWorkspaceByPathDelegate& Delegate = FGetWorkspaceByPathDelegate(), float InTimeoutSecs = -1.f) const;
    FHttpRequestPtr GetWorkspaceSyncStatus(const GetWorkspaceSyncStatusRequest& Request, const FGetWorkspaceSyncStatusDelegate& Delegate = FGetWorkspaceSyncStatusDelegate(), float InTimeoutSecs = -1.f) const;
    FHttpRequestPtr GetWorkspaces(const GetWorkspacesRequest& Request, const FGetWorkspacesDelegate& Delegate = FGetWorkspacesDelegate(), float InTimeoutSecs = -1.f) const;
    FHttpRequestPtr IsAlive(const IsAliveRequest& Request, const FIsAliveDelegate& Delegate = FIsAliveDelegate(), float InTimeoutSecs = -1.f) const;
    FHttpRequestPtr ListDir(const ListDirRequest& Request, const FListDirDelegate& Delegate = FListDirDelegate(), float InTimeoutSecs = -1.f) const;
    FHttpRequestPtr NotifyOfAuthEvent(const NotifyOfAuthEventRequest& Request, const FNotifyOfAuthEventDelegate& Delegate = FNotifyOfAuthEventDelegate(), float InTimeoutSecs = -1.f) const;
    FHttpRequestPtr NotifyScanRequired(const NotifyScanRequiredRequest& Request, const FNotifyScanRequiredDelegate& Delegate = FNotifyScanRequiredDelegate(), float InTimeoutSecs = -1.f) const;
    FHttpRequestPtr NotifySyncRequired(const NotifySyncRequiredRequest& Request, const FNotifySyncRequiredDelegate& Delegate = FNotifySyncRequiredDelegate(), float InTimeoutSecs = -1.f) const;
    FHttpRequestPtr OpenLocalWorkspace(const OpenLocalWorkspaceRequest& Request, const FOpenLocalWorkspaceDelegate& Delegate = FOpenLocalWorkspaceDelegate(), float InTimeoutSecs = -1.f) const;
    FHttpRequestPtr OpenLocalWorkspaceFile(const OpenLocalWorkspaceFileRequest& Request, const FOpenLocalWorkspaceFileDelegate& Delegate = FOpenLocalWorkspaceFileDelegate(), float InTimeoutSecs = -1.f) const;
    FHttpRequestPtr PauseWorkspaceSync(const PauseWorkspaceSyncRequest& Request, const FPauseWorkspaceSyncDelegate& Delegate = FPauseWorkspaceSyncDelegate(), float InTimeoutSecs = -1.f) const;
    FHttpRequestPtr RemoveClonedWorkspace(const RemoveClonedWorkspaceRequest& Request, const FRemoveClonedWorkspaceDelegate& Delegate = FRemoveClonedWorkspaceDelegate(), float InTimeoutSecs = -1.f) const;
    FHttpRequestPtr RepoInit(const RepoInitRequest& Request, const FRepoInitDelegate& Delegate = FRepoInitDelegate(), float InTimeoutSecs = -1.f) const;
    FHttpRequestPtr ResumeWorkspaceSync(const ResumeWorkspaceSyncRequest& Request, const FResumeWorkspaceSyncDelegate& Delegate = FResumeWorkspaceSyncDelegate(), float InTimeoutSecs = -1.f) const;
    FHttpRequestPtr UpdateCoreCredentials(const UpdateCoreCredentialsRequest& Request, const FUpdateCoreCredentialsDelegate& Delegate = FUpdateCoreCredentialsDelegate(), float InTimeoutSecs = -1.f) const;
    FHttpRequestPtr WorkspaceStructureDump(const WorkspaceStructureDumpRequest& Request, const FWorkspaceStructureDumpDelegate& Delegate = FWorkspaceStructureDumpDelegate(), float InTimeoutSecs = -1.f) const;
    
private:
    void OnAddOrUpdateClonedWorkspaceResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FAddOrUpdateClonedWorkspaceDelegate Delegate) const;
    void OnCloneRepositoryResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FCloneRepositoryDelegate Delegate) const;
    void OnCoreAccessTokenResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FCoreAccessTokenDelegate Delegate) const;
    void OnGenerateSupportBundleResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGenerateSupportBundleDelegate Delegate) const;
    void OnGetAllWorkspacesResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetAllWorkspacesDelegate Delegate) const;
    void OnGetFileSyncStatusResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetFileSyncStatusDelegate Delegate) const;
    void OnGetSyncProgressResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetSyncProgressDelegate Delegate) const;
    void OnGetWorkspaceResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetWorkspaceDelegate Delegate) const;
    void OnGetWorkspaceByPathResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetWorkspaceByPathDelegate Delegate) const;
    void OnGetWorkspaceSyncStatusResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetWorkspaceSyncStatusDelegate Delegate) const;
    void OnGetWorkspacesResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetWorkspacesDelegate Delegate) const;
    void OnIsAliveResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FIsAliveDelegate Delegate) const;
    void OnListDirResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FListDirDelegate Delegate) const;
    void OnNotifyOfAuthEventResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FNotifyOfAuthEventDelegate Delegate) const;
    void OnNotifyScanRequiredResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FNotifyScanRequiredDelegate Delegate) const;
    void OnNotifySyncRequiredResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FNotifySyncRequiredDelegate Delegate) const;
    void OnOpenLocalWorkspaceResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FOpenLocalWorkspaceDelegate Delegate) const;
    void OnOpenLocalWorkspaceFileResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FOpenLocalWorkspaceFileDelegate Delegate) const;
    void OnPauseWorkspaceSyncResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FPauseWorkspaceSyncDelegate Delegate) const;
    void OnRemoveClonedWorkspaceResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FRemoveClonedWorkspaceDelegate Delegate) const;
    void OnRepoInitResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FRepoInitDelegate Delegate) const;
    void OnResumeWorkspaceSyncResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FResumeWorkspaceSyncDelegate Delegate) const;
    void OnUpdateCoreCredentialsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUpdateCoreCredentialsDelegate Delegate) const;
    void OnWorkspaceStructureDumpResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FWorkspaceStructureDumpDelegate Delegate, const FString InResponseFilePath) const;
    
	FHttpRequestRef CreateHttpRequest(const Request& Request) const;
	bool IsValid() const;
	void HandleResponse(FHttpResponsePtr HttpResponse, bool bSucceeded, Response& InOutResponse) const;

	FString Url;
	TMap<FString,FString> AdditionalHeaderParams;
	mutable FHttpRetrySystem::FManager* RetryManager = nullptr;
	mutable TUniquePtr<HttpRetryManager> DefaultRetryManager;
};

}
