// Copyright 2024 Diversion Company, Inc. All Rights Reserved.
/**
 * Agent API
 * API of Diversion sync agent
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.10.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#pragma once

#include "CoreMinimal.h"
#include "HTTPResult.h"
#include "DiversionHttpManager.h"
#include "Misc/TVariant.h"


#include "FileSyncStatus.h"
#include "InitRepo.h"
#include "IsAlive_200_response.h"

#include "UserErrors.h"
#include "WorkspaceConfiguration.h"
#include "WorkspaceSyncProgress.h"
#include "WorkspaceSyncStatus.h"
#include <vector>

namespace Diversion {
namespace AgentAPI {

using namespace Diversion::AgentAPI::Model;

class AGENTAPI_API DefaultApi
{
public:
    explicit DefaultApi(TSharedPtr<DiversionHttp::FHttpRequestManager> ApiClient);
    virtual ~DefaultApi();


    /**
    * Get all workspaces
    * 
    * @return 
    */
    THTTPResult<TVariant<TMap<FString, TSharedPtr<WorkspaceConfiguration>>>> GetAllWorkspaces(
        const FString& Token,
        const TMap<FString, FString>& Headers,
		int ConnectionTimeoutSeconds, int RequestTimeoutSeconds) const;

    /**
    * Get file sync status for each path
    * @param repoID @param workspaceID @param paths 
    * @return 
    */
    THTTPResult<TVariant<TArray<TSharedPtr<FileSyncStatus>>, void*>> GetFileSyncStatus(
        FString repoID,
        FString workspaceID,
        TArray<FString> paths,
        const FString& Token,
        const TMap<FString, FString>& Headers,
		int ConnectionTimeoutSeconds, int RequestTimeoutSeconds) const;

    /**
    * Get workspace sync progress
    * @param repoID @param workspaceID 
    * @return 
    */
    THTTPResult<TVariant<TSharedPtr<WorkspaceSyncProgress>, void*>> GetSyncProgress(
        FString repoID,
        FString workspaceID,
        const FString& Token,
        const TMap<FString, FString>& Headers,
		int ConnectionTimeoutSeconds, int RequestTimeoutSeconds) const;

    /**
    * Get workspace configuration for the given path
    * @param absPath 
    * @return 
    */
    THTTPResult<TVariant<TMap<FString, TSharedPtr<WorkspaceConfiguration>>>> GetWorkspaceByPath(
        FString absPath,
        const FString& Token,
        const TMap<FString, FString>& Headers,
		int ConnectionTimeoutSeconds, int RequestTimeoutSeconds) const;

    /**
    * Get workspace sync status
    * @param repoID @param workspaceID 
    * @return 
    */
    THTTPResult<TVariant<TSharedPtr<WorkspaceSyncStatus>>> GetWorkspaceSyncStatus(
        FString repoID,
        FString workspaceID,
        const FString& Token,
        const TMap<FString, FString>& Headers,
		int ConnectionTimeoutSeconds, int RequestTimeoutSeconds) const;

    /**
    * Is alive sanity check
    * @param dumpTrace 
    * @return 
    */
    THTTPResult<TVariant<TSharedPtr<IsAlive_200_response>>> IsAlive(
        TOptional<bool> dumpTrace,
        const FString& Token,
        const TMap<FString, FString>& Headers,
		int ConnectionTimeoutSeconds, int RequestTimeoutSeconds) const;

    /**
    * Notify of sync required for a workspace
    * @param repoID @param workspaceID 
    * 
    */
    THTTPResult<TVariant<void*>> NotifySyncRequired(
        FString repoID,
        FString workspaceID,
        const FString& Token,
        const TMap<FString, FString>& Headers,
		int ConnectionTimeoutSeconds, int RequestTimeoutSeconds) const;

    /**
    * Create repo and workspace from local directory
    * @param initRepo 
    * 
    */
    THTTPResult<TVariant<void*, TSharedPtr<UserErrors>>> RepoInit(
        TSharedPtr<InitRepo> initRepo,
        const FString& Token,
        const TMap<FString, FString>& Headers,
		int ConnectionTimeoutSeconds, int RequestTimeoutSeconds) const;

    typedef FApiResponseDelegate<TVariant<TMap<FString, TSharedPtr<WorkspaceConfiguration>>>> FgetAllWorkspacesDelegate;
    typedef FApiResponseDelegate<TVariant<TArray<TSharedPtr<FileSyncStatus>>, void*>> FgetFileSyncStatusDelegate;
    typedef FApiResponseDelegate<TVariant<TSharedPtr<WorkspaceSyncProgress>, void*>> FgetSyncProgressDelegate;
    typedef FApiResponseDelegate<TVariant<TMap<FString, TSharedPtr<WorkspaceConfiguration>>>> FgetWorkspaceByPathDelegate;
    typedef FApiResponseDelegate<TVariant<TSharedPtr<WorkspaceSyncStatus>>> FgetWorkspaceSyncStatusDelegate;
    typedef FApiResponseDelegate<TVariant<TSharedPtr<IsAlive_200_response>>> FisAliveDelegate;
    typedef FApiResponseDelegate<TVariant<void*>> FnotifySyncRequiredDelegate;
    typedef FApiResponseDelegate<TVariant<void*, TSharedPtr<UserErrors>>> FrepoInitDelegate;

protected:
    TSharedPtr<DiversionHttp::FHttpRequestManager> ApiClient;
};

}
}

