// Copyright 2024 Diversion Company, Inc. All Rights Reserved.
/**
 * Diversion Core API
 * Definition of the Core API used to access low-level functionality of Diversion
 *
 * OpenAPI spec version: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "OpenAPIBaseModel.h"
#include "OpenAPIRepositoryTagManipulationApi.h"

#include "OpenAPICreateTag.h"
#include "OpenAPIError.h"
#include "OpenAPIModifyTag.h"
#include "OpenAPINewResourceId.h"
#include "OpenAPISrcHandlersv2TagListAll200Response.h"
#include "OpenAPITag.h"

namespace CoreAPI
{

/* Delete a tag

*/
class COREAPI_API OpenAPIRepositoryTagManipulationApi::SrcHandlersv2TagDeleteRequest : public Request
{
public:
    virtual ~SrcHandlersv2TagDeleteRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The repo ID of the repository. Repo _name_ can be used instead of the ID, but usage of ID for permanent linking and API requests is preferred. */
	FString RepoId;
	/* Tag identifier */
	FString TagId;
};

class COREAPI_API OpenAPIRepositoryTagManipulationApi::SrcHandlersv2TagDeleteResponse : public Response
{
public:
    virtual ~SrcHandlersv2TagDeleteResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    
};

/* Get tag details

*/
class COREAPI_API OpenAPIRepositoryTagManipulationApi::SrcHandlersv2TagGetRequest : public Request
{
public:
    virtual ~SrcHandlersv2TagGetRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The repo ID of the repository. Repo _name_ can be used instead of the ID, but usage of ID for permanent linking and API requests is preferred. */
	FString RepoId;
	/* Tag identifier */
	FString TagId;
};

class COREAPI_API OpenAPIRepositoryTagManipulationApi::SrcHandlersv2TagGetResponse : public Response
{
public:
    virtual ~SrcHandlersv2TagGetResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPITag Content;
};

/* Get a list of all tags in the repo.

*/
class COREAPI_API OpenAPIRepositoryTagManipulationApi::SrcHandlersv2TagListAllRequest : public Request
{
public:
    virtual ~SrcHandlersv2TagListAllRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The repo ID of the repository. Repo _name_ can be used instead of the ID, but usage of ID for permanent linking and API requests is preferred. */
	FString RepoId;
};

class COREAPI_API OpenAPIRepositoryTagManipulationApi::SrcHandlersv2TagListAllResponse : public Response
{
public:
    virtual ~SrcHandlersv2TagListAllResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPISrcHandlersv2TagListAll200Response Content;
};

/* Update a tag

*/
class COREAPI_API OpenAPIRepositoryTagManipulationApi::SrcHandlersv2TagPatchRequest : public Request
{
public:
    virtual ~SrcHandlersv2TagPatchRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The repo ID of the repository. Repo _name_ can be used instead of the ID, but usage of ID for permanent linking and API requests is preferred. */
	FString RepoId;
	/* Tag identifier */
	FString TagId;
	OpenAPIModifyTag OpenAPIModifyTag;
};

class COREAPI_API OpenAPIRepositoryTagManipulationApi::SrcHandlersv2TagPatchResponse : public Response
{
public:
    virtual ~SrcHandlersv2TagPatchResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    
};

/* Create a tag

*/
class COREAPI_API OpenAPIRepositoryTagManipulationApi::SrcHandlersv2TagPostRequest : public Request
{
public:
    virtual ~SrcHandlersv2TagPostRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The repo ID of the repository. Repo _name_ can be used instead of the ID, but usage of ID for permanent linking and API requests is preferred. */
	FString RepoId;
	OpenAPICreateTag OpenAPICreateTag;
};

class COREAPI_API OpenAPIRepositoryTagManipulationApi::SrcHandlersv2TagPostResponse : public Response
{
public:
    virtual ~SrcHandlersv2TagPostResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPINewResourceId Content;
};

}
