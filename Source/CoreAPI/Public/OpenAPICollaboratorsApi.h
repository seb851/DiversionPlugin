// Copyright 2024 Diversion Company, Inc. All Rights Reserved.
/**
 * Diversion Core API
 * Definition of the Core API used to access low-level functionality of Diversion
 *
 * OpenAPI spec version: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "CoreMinimal.h"
#include "OpenAPIBaseModel.h"

namespace CoreAPI
{

class COREAPI_API OpenAPICollaboratorsApi : public TSharedFromThis<OpenAPICollaboratorsApi>
{
public:
	OpenAPICollaboratorsApi();
	~OpenAPICollaboratorsApi();

	/* Sets the URL Endpoint.
	* Note: several fallback endpoints can be configured in request retry policies, see Request::SetShouldRetry */
	void SetURL(const FString& Url);

	/* Adds global header params to all requests */
	void AddHeaderParam(const FString& Key, const FString& Value);
	void ClearHeaderParams();

	/* Sets the retry manager to the user-defined retry manager. User must manage the lifetime of the retry manager.
	* If no retry manager is specified and a request needs retries, a default retry manager will be used.
	* See also: Request::SetShouldRetry */
	void SetHttpRetryManager(FHttpRetrySystem::FManager& RetryManager);
	FHttpRetrySystem::FManager& GetHttpRetryManager();

	class SrcHandlersCollaborationListCollaboratorsRequest;
	class SrcHandlersCollaborationListCollaboratorsResponse;
	class SrcHandlersCollaborationRevokeAccessRequest;
	class SrcHandlersCollaborationRevokeAccessResponse;
	class SrcHandlersCollaborationUpdateModeRequest;
	class SrcHandlersCollaborationUpdateModeResponse;
	class SrcHandlersv2InvitesCreateNewRequest;
	class SrcHandlersv2InvitesCreateNewResponse;
	class SrcHandlersv2InvitesResendRequest;
	class SrcHandlersv2InvitesResendResponse;
	class SrcHandlersv2InvitesRevokeRequest;
	class SrcHandlersv2InvitesRevokeResponse;
	
    DECLARE_DELEGATE_OneParam(FSrcHandlersCollaborationListCollaboratorsDelegate, const SrcHandlersCollaborationListCollaboratorsResponse&);
    DECLARE_DELEGATE_OneParam(FSrcHandlersCollaborationRevokeAccessDelegate, const SrcHandlersCollaborationRevokeAccessResponse&);
    DECLARE_DELEGATE_OneParam(FSrcHandlersCollaborationUpdateModeDelegate, const SrcHandlersCollaborationUpdateModeResponse&);
    DECLARE_DELEGATE_OneParam(FSrcHandlersv2InvitesCreateNewDelegate, const SrcHandlersv2InvitesCreateNewResponse&);
    DECLARE_DELEGATE_OneParam(FSrcHandlersv2InvitesResendDelegate, const SrcHandlersv2InvitesResendResponse&);
    DECLARE_DELEGATE_OneParam(FSrcHandlersv2InvitesRevokeDelegate, const SrcHandlersv2InvitesRevokeResponse&);
    
    FHttpRequestPtr SrcHandlersCollaborationListCollaborators(const SrcHandlersCollaborationListCollaboratorsRequest& Request, const FSrcHandlersCollaborationListCollaboratorsDelegate& Delegate = FSrcHandlersCollaborationListCollaboratorsDelegate(), float InTimeoutSecs = -1.f) const;
    FHttpRequestPtr SrcHandlersCollaborationRevokeAccess(const SrcHandlersCollaborationRevokeAccessRequest& Request, const FSrcHandlersCollaborationRevokeAccessDelegate& Delegate = FSrcHandlersCollaborationRevokeAccessDelegate(), float InTimeoutSecs = -1.f) const;
    FHttpRequestPtr SrcHandlersCollaborationUpdateMode(const SrcHandlersCollaborationUpdateModeRequest& Request, const FSrcHandlersCollaborationUpdateModeDelegate& Delegate = FSrcHandlersCollaborationUpdateModeDelegate(), float InTimeoutSecs = -1.f) const;
    FHttpRequestPtr SrcHandlersv2InvitesCreateNew(const SrcHandlersv2InvitesCreateNewRequest& Request, const FSrcHandlersv2InvitesCreateNewDelegate& Delegate = FSrcHandlersv2InvitesCreateNewDelegate(), float InTimeoutSecs = -1.f) const;
    FHttpRequestPtr SrcHandlersv2InvitesResend(const SrcHandlersv2InvitesResendRequest& Request, const FSrcHandlersv2InvitesResendDelegate& Delegate = FSrcHandlersv2InvitesResendDelegate(), float InTimeoutSecs = -1.f) const;
    FHttpRequestPtr SrcHandlersv2InvitesRevoke(const SrcHandlersv2InvitesRevokeRequest& Request, const FSrcHandlersv2InvitesRevokeDelegate& Delegate = FSrcHandlersv2InvitesRevokeDelegate(), float InTimeoutSecs = -1.f) const;
    
private:
    void OnSrcHandlersCollaborationListCollaboratorsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSrcHandlersCollaborationListCollaboratorsDelegate Delegate) const;
    void OnSrcHandlersCollaborationRevokeAccessResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSrcHandlersCollaborationRevokeAccessDelegate Delegate) const;
    void OnSrcHandlersCollaborationUpdateModeResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSrcHandlersCollaborationUpdateModeDelegate Delegate) const;
    void OnSrcHandlersv2InvitesCreateNewResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSrcHandlersv2InvitesCreateNewDelegate Delegate) const;
    void OnSrcHandlersv2InvitesResendResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSrcHandlersv2InvitesResendDelegate Delegate) const;
    void OnSrcHandlersv2InvitesRevokeResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSrcHandlersv2InvitesRevokeDelegate Delegate) const;
    
	FHttpRequestRef CreateHttpRequest(const Request& Request) const;
	bool IsValid() const;
	void HandleResponse(FHttpResponsePtr HttpResponse, bool bSucceeded, Response& InOutResponse) const;

	FString Url;
	TMap<FString,FString> AdditionalHeaderParams;
	mutable FHttpRetrySystem::FManager* RetryManager = nullptr;
	mutable TUniquePtr<HttpRetryManager> DefaultRetryManager;
};

}
