// Copyright 2024 Diversion Company, Inc. All Rights Reserved.
/**
 * Diversion Core API
 * Definition of the Core API used to access low-level functionality of Diversion
 *
 * OpenAPI spec version: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "OpenAPIBaseModel.h"
#include "OpenAPIAuthenticationApi.h"

#include "OpenAPIError.h"
#include "OpenAPISrcHandlersAuthFetchCode200Response.h"

namespace CoreAPI
{

/* 
 *
 * Callback URL for sign-ins
*/
class COREAPI_API OpenAPIAuthenticationApi::SrcHandlersAuthCompleteRequest : public Request
{
public:
    virtual ~SrcHandlersAuthCompleteRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	FString State;
	TOptional<FString> Code;
	TOptional<FString> ErrorDescription;
};

class COREAPI_API OpenAPIAuthenticationApi::SrcHandlersAuthCompleteResponse : public Response
{
public:
    virtual ~SrcHandlersAuthCompleteResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    FString Content;
};

/* 
 *
 * Retrieve the code grant in exchange for the correct code challenge and verifier
*/
class COREAPI_API OpenAPIAuthenticationApi::SrcHandlersAuthFetchCodeRequest : public Request
{
public:
    virtual ~SrcHandlersAuthFetchCodeRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	FString CodeChallenge;
	FString CodeVerifier;
};

class COREAPI_API OpenAPIAuthenticationApi::SrcHandlersAuthFetchCodeResponse : public Response
{
public:
    virtual ~SrcHandlersAuthFetchCodeResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPISrcHandlersAuthFetchCode200Response Content;
};

/* 
 *
 * Polling endpoint for the CLI to wait for the user to complete the sign-in flow
*/
class COREAPI_API OpenAPIAuthenticationApi::SrcHandlersAuthPollRequest : public Request
{
public:
    virtual ~SrcHandlersAuthPollRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	FString CodeChallenge;
};

class COREAPI_API OpenAPIAuthenticationApi::SrcHandlersAuthPollResponse : public Response
{
public:
    virtual ~SrcHandlersAuthPollResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    
};

/* Test token validity, repo write access
 *
 * Validate the given auth token, test write access to specified repo
*/
class COREAPI_API OpenAPIAuthenticationApi::SrcHandlersAuthTestTokenRequest : public Request
{
public:
    virtual ~SrcHandlersAuthTestTokenRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	TOptional<FString> RepoId;
};

class COREAPI_API OpenAPIAuthenticationApi::SrcHandlersAuthTestTokenResponse : public Response
{
public:
    virtual ~SrcHandlersAuthTestTokenResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    
};

}
