// Copyright 2024 Diversion Company, Inc. All Rights Reserved.
/**
 * Diversion Core API
 * Definition of the Core API used to access low-level functionality of Diversion
 *
 * The version of the OpenAPI document: 0.2.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.10.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#pragma once

#include "CoreMinimal.h"
#include "HTTPResult.h"
#include "DiversionHttpManager.h"
#include "Misc/TVariant.h"


#include "CommitMessage.h"
#include "DetailedMerge.h"
#include "Error.h"

#include "HttpContent.h"
#include "MergeId.h"
#include "NewResourceId.h"
#include "Src_handlersv2_merge_list_open_merges_200_response.h"

namespace Diversion {
namespace CoreAPI {

using namespace Diversion::CoreAPI::Model;

class COREAPI_API RepositoryMergeManipulationApi
{
public:
    explicit RepositoryMergeManipulationApi(TSharedPtr<DiversionHttp::FHttpRequestManager> ApiClient);
    virtual ~RepositoryMergeManipulationApi();


    /**
    * After all conflicts are resolved, finalizes the merge with a commit
    * @param repoId The repo ID of the repository. Repo _name_ can be used instead of the ID, but usage of ID for permanent linking and API requests is preferred.@param mergeId An ID of a merge attempt@param commitMessage 
    * 
    */
    THTTPResult<TVariant<void*, TSharedPtr<NewResourceId>, TSharedPtr<Error>>> SrcHandlersv2MergeFinalize(
        FString repoId,
        FString mergeId,
        TOptional<TSharedPtr<CommitMessage>> commitMessage,
        const FString& Token,
        const TMap<FString, FString>& Headers,
		int ConnectionTimeoutSeconds, int RequestTimeoutSeconds) const;

    /**
    * Details of a specific merge in progress
    * @param repoId The repo ID of the repository. Repo _name_ can be used instead of the ID, but usage of ID for permanent linking and API requests is preferred.@param mergeId An ID of a merge attempt
    * @return 
    */
    THTTPResult<TVariant<TSharedPtr<DetailedMerge>, TSharedPtr<Error>>> SrcHandlersv2MergeGetOpenMerge(
        FString repoId,
        FString mergeId,
        const FString& Token,
        const TMap<FString, FString>& Headers,
		int ConnectionTimeoutSeconds, int RequestTimeoutSeconds) const;

    /**
    * Retrieve conflicted merges in this repo
    * @param repoId The repo ID of the repository. Repo _name_ can be used instead of the ID, but usage of ID for permanent linking and API requests is preferred.@param baseId A reference to a base unto which changes will be applied@param otherId A reference to a source version from which changes will be taken
    * @return 
    */
    THTTPResult<TVariant<TSharedPtr<Src_handlersv2_merge_list_open_merges_200_response>>> SrcHandlersv2MergeListOpenMerges(
        FString repoId,
        TOptional<FString> baseId,
        TOptional<FString> otherId,
        const FString& Token,
        const TMap<FString, FString>& Headers,
		int ConnectionTimeoutSeconds, int RequestTimeoutSeconds) const;

    /**
    * Merge ref into a branch
    * @param repoId The repo ID of the repository. Repo _name_ can be used instead of the ID, but usage of ID for permanent linking and API requests is preferred.@param baseId A reference to a base unto which changes will be applied@param otherId A reference to a source version from which changes will be taken
    * 
    */
    THTTPResult<TVariant<void*, TSharedPtr<NewResourceId>, TSharedPtr<MergeId>, TSharedPtr<Error>>> SrcHandlersv2MergePost(
        FString repoId,
        TOptional<FString> baseId,
        TOptional<FString> otherId,
        const FString& Token,
        const TMap<FString, FString>& Headers,
		int ConnectionTimeoutSeconds, int RequestTimeoutSeconds) const;

    /**
    * Update a conflicting file, potentially resolving the conflict.
    * @param repoId The repo ID of the repository. Repo _name_ can be used instead of the ID, but usage of ID for permanent linking and API requests is preferred.@param mergeId An ID of a merge attempt@param conflictId An identifier of a conflict retrieved in conflicts property of GET /repos/{repo_id}/merges/{merge_id}@param mode The file mode (as Unix mode)@param body @param size Blob size in bytes@param sha1 A sha1 hexdigest@param storageBackend An optional storage type for async upload.@param storageUri An optional storage uri to be sent along storage_backend.@param path Updates the path of the file with the value passed here. Can be used to resolve path conflicts.
    * 
    */
    THTTPResult<TVariant<void*, TSharedPtr<Error>>> SrcHandlersv2MergeSetResult(
        FString repoId,
        FString mergeId,
        FString conflictId,
        int32_t mode,
        TSharedPtr<HttpContent> body,
        TOptional<int64_t> size,
        TOptional<FString> sha1,
        TOptional<int32_t> storageBackend,
        TOptional<FString> storageUri,
        TOptional<FString> path,
        const FString& Token,
        const TMap<FString, FString>& Headers,
		int ConnectionTimeoutSeconds, int RequestTimeoutSeconds) const;

    typedef FApiResponseDelegate<TVariant<void*, TSharedPtr<NewResourceId>, TSharedPtr<Error>>> Fsrc_handlersv2_merge_finalizeDelegate;
    typedef FApiResponseDelegate<TVariant<TSharedPtr<DetailedMerge>, TSharedPtr<Error>>> Fsrc_handlersv2_merge_getOpenMergeDelegate;
    typedef FApiResponseDelegate<TVariant<TSharedPtr<Src_handlersv2_merge_list_open_merges_200_response>>> Fsrc_handlersv2_merge_listOpenMergesDelegate;
    typedef FApiResponseDelegate<TVariant<void*, TSharedPtr<NewResourceId>, TSharedPtr<MergeId>, TSharedPtr<Error>>> Fsrc_handlersv2_merge_postDelegate;
    typedef FApiResponseDelegate<TVariant<void*, TSharedPtr<Error>>> Fsrc_handlersv2_merge_setResultDelegate;

protected:
    TSharedPtr<DiversionHttp::FHttpRequestManager> ApiClient;
};

}
}

