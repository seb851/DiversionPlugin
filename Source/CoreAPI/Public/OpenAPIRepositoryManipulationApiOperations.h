// Copyright 2024 Diversion Company, Inc. All Rights Reserved.
/**
 * Diversion Core API
 * Definition of the Core API used to access low-level functionality of Diversion
 *
 * OpenAPI spec version: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "OpenAPIBaseModel.h"
#include "OpenAPIRepositoryManipulationApi.h"

#include "OpenAPIHelpers.h"
#include "OpenAPIError.h"
#include "OpenAPIFileEntry.h"
#include "OpenAPIGitRepoImport.h"
#include "OpenAPIRepo.h"
#include "OpenAPISrcHandlersv2CommitGetObjectHistory200Response.h"
#include "OpenAPISrcHandlersv2TreeFiletree200Response.h"

namespace CoreAPI
{

/* Import a Git repo into this Diversion repo
 *
 * Import a Git repo with all history from a Git URL. {repo_id} must have no commits and no branches, or be already marked as synced with the same git_url. The git repo URL must have http credentials embedded or otherwise hosted on Github and the owner has the Diversion Github app integration set up.
*/
class COREAPI_API OpenAPIRepositoryManipulationApi::SrcHandlersIntegrationsGitImportImportInBackgroundRequest : public Request
{
public:
    virtual ~SrcHandlersIntegrationsGitImportImportInBackgroundRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The repo ID of the repository. Repo _name_ can be used instead of the ID, but usage of ID for permanent linking and API requests is preferred. */
	FString RepoId;
	TOptional<OpenAPIGitRepoImport> OpenAPIGitRepoImport;
};

class COREAPI_API OpenAPIRepositoryManipulationApi::SrcHandlersIntegrationsGitImportImportInBackgroundResponse : public Response
{
public:
    virtual ~SrcHandlersIntegrationsGitImportImportInBackgroundResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    
};

/* Check if a git repo could be imported to Diversion
 *
 * The git repo URL must have http credentials embedded or otherwise hosted on Github and the owner has the Diversion Github app integration set up.
*/
class COREAPI_API OpenAPIRepositoryManipulationApi::SrcHandlersIntegrationsGitImportImportVerifyUrlRequest : public Request
{
public:
    virtual ~SrcHandlersIntegrationsGitImportImportVerifyUrlRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	TOptional<OpenAPIGitRepoImport> OpenAPIGitRepoImport;
};

class COREAPI_API OpenAPIRepositoryManipulationApi::SrcHandlersIntegrationsGitImportImportVerifyUrlResponse : public Response
{
public:
    virtual ~SrcHandlersIntegrationsGitImportImportVerifyUrlResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    
};

/* Sync a Git repo to this Diversion repo
 *
 * Sync all history from Git. The repo must already be associated with a Git repo (see import).
*/
class COREAPI_API OpenAPIRepositoryManipulationApi::SrcHandlersIntegrationsGithubHandleRepoGithubWebhookRequest : public Request
{
public:
    virtual ~SrcHandlersIntegrationsGithubHandleRepoGithubWebhookRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The repo ID of the repository. Repo _name_ can be used instead of the ID, but usage of ID for permanent linking and API requests is preferred. */
	FString RepoId;
};

class COREAPI_API OpenAPIRepositoryManipulationApi::SrcHandlersIntegrationsGithubHandleRepoGithubWebhookResponse : public Response
{
public:
    virtual ~SrcHandlersIntegrationsGithubHandleRepoGithubWebhookResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    
};

/* Get object history in a ref by its latest path

*/
class COREAPI_API OpenAPIRepositoryManipulationApi::SrcHandlersv2CommitGetObjectHistoryRequest : public Request
{
public:
    virtual ~SrcHandlersv2CommitGetObjectHistoryRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The repo ID of the repository. Repo _name_ can be used instead of the ID, but usage of ID for permanent linking and API requests is preferred. */
	FString RepoId;
	/* An ID of a workspace, branch or commit. */
	FString RefId;
	/* A path to an item inside the repository. */
	FString Path;
	/* Limit the number or items returned from a listing api */
	TOptional<int32> Limit;
	/* Skip a number of items returned from a listing api */
	TOptional<int32> Skip;
};

class COREAPI_API OpenAPIRepositoryManipulationApi::SrcHandlersv2CommitGetObjectHistoryResponse : public Response
{
public:
    virtual ~SrcHandlersv2CommitGetObjectHistoryResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPISrcHandlersv2CommitGetObjectHistory200Response Content;
};

/* Get blob contents using storage information, as retrieved from other APIs.

*/
class COREAPI_API OpenAPIRepositoryManipulationApi::SrcHandlersv2FilesDownloadBlobRequest : public Request
{
public:
    virtual ~SrcHandlersv2FilesDownloadBlobRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The repo ID of the repository. Repo _name_ can be used instead of the ID, but usage of ID for permanent linking and API requests is preferred. */
	FString RepoId;
	/* Storage type of the blob. */
	int32 StorageBackend = 0;
	/* Storage uri of the blob. */
	FString StorageUri;
	/* A path to the file in which to store response data. */
	FString ResponseFilePath;
};

class COREAPI_API OpenAPIRepositoryManipulationApi::SrcHandlersv2FilesDownloadBlobResponse : public Response
{
public:
	SrcHandlersv2FilesDownloadBlobResponse(const FString& InResponseFilePath) : Content(InResponseFilePath) {}
    virtual ~SrcHandlersv2FilesDownloadBlobResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    HttpFileInput Content;
};

/* Get blob contents snapshot. Either one of workspace, branch or commit ID needs to be specified.

*/
class COREAPI_API OpenAPIRepositoryManipulationApi::SrcHandlersv2FilesGetBlobRequest : public Request
{
public:
    virtual ~SrcHandlersv2FilesGetBlobRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The repo ID of the repository. Repo _name_ can be used instead of the ID, but usage of ID for permanent linking and API requests is preferred. */
	FString RepoId;
	/* An ID of a workspace, branch or commit. */
	FString RefId;
	/* A path to an item inside the repository. */
	FString Path;
	/* A path to the file in which to store response data. */
	FString ResponseFilePath;
};

class COREAPI_API OpenAPIRepositoryManipulationApi::SrcHandlersv2FilesGetBlobResponse : public Response
{
public:
	SrcHandlersv2FilesGetBlobResponse(const FString& InResponseFilePath) : Content(InResponseFilePath) {}
    virtual ~SrcHandlersv2FilesGetBlobResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    HttpFileInput Content;
};

/* Get file entry (either tree or blob). Either one of workspace, branch or commit ID needs to be specified.

*/
class COREAPI_API OpenAPIRepositoryManipulationApi::SrcHandlersv2FilesGetFileEntryRequest : public Request
{
public:
    virtual ~SrcHandlersv2FilesGetFileEntryRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The repo ID of the repository. Repo _name_ can be used instead of the ID, but usage of ID for permanent linking and API requests is preferred. */
	FString RepoId;
	/* An ID of a workspace, branch or commit. */
	FString RefId;
	/* A path to an item inside the repository. */
	FString Path;
};

class COREAPI_API OpenAPIRepositoryManipulationApi::SrcHandlersv2FilesGetFileEntryResponse : public Response
{
public:
    virtual ~SrcHandlersv2FilesGetFileEntryResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIFileEntry Content;
};

/* Delete a repo.
 *
 * Delete a repo. All files, workspaces, commits, branches permissions etc. associated with the repo will be deleted.
*/
class COREAPI_API OpenAPIRepositoryManipulationApi::SrcHandlersv2RepoDeleteRequest : public Request
{
public:
    virtual ~SrcHandlersv2RepoDeleteRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The repo ID of the repository. Repo _name_ can be used instead of the ID, but usage of ID for permanent linking and API requests is preferred. */
	FString RepoId;
};

class COREAPI_API OpenAPIRepositoryManipulationApi::SrcHandlersv2RepoDeleteResponse : public Response
{
public:
    virtual ~SrcHandlersv2RepoDeleteResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    
};

/* Get details of an existing repo.
 *
 * Get details of an existing repo.
*/
class COREAPI_API OpenAPIRepositoryManipulationApi::SrcHandlersv2RepoGetRequest : public Request
{
public:
    virtual ~SrcHandlersv2RepoGetRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The repo ID of the repository. Repo _name_ can be used instead of the ID, but usage of ID for permanent linking and API requests is preferred. */
	FString RepoId;
};

class COREAPI_API OpenAPIRepositoryManipulationApi::SrcHandlersv2RepoGetResponse : public Response
{
public:
    virtual ~SrcHandlersv2RepoGetResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIRepo Content;
};

/* Get file tree snapshot. Either one of workspace, branch or commit ID needs to be specified as ref ID. (Executed on secondary shard)

*/
class COREAPI_API OpenAPIRepositoryManipulationApi::SrcHandlersv2TreeFiletreeRequest : public Request
{
public:
    virtual ~SrcHandlersv2TreeFiletreeRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The repo ID of the repository. Repo _name_ can be used instead of the ID, but usage of ID for permanent linking and API requests is preferred. */
	FString RepoId;
	/* An ID of a workspace, branch or commit. */
	FString RefId;
	/* Optional path to an item inside the repository. */
	TOptional<FString> Path;
	/* Specifies if to recursively iterate file tree to next directory levels */
	TOptional<bool> Recurse;
	/* Skip a number of items returned from a listing api */
	TOptional<int32> Skip;
	/* Limit the number of entries returned from walk */
	TOptional<int32> Limit;
	/* Offset item name in directory when iterating its entries (non-inclusive) */
	TOptional<FString> Offset;
	/* Should the tree contain also deleted items or omit them from response */
	TOptional<bool> IncludeDeleted;
	/* The ordinal ID of the journal entry the walk references, if applicable */
	TOptional<int32> WorkspaceJournalOrdinalId;
	/* A query string to test against item name, only matching items will be collected */
	TOptional<FString> ItemNameQuery;
	/* Return only directories in the file tree walk */
	TOptional<bool> DirsOnly;
	/* Return the results filtered by the workspace preferences for selective sync */
	TOptional<bool> UseSelectiveSync;
	TOptional<int32> MaxDepth;
	/* Specifies if to ignore the journal ordinal id difference and potentially return intermediate state */
	TOptional<bool> IgnoreJournalOrdinalDiff;
};

class COREAPI_API OpenAPIRepositoryManipulationApi::SrcHandlersv2TreeFiletreeResponse : public Response
{
public:
    virtual ~SrcHandlersv2TreeFiletreeResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPISrcHandlersv2TreeFiletree200Response Content;
};

}
