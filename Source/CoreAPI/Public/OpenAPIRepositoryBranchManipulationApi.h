// Copyright 2024 Diversion Company, Inc. All Rights Reserved.
/**
 * Diversion Core API
 * Definition of the Core API used to access low-level functionality of Diversion
 *
 * OpenAPI spec version: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "CoreMinimal.h"
#include "OpenAPIBaseModel.h"

namespace CoreAPI
{

class COREAPI_API OpenAPIRepositoryBranchManipulationApi : public TSharedFromThis<OpenAPIRepositoryBranchManipulationApi>
{
public:
	OpenAPIRepositoryBranchManipulationApi();
	~OpenAPIRepositoryBranchManipulationApi();

	/* Sets the URL Endpoint.
	* Note: several fallback endpoints can be configured in request retry policies, see Request::SetShouldRetry */
	void SetURL(const FString& Url);

	/* Adds global header params to all requests */
	void AddHeaderParam(const FString& Key, const FString& Value);
	void ClearHeaderParams();

	/* Sets the retry manager to the user-defined retry manager. User must manage the lifetime of the retry manager.
	* If no retry manager is specified and a request needs retries, a default retry manager will be used.
	* See also: Request::SetShouldRetry */
	void SetHttpRetryManager(FHttpRetrySystem::FManager& RetryManager);
	FHttpRetrySystem::FManager& GetHttpRetryManager();

	class SrcHandlersv2BranchDeleteRequest;
	class SrcHandlersv2BranchDeleteResponse;
	class SrcHandlersv2BranchGetRequest;
	class SrcHandlersv2BranchGetResponse;
	class SrcHandlersv2BranchListAllRequest;
	class SrcHandlersv2BranchListAllResponse;
	class SrcHandlersv2BranchPatchRequest;
	class SrcHandlersv2BranchPatchResponse;
	class SrcHandlersv2BranchPostRequest;
	class SrcHandlersv2BranchPostResponse;
	
    DECLARE_DELEGATE_OneParam(FSrcHandlersv2BranchDeleteDelegate, const SrcHandlersv2BranchDeleteResponse&);
    DECLARE_DELEGATE_OneParam(FSrcHandlersv2BranchGetDelegate, const SrcHandlersv2BranchGetResponse&);
    DECLARE_DELEGATE_OneParam(FSrcHandlersv2BranchListAllDelegate, const SrcHandlersv2BranchListAllResponse&);
    DECLARE_DELEGATE_OneParam(FSrcHandlersv2BranchPatchDelegate, const SrcHandlersv2BranchPatchResponse&);
    DECLARE_DELEGATE_OneParam(FSrcHandlersv2BranchPostDelegate, const SrcHandlersv2BranchPostResponse&);
    
    FHttpRequestPtr SrcHandlersv2BranchDelete(const SrcHandlersv2BranchDeleteRequest& Request, const FSrcHandlersv2BranchDeleteDelegate& Delegate = FSrcHandlersv2BranchDeleteDelegate(), float InTimeoutSecs = -1.f) const;
    FHttpRequestPtr SrcHandlersv2BranchGet(const SrcHandlersv2BranchGetRequest& Request, const FSrcHandlersv2BranchGetDelegate& Delegate = FSrcHandlersv2BranchGetDelegate(), float InTimeoutSecs = -1.f) const;
    FHttpRequestPtr SrcHandlersv2BranchListAll(const SrcHandlersv2BranchListAllRequest& Request, const FSrcHandlersv2BranchListAllDelegate& Delegate = FSrcHandlersv2BranchListAllDelegate(), float InTimeoutSecs = -1.f) const;
    FHttpRequestPtr SrcHandlersv2BranchPatch(const SrcHandlersv2BranchPatchRequest& Request, const FSrcHandlersv2BranchPatchDelegate& Delegate = FSrcHandlersv2BranchPatchDelegate(), float InTimeoutSecs = -1.f) const;
    FHttpRequestPtr SrcHandlersv2BranchPost(const SrcHandlersv2BranchPostRequest& Request, const FSrcHandlersv2BranchPostDelegate& Delegate = FSrcHandlersv2BranchPostDelegate(), float InTimeoutSecs = -1.f) const;
    
private:
    void OnSrcHandlersv2BranchDeleteResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSrcHandlersv2BranchDeleteDelegate Delegate) const;
    void OnSrcHandlersv2BranchGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSrcHandlersv2BranchGetDelegate Delegate) const;
    void OnSrcHandlersv2BranchListAllResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSrcHandlersv2BranchListAllDelegate Delegate) const;
    void OnSrcHandlersv2BranchPatchResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSrcHandlersv2BranchPatchDelegate Delegate) const;
    void OnSrcHandlersv2BranchPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSrcHandlersv2BranchPostDelegate Delegate) const;
    
	FHttpRequestRef CreateHttpRequest(const Request& Request) const;
	bool IsValid() const;
	void HandleResponse(FHttpResponsePtr HttpResponse, bool bSucceeded, Response& InOutResponse) const;

	FString Url;
	TMap<FString,FString> AdditionalHeaderParams;
	mutable FHttpRetrySystem::FManager* RetryManager = nullptr;
	mutable TUniquePtr<HttpRetryManager> DefaultRetryManager;
};

}
