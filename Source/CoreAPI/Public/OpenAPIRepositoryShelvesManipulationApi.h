// Copyright 2024 Diversion Company, Inc. All Rights Reserved.
/**
 * Diversion Core API
 * Definition of the Core API used to access low-level functionality of Diversion
 *
 * OpenAPI spec version: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "CoreMinimal.h"
#include "OpenAPIBaseModel.h"

namespace CoreAPI
{

class COREAPI_API OpenAPIRepositoryShelvesManipulationApi : public TSharedFromThis<OpenAPIRepositoryShelvesManipulationApi>
{
public:
	OpenAPIRepositoryShelvesManipulationApi();
	~OpenAPIRepositoryShelvesManipulationApi();

	/* Sets the URL Endpoint.
	* Note: several fallback endpoints can be configured in request retry policies, see Request::SetShouldRetry */
	void SetURL(const FString& Url);

	/* Adds global header params to all requests */
	void AddHeaderParam(const FString& Key, const FString& Value);
	void ClearHeaderParams();

	/* Sets the retry manager to the user-defined retry manager. User must manage the lifetime of the retry manager.
	* If no retry manager is specified and a request needs retries, a default retry manager will be used.
	* See also: Request::SetShouldRetry */
	void SetHttpRetryManager(FHttpRetrySystem::FManager& RetryManager);
	FHttpRetrySystem::FManager& GetHttpRetryManager();

	class SrcHandlersv2ShelfApplyRequest;
	class SrcHandlersv2ShelfApplyResponse;
	class SrcHandlersv2ShelfDeleteRequest;
	class SrcHandlersv2ShelfDeleteResponse;
	class SrcHandlersv2ShelfGetRequest;
	class SrcHandlersv2ShelfGetResponse;
	class SrcHandlersv2ShelfListAllRequest;
	class SrcHandlersv2ShelfListAllResponse;
	class SrcHandlersv2ShelfPostRequest;
	class SrcHandlersv2ShelfPostResponse;
	
    DECLARE_DELEGATE_OneParam(FSrcHandlersv2ShelfApplyDelegate, const SrcHandlersv2ShelfApplyResponse&);
    DECLARE_DELEGATE_OneParam(FSrcHandlersv2ShelfDeleteDelegate, const SrcHandlersv2ShelfDeleteResponse&);
    DECLARE_DELEGATE_OneParam(FSrcHandlersv2ShelfGetDelegate, const SrcHandlersv2ShelfGetResponse&);
    DECLARE_DELEGATE_OneParam(FSrcHandlersv2ShelfListAllDelegate, const SrcHandlersv2ShelfListAllResponse&);
    DECLARE_DELEGATE_OneParam(FSrcHandlersv2ShelfPostDelegate, const SrcHandlersv2ShelfPostResponse&);
    
    FHttpRequestPtr SrcHandlersv2ShelfApply(const SrcHandlersv2ShelfApplyRequest& Request, const FSrcHandlersv2ShelfApplyDelegate& Delegate = FSrcHandlersv2ShelfApplyDelegate(), float InTimeoutSecs = -1.f) const;
    FHttpRequestPtr SrcHandlersv2ShelfDelete(const SrcHandlersv2ShelfDeleteRequest& Request, const FSrcHandlersv2ShelfDeleteDelegate& Delegate = FSrcHandlersv2ShelfDeleteDelegate(), float InTimeoutSecs = -1.f) const;
    FHttpRequestPtr SrcHandlersv2ShelfGet(const SrcHandlersv2ShelfGetRequest& Request, const FSrcHandlersv2ShelfGetDelegate& Delegate = FSrcHandlersv2ShelfGetDelegate(), float InTimeoutSecs = -1.f) const;
    FHttpRequestPtr SrcHandlersv2ShelfListAll(const SrcHandlersv2ShelfListAllRequest& Request, const FSrcHandlersv2ShelfListAllDelegate& Delegate = FSrcHandlersv2ShelfListAllDelegate(), float InTimeoutSecs = -1.f) const;
    FHttpRequestPtr SrcHandlersv2ShelfPost(const SrcHandlersv2ShelfPostRequest& Request, const FSrcHandlersv2ShelfPostDelegate& Delegate = FSrcHandlersv2ShelfPostDelegate(), float InTimeoutSecs = -1.f) const;
    
private:
    void OnSrcHandlersv2ShelfApplyResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSrcHandlersv2ShelfApplyDelegate Delegate) const;
    void OnSrcHandlersv2ShelfDeleteResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSrcHandlersv2ShelfDeleteDelegate Delegate) const;
    void OnSrcHandlersv2ShelfGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSrcHandlersv2ShelfGetDelegate Delegate) const;
    void OnSrcHandlersv2ShelfListAllResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSrcHandlersv2ShelfListAllDelegate Delegate) const;
    void OnSrcHandlersv2ShelfPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSrcHandlersv2ShelfPostDelegate Delegate) const;
    
	FHttpRequestRef CreateHttpRequest(const Request& Request) const;
	bool IsValid() const;
	void HandleResponse(FHttpResponsePtr HttpResponse, bool bSucceeded, Response& InOutResponse) const;

	FString Url;
	TMap<FString,FString> AdditionalHeaderParams;
	mutable FHttpRetrySystem::FManager* RetryManager = nullptr;
	mutable TUniquePtr<HttpRetryManager> DefaultRetryManager;
};

}
