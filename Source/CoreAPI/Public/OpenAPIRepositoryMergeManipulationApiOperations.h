// Copyright 2024 Diversion Company, Inc. All Rights Reserved.
/**
 * Diversion Core API
 * Definition of the Core API used to access low-level functionality of Diversion
 *
 * OpenAPI spec version: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "OpenAPIBaseModel.h"
#include "OpenAPIRepositoryMergeManipulationApi.h"

#include "OpenAPIHelpers.h"
#include "OpenAPICommitMessage.h"
#include "OpenAPIDetailedMerge.h"
#include "OpenAPIError.h"
#include "OpenAPIMergeId.h"
#include "OpenAPINewResourceId.h"
#include "OpenAPISrcHandlersv2MergeListOpenMerges200Response.h"
#include "OpenAPISrcHandlersv2MergeMergeRequest200Response.h"

namespace CoreAPI
{

/* Accepts a change from one of the branches (base or other)

*/
class COREAPI_API OpenAPIRepositoryMergeManipulationApi::SrcHandlersv2MergeAcceptSideRequest : public Request
{
public:
    virtual ~SrcHandlersv2MergeAcceptSideRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The repo ID of the repository. Repo _name_ can be used instead of the ID, but usage of ID for permanent linking and API requests is preferred. */
	FString RepoId;
	/* An ID of a merge attempt */
	FString MergeId;
	/* An identifier of a conflict retrieved in conflicts property of GET /repos/{repo_id}/merges/{merge_id} */
	FString ConflictId;
	/* An identifier of a conflict index retrieved in conflicts property of GET /repos/{repo_id}/merges/{merge_id} */
	FString IndexId;
};

class COREAPI_API OpenAPIRepositoryMergeManipulationApi::SrcHandlersv2MergeAcceptSideResponse : public Response
{
public:
    virtual ~SrcHandlersv2MergeAcceptSideResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    
};

/* Close an open merge without resolving it

*/
class COREAPI_API OpenAPIRepositoryMergeManipulationApi::SrcHandlersv2MergeCloseMergeRequest : public Request
{
public:
    virtual ~SrcHandlersv2MergeCloseMergeRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The repo ID of the repository. Repo _name_ can be used instead of the ID, but usage of ID for permanent linking and API requests is preferred. */
	FString RepoId;
	/* An ID of a merge attempt */
	FString MergeId;
};

class COREAPI_API OpenAPIRepositoryMergeManipulationApi::SrcHandlersv2MergeCloseMergeResponse : public Response
{
public:
    virtual ~SrcHandlersv2MergeCloseMergeResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    
};

/* After all conflicts are resolved, finalizes the merge with a commit

*/
class COREAPI_API OpenAPIRepositoryMergeManipulationApi::SrcHandlersv2MergeFinalizeRequest : public Request
{
public:
    virtual ~SrcHandlersv2MergeFinalizeRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The repo ID of the repository. Repo _name_ can be used instead of the ID, but usage of ID for permanent linking and API requests is preferred. */
	FString RepoId;
	/* An ID of a merge attempt */
	FString MergeId;
	TOptional<OpenAPICommitMessage> OpenAPICommitMessage;
};

class COREAPI_API OpenAPIRepositoryMergeManipulationApi::SrcHandlersv2MergeFinalizeResponse : public Response
{
public:
    virtual ~SrcHandlersv2MergeFinalizeResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    
};

/* Details of a specific merge in progress

*/
class COREAPI_API OpenAPIRepositoryMergeManipulationApi::SrcHandlersv2MergeGetOpenMergeRequest : public Request
{
public:
    virtual ~SrcHandlersv2MergeGetOpenMergeRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The repo ID of the repository. Repo _name_ can be used instead of the ID, but usage of ID for permanent linking and API requests is preferred. */
	FString RepoId;
	/* An ID of a merge attempt */
	FString MergeId;
};

class COREAPI_API OpenAPIRepositoryMergeManipulationApi::SrcHandlersv2MergeGetOpenMergeResponse : public Response
{
public:
    virtual ~SrcHandlersv2MergeGetOpenMergeResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIDetailedMerge Content;
};

/* Retrieve conflicted merges in this repo

*/
class COREAPI_API OpenAPIRepositoryMergeManipulationApi::SrcHandlersv2MergeListOpenMergesRequest : public Request
{
public:
    virtual ~SrcHandlersv2MergeListOpenMergesRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The repo ID of the repository. Repo _name_ can be used instead of the ID, but usage of ID for permanent linking and API requests is preferred. */
	FString RepoId;
	/* A reference to a base unto which changes will be applied */
	TOptional<FString> BaseId;
	/* A reference to a source version from which changes will be taken */
	TOptional<FString> OtherId;
};

class COREAPI_API OpenAPIRepositoryMergeManipulationApi::SrcHandlersv2MergeListOpenMergesResponse : public Response
{
public:
    virtual ~SrcHandlersv2MergeListOpenMergesResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPISrcHandlersv2MergeListOpenMerges200Response Content;
};

/* Preview Merging two branches and request a review

*/
class COREAPI_API OpenAPIRepositoryMergeManipulationApi::SrcHandlersv2MergeMergeRequestRequest : public Request
{
public:
    virtual ~SrcHandlersv2MergeMergeRequestRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The repo ID of the repository. Repo _name_ can be used instead of the ID, but usage of ID for permanent linking and API requests is preferred. */
	FString RepoId;
	/* A reference to a base unto which changes will be applied */
	TOptional<FString> BaseId;
	/* A reference to a source version from which changes will be taken */
	TOptional<FString> OtherId;
};

class COREAPI_API OpenAPIRepositoryMergeManipulationApi::SrcHandlersv2MergeMergeRequestResponse : public Response
{
public:
    virtual ~SrcHandlersv2MergeMergeRequestResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPISrcHandlersv2MergeMergeRequest200Response Content;
};

/* Merge ref into a branch

*/
class COREAPI_API OpenAPIRepositoryMergeManipulationApi::SrcHandlersv2MergePostRequest : public Request
{
public:
    virtual ~SrcHandlersv2MergePostRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The repo ID of the repository. Repo _name_ can be used instead of the ID, but usage of ID for permanent linking and API requests is preferred. */
	FString RepoId;
	/* A reference to a base unto which changes will be applied */
	TOptional<FString> BaseId;
	/* A reference to a source version from which changes will be taken */
	TOptional<FString> OtherId;
};

class COREAPI_API OpenAPIRepositoryMergeManipulationApi::SrcHandlersv2MergePostResponse : public Response
{
public:
    virtual ~SrcHandlersv2MergePostResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    
};

/* Update a conflicting file, potentially resolving the conflict.

*/
class COREAPI_API OpenAPIRepositoryMergeManipulationApi::SrcHandlersv2MergeSetResultRequest : public Request
{
public:
    virtual ~SrcHandlersv2MergeSetResultRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The repo ID of the repository. Repo _name_ can be used instead of the ID, but usage of ID for permanent linking and API requests is preferred. */
	FString RepoId;
	/* An ID of a merge attempt */
	FString MergeId;
	/* An identifier of a conflict retrieved in conflicts property of GET /repos/{repo_id}/merges/{merge_id} */
	FString ConflictId;
	/* The file mode (as Unix mode) */
	int32 Mode = 0;
	FString Body;
	/* Blob size in bytes */
	TOptional<int64> Size;
	/* A sha1 hexdigest */
	TOptional<FString> Sha1;
	/* An optional storage type for async upload. */
	TOptional<int32> StorageBackend;
	/* An optional storage uri to be sent along storage_backend. */
	TOptional<FString> StorageUri;
	/* Updates the path of the file with the value passed here. Can be used to resolve path conflicts. */
	TOptional<FString> Path;
};

class COREAPI_API OpenAPIRepositoryMergeManipulationApi::SrcHandlersv2MergeSetResultResponse : public Response
{
public:
    virtual ~SrcHandlersv2MergeSetResultResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    
};

}
