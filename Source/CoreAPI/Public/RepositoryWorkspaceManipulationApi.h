// Copyright 2024 Diversion Company, Inc. All Rights Reserved.
/**
 * Diversion Core API
 * Definition of the Core API used to access low-level functionality of Diversion
 *
 * The version of the OpenAPI document: 0.2.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.10.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#pragma once

#include "CoreMinimal.h"
#include "HTTPResult.h"
#include "DiversionHttpManager.h"
#include "Misc/TVariant.h"


#include "Error.h"
#include "MergeId.h"
#include "RefsFilesStatus.h"
#include "ResetStatus.h"
#include "Src_handlersv2_workspace_reset_request.h"

#include "WorkspaceStatus.h"

namespace Diversion {
namespace CoreAPI {

using namespace Diversion::CoreAPI::Model;

class COREAPI_API RepositoryWorkspaceManipulationApi
{
public:
    explicit RepositoryWorkspaceManipulationApi(TSharedPtr<DiversionHttp::FHttpRequestManager> ApiClient);
    virtual ~RepositoryWorkspaceManipulationApi();


    /**
    * Merge base branch into workspace
    * @param repoId The repo ID of the repository. Repo _name_ can be used instead of the ID, but usage of ID for permanent linking and API requests is preferred.@param workspaceId The repo ID of the workspace.
    * 
    */
    THTTPResult<TVariant<void*, TSharedPtr<MergeId>, TSharedPtr<Error>>> SrcHandlersv2WorkspaceForwardWorkspace(
        FString repoId,
        FString workspaceId,
        const FString& Token,
        const TMap<FString, FString>& Headers,
		int ConnectionTimeoutSeconds, int RequestTimeoutSeconds) const;

    /**
    * Get list of potential clashes with files in other users&#39; workspaces and branches
    * @param repoId The repo ID of the repository. Repo _name_ can be used instead of the ID, but usage of ID for permanent linking and API requests is preferred.@param workspaceId The repo ID of the workspace.@param pathPrefix A path prefix in the file tree to walk under@param pathPrefixes A list of prefixes in the file tree to walk under@param limit Limit the number of entries returned from walk@param skip Filters the first entries returned from walk@param recurse Specifies if to recursively iterate file tree to next directory levels
    * @return 
    */
    THTTPResult<TVariant<TSharedPtr<RefsFilesStatus>, TSharedPtr<Error>>> SrcHandlersv2WorkspaceGetOtherStatuses(
        FString repoId,
        FString workspaceId,
        TOptional<FString> pathPrefix,
        TOptional<TArray<FString>> pathPrefixes,
        TOptional<int32_t> limit,
        TOptional<int32_t> skip,
        TOptional<bool> recurse,
        const FString& Token,
        const TMap<FString, FString>& Headers,
		int ConnectionTimeoutSeconds, int RequestTimeoutSeconds) const;

    /**
    * Get status of changes in workspace
    * @param repoId The repo ID of the repository. Repo _name_ can be used instead of the ID, but usage of ID for permanent linking and API requests is preferred.@param workspaceId The repo ID of the workspace.@param detailItems Should detail all the changed items in status response@param limit Limit the number of entries returned from walk@param skip Filters the first entries returned from walk@param recurse Specifies if to recursively iterate file tree to next directory levels@param pathPrefix A path prefix in the file tree to walk under@param allowTrim Specifies if the results should be full or readable by a user
    * @return 
    */
    THTTPResult<TVariant<TSharedPtr<WorkspaceStatus>, TSharedPtr<Error>>> SrcHandlersv2WorkspaceGetStatus(
        FString repoId,
        FString workspaceId,
        TOptional<bool> detailItems,
        TOptional<int32_t> limit,
        TOptional<int32_t> skip,
        TOptional<bool> recurse,
        TOptional<FString> pathPrefix,
        TOptional<bool> allowTrim,
        const FString& Token,
        const TMap<FString, FString>& Headers,
		int ConnectionTimeoutSeconds, int RequestTimeoutSeconds) const;

    /**
    * Reset changes in workspace
    * @param repoId The repo ID of the repository. Repo _name_ can be used instead of the ID, but usage of ID for permanent linking and API requests is preferred.@param workspaceId The repo ID of the workspace.@param srcHandlersv2WorkspaceResetRequest 
    * @return 
    */
    THTTPResult<TVariant<TSharedPtr<ResetStatus>, TSharedPtr<Error>>> SrcHandlersv2WorkspaceReset(
        FString repoId,
        FString workspaceId,
        TSharedPtr<Src_handlersv2_workspace_reset_request> srcHandlersv2WorkspaceResetRequest,
        const FString& Token,
        const TMap<FString, FString>& Headers,
		int ConnectionTimeoutSeconds, int RequestTimeoutSeconds) const;

    typedef FApiResponseDelegate<TVariant<void*, TSharedPtr<MergeId>, TSharedPtr<Error>>> Fsrc_handlersv2_workspace_forwardWorkspaceDelegate;
    typedef FApiResponseDelegate<TVariant<TSharedPtr<RefsFilesStatus>, TSharedPtr<Error>>> Fsrc_handlersv2_workspace_getOtherStatusesDelegate;
    typedef FApiResponseDelegate<TVariant<TSharedPtr<WorkspaceStatus>, TSharedPtr<Error>>> Fsrc_handlersv2_workspace_getStatusDelegate;
    typedef FApiResponseDelegate<TVariant<TSharedPtr<ResetStatus>, TSharedPtr<Error>>> Fsrc_handlersv2_workspace_resetDelegate;

protected:
    TSharedPtr<DiversionHttp::FHttpRequestManager> ApiClient;
};

}
}

