// Copyright 2024 Diversion Company, Inc. All Rights Reserved.
/**
 * Diversion Core API
 * Definition of the Core API used to access low-level functionality of Diversion
 *
 * OpenAPI spec version: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "OpenAPIBaseModel.h"
#include "OpenAPICollaboratorsApi.h"

#include "OpenAPICollaborationInviteRequest.h"
#include "OpenAPICollaborationRequest.h"
#include "OpenAPIError.h"
#include "OpenAPISrcHandlersCollaborationListCollaborators200Response.h"

namespace CoreAPI
{

/* 
 *
 * Get all collaborators and pending invites for repo
*/
class COREAPI_API OpenAPICollaboratorsApi::SrcHandlersCollaborationListCollaboratorsRequest : public Request
{
public:
    virtual ~SrcHandlersCollaborationListCollaboratorsRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The repo ID of the repository. Repo _name_ can be used instead of the ID, but usage of ID for permanent linking and API requests is preferred. */
	FString RepoId;
};

class COREAPI_API OpenAPICollaboratorsApi::SrcHandlersCollaborationListCollaboratorsResponse : public Response
{
public:
    virtual ~SrcHandlersCollaborationListCollaboratorsResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPISrcHandlersCollaborationListCollaborators200Response Content;
};

/* 
 *
 * Revoke a user&#39;s access level to the repo
*/
class COREAPI_API OpenAPICollaboratorsApi::SrcHandlersCollaborationRevokeAccessRequest : public Request
{
public:
    virtual ~SrcHandlersCollaborationRevokeAccessRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The repo ID of the repository. Repo _name_ can be used instead of the ID, but usage of ID for permanent linking and API requests is preferred. */
	FString RepoId;
	/* A user's ID */
	FString UserId;
};

class COREAPI_API OpenAPICollaboratorsApi::SrcHandlersCollaborationRevokeAccessResponse : public Response
{
public:
    virtual ~SrcHandlersCollaborationRevokeAccessResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    
};

/* 
 *
 * Change a user&#39;s access level to the repo
*/
class COREAPI_API OpenAPICollaboratorsApi::SrcHandlersCollaborationUpdateModeRequest : public Request
{
public:
    virtual ~SrcHandlersCollaborationUpdateModeRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The repo ID of the repository. Repo _name_ can be used instead of the ID, but usage of ID for permanent linking and API requests is preferred. */
	FString RepoId;
	/* A user's ID */
	FString UserId;
	TOptional<OpenAPICollaborationRequest> OpenAPICollaborationRequest;
};

class COREAPI_API OpenAPICollaboratorsApi::SrcHandlersCollaborationUpdateModeResponse : public Response
{
public:
    virtual ~SrcHandlersCollaborationUpdateModeResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    
};

/* 
 *
 * Invite a collaborator to a repository
*/
class COREAPI_API OpenAPICollaboratorsApi::SrcHandlersv2InvitesCreateNewRequest : public Request
{
public:
    virtual ~SrcHandlersv2InvitesCreateNewRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The repo ID of the repository. Repo _name_ can be used instead of the ID, but usage of ID for permanent linking and API requests is preferred. */
	FString RepoId;
	OpenAPICollaborationInviteRequest OpenAPICollaborationInviteRequest;
};

class COREAPI_API OpenAPICollaboratorsApi::SrcHandlersv2InvitesCreateNewResponse : public Response
{
public:
    virtual ~SrcHandlersv2InvitesCreateNewResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    
};

/* 
 *
 * Resend existing invite
*/
class COREAPI_API OpenAPICollaboratorsApi::SrcHandlersv2InvitesResendRequest : public Request
{
public:
    virtual ~SrcHandlersv2InvitesResendRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The repo ID of the repository. Repo _name_ can be used instead of the ID, but usage of ID for permanent linking and API requests is preferred. */
	FString RepoId;
	/* Invite ID, as returned by a previous call  */
	int32 InviteId = 0;
};

class COREAPI_API OpenAPICollaboratorsApi::SrcHandlersv2InvitesResendResponse : public Response
{
public:
    virtual ~SrcHandlersv2InvitesResendResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    
};

/* 
 *
 * Revoke existing invite
*/
class COREAPI_API OpenAPICollaboratorsApi::SrcHandlersv2InvitesRevokeRequest : public Request
{
public:
    virtual ~SrcHandlersv2InvitesRevokeRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The repo ID of the repository. Repo _name_ can be used instead of the ID, but usage of ID for permanent linking and API requests is preferred. */
	FString RepoId;
	/* Invite ID, as returned by a previous call  */
	int32 InviteId = 0;
};

class COREAPI_API OpenAPICollaboratorsApi::SrcHandlersv2InvitesRevokeResponse : public Response
{
public:
    virtual ~SrcHandlersv2InvitesRevokeResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    
};

}
