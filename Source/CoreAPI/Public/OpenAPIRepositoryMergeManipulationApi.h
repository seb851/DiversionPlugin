// Copyright 2024 Diversion Company, Inc. All Rights Reserved.
/**
 * Diversion Core API
 * Definition of the Core API used to access low-level functionality of Diversion
 *
 * OpenAPI spec version: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "CoreMinimal.h"
#include "OpenAPIBaseModel.h"

namespace CoreAPI
{

class COREAPI_API OpenAPIRepositoryMergeManipulationApi : public TSharedFromThis<OpenAPIRepositoryMergeManipulationApi>
{
public:
	OpenAPIRepositoryMergeManipulationApi();
	~OpenAPIRepositoryMergeManipulationApi();

	/* Sets the URL Endpoint.
	* Note: several fallback endpoints can be configured in request retry policies, see Request::SetShouldRetry */
	void SetURL(const FString& Url);

	/* Adds global header params to all requests */
	void AddHeaderParam(const FString& Key, const FString& Value);
	void ClearHeaderParams();

	/* Sets the retry manager to the user-defined retry manager. User must manage the lifetime of the retry manager.
	* If no retry manager is specified and a request needs retries, a default retry manager will be used.
	* See also: Request::SetShouldRetry */
	void SetHttpRetryManager(FHttpRetrySystem::FManager& RetryManager);
	FHttpRetrySystem::FManager& GetHttpRetryManager();

	class SrcHandlersv2MergeAcceptSideRequest;
	class SrcHandlersv2MergeAcceptSideResponse;
	class SrcHandlersv2MergeCloseMergeRequest;
	class SrcHandlersv2MergeCloseMergeResponse;
	class SrcHandlersv2MergeFinalizeRequest;
	class SrcHandlersv2MergeFinalizeResponse;
	class SrcHandlersv2MergeGetOpenMergeRequest;
	class SrcHandlersv2MergeGetOpenMergeResponse;
	class SrcHandlersv2MergeListOpenMergesRequest;
	class SrcHandlersv2MergeListOpenMergesResponse;
	class SrcHandlersv2MergeMergeRequestRequest;
	class SrcHandlersv2MergeMergeRequestResponse;
	class SrcHandlersv2MergePostRequest;
	class SrcHandlersv2MergePostResponse;
	class SrcHandlersv2MergeSetResultRequest;
	class SrcHandlersv2MergeSetResultResponse;
	
    DECLARE_DELEGATE_OneParam(FSrcHandlersv2MergeAcceptSideDelegate, const SrcHandlersv2MergeAcceptSideResponse&);
    DECLARE_DELEGATE_OneParam(FSrcHandlersv2MergeCloseMergeDelegate, const SrcHandlersv2MergeCloseMergeResponse&);
    DECLARE_DELEGATE_OneParam(FSrcHandlersv2MergeFinalizeDelegate, const SrcHandlersv2MergeFinalizeResponse&);
    DECLARE_DELEGATE_OneParam(FSrcHandlersv2MergeGetOpenMergeDelegate, const SrcHandlersv2MergeGetOpenMergeResponse&);
    DECLARE_DELEGATE_OneParam(FSrcHandlersv2MergeListOpenMergesDelegate, const SrcHandlersv2MergeListOpenMergesResponse&);
    DECLARE_DELEGATE_OneParam(FSrcHandlersv2MergeMergeRequestDelegate, const SrcHandlersv2MergeMergeRequestResponse&);
    DECLARE_DELEGATE_OneParam(FSrcHandlersv2MergePostDelegate, const SrcHandlersv2MergePostResponse&);
    DECLARE_DELEGATE_OneParam(FSrcHandlersv2MergeSetResultDelegate, const SrcHandlersv2MergeSetResultResponse&);
    
    FHttpRequestPtr SrcHandlersv2MergeAcceptSide(const SrcHandlersv2MergeAcceptSideRequest& Request, const FSrcHandlersv2MergeAcceptSideDelegate& Delegate = FSrcHandlersv2MergeAcceptSideDelegate(), float InTimeoutSecs = -1.f) const;
    FHttpRequestPtr SrcHandlersv2MergeCloseMerge(const SrcHandlersv2MergeCloseMergeRequest& Request, const FSrcHandlersv2MergeCloseMergeDelegate& Delegate = FSrcHandlersv2MergeCloseMergeDelegate(), float InTimeoutSecs = -1.f) const;
    FHttpRequestPtr SrcHandlersv2MergeFinalize(const SrcHandlersv2MergeFinalizeRequest& Request, const FSrcHandlersv2MergeFinalizeDelegate& Delegate = FSrcHandlersv2MergeFinalizeDelegate(), float InTimeoutSecs = -1.f) const;
    FHttpRequestPtr SrcHandlersv2MergeGetOpenMerge(const SrcHandlersv2MergeGetOpenMergeRequest& Request, const FSrcHandlersv2MergeGetOpenMergeDelegate& Delegate = FSrcHandlersv2MergeGetOpenMergeDelegate(), float InTimeoutSecs = -1.f) const;
    FHttpRequestPtr SrcHandlersv2MergeListOpenMerges(const SrcHandlersv2MergeListOpenMergesRequest& Request, const FSrcHandlersv2MergeListOpenMergesDelegate& Delegate = FSrcHandlersv2MergeListOpenMergesDelegate(), float InTimeoutSecs = -1.f) const;
    FHttpRequestPtr SrcHandlersv2MergeMergeRequest(const SrcHandlersv2MergeMergeRequestRequest& Request, const FSrcHandlersv2MergeMergeRequestDelegate& Delegate = FSrcHandlersv2MergeMergeRequestDelegate(), float InTimeoutSecs = -1.f) const;
    FHttpRequestPtr SrcHandlersv2MergePost(const SrcHandlersv2MergePostRequest& Request, const FSrcHandlersv2MergePostDelegate& Delegate = FSrcHandlersv2MergePostDelegate(), float InTimeoutSecs = -1.f) const;
    FHttpRequestPtr SrcHandlersv2MergeSetResult(const SrcHandlersv2MergeSetResultRequest& Request, const FSrcHandlersv2MergeSetResultDelegate& Delegate = FSrcHandlersv2MergeSetResultDelegate(), float InTimeoutSecs = -1.f) const;
    
private:
    void OnSrcHandlersv2MergeAcceptSideResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSrcHandlersv2MergeAcceptSideDelegate Delegate) const;
    void OnSrcHandlersv2MergeCloseMergeResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSrcHandlersv2MergeCloseMergeDelegate Delegate) const;
    void OnSrcHandlersv2MergeFinalizeResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSrcHandlersv2MergeFinalizeDelegate Delegate) const;
    void OnSrcHandlersv2MergeGetOpenMergeResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSrcHandlersv2MergeGetOpenMergeDelegate Delegate) const;
    void OnSrcHandlersv2MergeListOpenMergesResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSrcHandlersv2MergeListOpenMergesDelegate Delegate) const;
    void OnSrcHandlersv2MergeMergeRequestResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSrcHandlersv2MergeMergeRequestDelegate Delegate) const;
    void OnSrcHandlersv2MergePostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSrcHandlersv2MergePostDelegate Delegate) const;
    void OnSrcHandlersv2MergeSetResultResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSrcHandlersv2MergeSetResultDelegate Delegate) const;
    
	FHttpRequestRef CreateHttpRequest(const Request& Request) const;
	bool IsValid() const;
	void HandleResponse(FHttpResponsePtr HttpResponse, bool bSucceeded, Response& InOutResponse) const;

	FString Url;
	TMap<FString,FString> AdditionalHeaderParams;
	mutable FHttpRetrySystem::FManager* RetryManager = nullptr;
	mutable TUniquePtr<HttpRetryManager> DefaultRetryManager;
};

}
