// Copyright 2024 Diversion Company, Inc. All Rights Reserved.
/**
 * Diversion Core API
 * Definition of the Core API used to access low-level functionality of Diversion
 *
 * OpenAPI spec version: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "OpenAPIBaseModel.h"
#include "OpenAPIRepositoryShelvesManipulationApi.h"

#include "OpenAPIApplyShelf.h"
#include "OpenAPICreateShelf.h"
#include "OpenAPIError.h"
#include "OpenAPIMergeId.h"
#include "OpenAPIShelf.h"
#include "OpenAPISrcHandlersv2ShelfListAll200Response.h"

namespace CoreAPI
{

/* Apply a shelf onto a workspace

*/
class COREAPI_API OpenAPIRepositoryShelvesManipulationApi::SrcHandlersv2ShelfApplyRequest : public Request
{
public:
    virtual ~SrcHandlersv2ShelfApplyRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The repo ID of the repository. Repo _name_ can be used instead of the ID, but usage of ID for permanent linking and API requests is preferred. */
	FString RepoId;
	/* Shelf identifier */
	FString ShelfId;
	OpenAPIApplyShelf OpenAPIApplyShelf;
};

class COREAPI_API OpenAPIRepositoryShelvesManipulationApi::SrcHandlersv2ShelfApplyResponse : public Response
{
public:
    virtual ~SrcHandlersv2ShelfApplyResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIMergeId Content;
};

/* Delete a shelf

*/
class COREAPI_API OpenAPIRepositoryShelvesManipulationApi::SrcHandlersv2ShelfDeleteRequest : public Request
{
public:
    virtual ~SrcHandlersv2ShelfDeleteRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The repo ID of the repository. Repo _name_ can be used instead of the ID, but usage of ID for permanent linking and API requests is preferred. */
	FString RepoId;
	/* Shelf identifier */
	FString ShelfId;
};

class COREAPI_API OpenAPIRepositoryShelvesManipulationApi::SrcHandlersv2ShelfDeleteResponse : public Response
{
public:
    virtual ~SrcHandlersv2ShelfDeleteResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    
};

/* Get shelf details

*/
class COREAPI_API OpenAPIRepositoryShelvesManipulationApi::SrcHandlersv2ShelfGetRequest : public Request
{
public:
    virtual ~SrcHandlersv2ShelfGetRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The repo ID of the repository. Repo _name_ can be used instead of the ID, but usage of ID for permanent linking and API requests is preferred. */
	FString RepoId;
	/* Shelf identifier */
	FString ShelfId;
};

class COREAPI_API OpenAPIRepositoryShelvesManipulationApi::SrcHandlersv2ShelfGetResponse : public Response
{
public:
    virtual ~SrcHandlersv2ShelfGetResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIShelf Content;
};

/* Get a list of all shelves in the repo.

*/
class COREAPI_API OpenAPIRepositoryShelvesManipulationApi::SrcHandlersv2ShelfListAllRequest : public Request
{
public:
    virtual ~SrcHandlersv2ShelfListAllRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The repo ID of the repository. Repo _name_ can be used instead of the ID, but usage of ID for permanent linking and API requests is preferred. */
	FString RepoId;
	/* Optional branch id to filter by */
	TOptional<FString> BranchId;
};

class COREAPI_API OpenAPIRepositoryShelvesManipulationApi::SrcHandlersv2ShelfListAllResponse : public Response
{
public:
    virtual ~SrcHandlersv2ShelfListAllResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPISrcHandlersv2ShelfListAll200Response Content;
};

/* Create a shelf

*/
class COREAPI_API OpenAPIRepositoryShelvesManipulationApi::SrcHandlersv2ShelfPostRequest : public Request
{
public:
    virtual ~SrcHandlersv2ShelfPostRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The repo ID of the repository. Repo _name_ can be used instead of the ID, but usage of ID for permanent linking and API requests is preferred. */
	FString RepoId;
	OpenAPICreateShelf OpenAPICreateShelf;
};

class COREAPI_API OpenAPIRepositoryShelvesManipulationApi::SrcHandlersv2ShelfPostResponse : public Response
{
public:
    virtual ~SrcHandlersv2ShelfPostResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIShelf Content;
};

}
