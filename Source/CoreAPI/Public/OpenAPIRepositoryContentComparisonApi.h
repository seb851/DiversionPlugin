// Copyright 2024 Diversion Company, Inc. All Rights Reserved.
/**
 * Diversion Core API
 * Definition of the Core API used to access low-level functionality of Diversion
 *
 * OpenAPI spec version: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "CoreMinimal.h"
#include "OpenAPIBaseModel.h"

namespace CoreAPI
{

class COREAPI_API OpenAPIRepositoryContentComparisonApi : public TSharedFromThis<OpenAPIRepositoryContentComparisonApi>
{
public:
	OpenAPIRepositoryContentComparisonApi();
	~OpenAPIRepositoryContentComparisonApi();

	/* Sets the URL Endpoint.
	* Note: several fallback endpoints can be configured in request retry policies, see Request::SetShouldRetry */
	void SetURL(const FString& Url);

	/* Adds global header params to all requests */
	void AddHeaderParam(const FString& Key, const FString& Value);
	void ClearHeaderParams();

	/* Sets the retry manager to the user-defined retry manager. User must manage the lifetime of the retry manager.
	* If no retry manager is specified and a request needs retries, a default retry manager will be used.
	* See also: Request::SetShouldRetry */
	void SetHttpRetryManager(FHttpRetrySystem::FManager& RetryManager);
	FHttpRetrySystem::FManager& GetHttpRetryManager();

	class SrcHandlersv2TreeCompareRequest;
	class SrcHandlersv2TreeCompareResponse;
	
    DECLARE_DELEGATE_OneParam(FSrcHandlersv2TreeCompareDelegate, const SrcHandlersv2TreeCompareResponse&);
    
    FHttpRequestPtr SrcHandlersv2TreeCompare(const SrcHandlersv2TreeCompareRequest& Request, const FSrcHandlersv2TreeCompareDelegate& Delegate = FSrcHandlersv2TreeCompareDelegate(), float InTimeoutSecs = -1.f) const;
    
private:
    void OnSrcHandlersv2TreeCompareResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSrcHandlersv2TreeCompareDelegate Delegate) const;
    
	FHttpRequestRef CreateHttpRequest(const Request& Request) const;
	bool IsValid() const;
	void HandleResponse(FHttpResponsePtr HttpResponse, bool bSucceeded, Response& InOutResponse) const;

	FString Url;
	TMap<FString,FString> AdditionalHeaderParams;
	mutable FHttpRetrySystem::FManager* RetryManager = nullptr;
	mutable TUniquePtr<HttpRetryManager> DefaultRetryManager;
};

}
