// Copyright 2024 Diversion Company, Inc. All Rights Reserved.
/**
 * Diversion Core API
 * Definition of the Core API used to access low-level functionality of Diversion
 *
 * OpenAPI spec version: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "OpenAPIBaseModel.h"
#include "OpenAPIRepositoryCommitManipulationApi.h"

#include "OpenAPICommit.h"
#include "OpenAPICommitMessage.h"
#include "OpenAPICommitRequest.h"
#include "OpenAPIError.h"
#include "OpenAPIMergeId.h"
#include "OpenAPINewCommit.h"
#include "OpenAPISrcHandlersv2CommitListAll200Response.h"
#include "OpenAPISrcHandlersv2WorkspaceCommitWorkspace400Response.h"

namespace CoreAPI
{

/* 
 *
 * Get details of a specific commit
*/
class COREAPI_API OpenAPIRepositoryCommitManipulationApi::SrcHandlersv2CommitGetRequest : public Request
{
public:
    virtual ~SrcHandlersv2CommitGetRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The repo ID of the repository. Repo _name_ can be used instead of the ID, but usage of ID for permanent linking and API requests is preferred. */
	FString RepoId;
	/* A commit ID */
	FString CommitId;
};

class COREAPI_API OpenAPIRepositoryCommitManipulationApi::SrcHandlersv2CommitGetResponse : public Response
{
public:
    virtual ~SrcHandlersv2CommitGetResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPICommit Content;
};

/* 
 *
 * Get bulk details of commits by their reference IDs
*/
class COREAPI_API OpenAPIRepositoryCommitManipulationApi::SrcHandlersv2CommitGetBulkRequest : public Request
{
public:
    virtual ~SrcHandlersv2CommitGetBulkRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The repo ID of the repository. Repo _name_ can be used instead of the ID, but usage of ID for permanent linking and API requests is preferred. */
	FString RepoId;
	/* List of reference IDs to include  */
	TArray<FString> RefIds;
};

class COREAPI_API OpenAPIRepositoryCommitManipulationApi::SrcHandlersv2CommitGetBulkResponse : public Response
{
public:
    virtual ~SrcHandlersv2CommitGetBulkResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    TMap<FString, OpenAPICommit> Content;
};

/* 
 *
 * Get a list of commits. (Executed on secondary shard)
*/
class COREAPI_API OpenAPIRepositoryCommitManipulationApi::SrcHandlersv2CommitListAllRequest : public Request
{
public:
    virtual ~SrcHandlersv2CommitListAllRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The repo ID of the repository. Repo _name_ can be used instead of the ID, but usage of ID for permanent linking and API requests is preferred. */
	FString RepoId;
	/* If specified, filters commit list to start with specified ref IDs (branches, workspaces etc.), otherwise return commits accessible from all branches.  */
	TOptional<TArray<FString>> RefIds;
	/* Limit the number or items returned from a listing api */
	TOptional<int32> Limit;
	/* Skip a number of items returned from a listing api */
	TOptional<int32> Skip;
	/* A string query to filter against in a listing api */
	TOptional<FString> Query;
};

class COREAPI_API OpenAPIRepositoryCommitManipulationApi::SrcHandlersv2CommitListAllResponse : public Response
{
public:
    virtual ~SrcHandlersv2CommitListAllResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPISrcHandlersv2CommitListAll200Response Content;
};

/* 
 *
 * Update a commit message
*/
class COREAPI_API OpenAPIRepositoryCommitManipulationApi::SrcHandlersv2CommitPatchRequest : public Request
{
public:
    virtual ~SrcHandlersv2CommitPatchRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The repo ID of the repository. Repo _name_ can be used instead of the ID, but usage of ID for permanent linking and API requests is preferred. */
	FString RepoId;
	/* A commit ID */
	FString CommitId;
	OpenAPICommitMessage OpenAPICommitMessage;
};

class COREAPI_API OpenAPIRepositoryCommitManipulationApi::SrcHandlersv2CommitPatchResponse : public Response
{
public:
    virtual ~SrcHandlersv2CommitPatchResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    TSharedPtr<FJsonObject> Content;
};

/* Revert commit
 *
 * The operation reverts any changes done in the single commit represented by revert_ref_id (compared to its own parent). These opposing changes are then applied into the branch represented by base_id. If any changes were done between revert_ref_id and base_id, they will be checked for conflicts with the revert changes. 
*/
class COREAPI_API OpenAPIRepositoryCommitManipulationApi::SrcHandlersv2RevertRevertRequest : public Request
{
public:
    virtual ~SrcHandlersv2RevertRevertRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The repo ID of the repository. Repo _name_ can be used instead of the ID, but usage of ID for permanent linking and API requests is preferred. */
	FString RepoId;
	/* A reference to a base unto which changes will be applied */
	TOptional<FString> BaseId;
	/* A reference to a source version to revert, currently only commit ID is supported */
	TOptional<FString> RevertRefId;
};

class COREAPI_API OpenAPIRepositoryCommitManipulationApi::SrcHandlersv2RevertRevertResponse : public Response
{
public:
    virtual ~SrcHandlersv2RevertRevertResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    
};

/* 
 *
 * Commit workspace to base branch
*/
class COREAPI_API OpenAPIRepositoryCommitManipulationApi::SrcHandlersv2WorkspaceCommitWorkspaceRequest : public Request
{
public:
    virtual ~SrcHandlersv2WorkspaceCommitWorkspaceRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The repo ID of the repository. Repo _name_ can be used instead of the ID, but usage of ID for permanent linking and API requests is preferred. */
	FString RepoId;
	/* The repo ID of the workspace. */
	FString WorkspaceId;
	OpenAPICommitRequest OpenAPICommitRequest;
};

class COREAPI_API OpenAPIRepositoryCommitManipulationApi::SrcHandlersv2WorkspaceCommitWorkspaceResponse : public Response
{
public:
    virtual ~SrcHandlersv2WorkspaceCommitWorkspaceResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    
};

}
