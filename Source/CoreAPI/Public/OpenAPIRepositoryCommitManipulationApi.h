// Copyright 2024 Diversion Company, Inc. All Rights Reserved.
/**
 * Diversion Core API
 * Definition of the Core API used to access low-level functionality of Diversion
 *
 * OpenAPI spec version: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "CoreMinimal.h"
#include "OpenAPIBaseModel.h"

namespace CoreAPI
{

class COREAPI_API OpenAPIRepositoryCommitManipulationApi : public TSharedFromThis<OpenAPIRepositoryCommitManipulationApi>
{
public:
	OpenAPIRepositoryCommitManipulationApi();
	~OpenAPIRepositoryCommitManipulationApi();

	/* Sets the URL Endpoint.
	* Note: several fallback endpoints can be configured in request retry policies, see Request::SetShouldRetry */
	void SetURL(const FString& Url);

	/* Adds global header params to all requests */
	void AddHeaderParam(const FString& Key, const FString& Value);
	void ClearHeaderParams();

	/* Sets the retry manager to the user-defined retry manager. User must manage the lifetime of the retry manager.
	* If no retry manager is specified and a request needs retries, a default retry manager will be used.
	* See also: Request::SetShouldRetry */
	void SetHttpRetryManager(FHttpRetrySystem::FManager& RetryManager);
	FHttpRetrySystem::FManager& GetHttpRetryManager();

	class SrcHandlersv2CommitGetRequest;
	class SrcHandlersv2CommitGetResponse;
	class SrcHandlersv2CommitGetBulkRequest;
	class SrcHandlersv2CommitGetBulkResponse;
	class SrcHandlersv2CommitListAllRequest;
	class SrcHandlersv2CommitListAllResponse;
	class SrcHandlersv2CommitPatchRequest;
	class SrcHandlersv2CommitPatchResponse;
	class SrcHandlersv2RevertRevertRequest;
	class SrcHandlersv2RevertRevertResponse;
	class SrcHandlersv2WorkspaceCommitWorkspaceRequest;
	class SrcHandlersv2WorkspaceCommitWorkspaceResponse;
	
    DECLARE_DELEGATE_OneParam(FSrcHandlersv2CommitGetDelegate, const SrcHandlersv2CommitGetResponse&);
    DECLARE_DELEGATE_OneParam(FSrcHandlersv2CommitGetBulkDelegate, const SrcHandlersv2CommitGetBulkResponse&);
    DECLARE_DELEGATE_OneParam(FSrcHandlersv2CommitListAllDelegate, const SrcHandlersv2CommitListAllResponse&);
    DECLARE_DELEGATE_OneParam(FSrcHandlersv2CommitPatchDelegate, const SrcHandlersv2CommitPatchResponse&);
    DECLARE_DELEGATE_OneParam(FSrcHandlersv2RevertRevertDelegate, const SrcHandlersv2RevertRevertResponse&);
    DECLARE_DELEGATE_OneParam(FSrcHandlersv2WorkspaceCommitWorkspaceDelegate, const SrcHandlersv2WorkspaceCommitWorkspaceResponse&);
    
    FHttpRequestPtr SrcHandlersv2CommitGet(const SrcHandlersv2CommitGetRequest& Request, const FSrcHandlersv2CommitGetDelegate& Delegate = FSrcHandlersv2CommitGetDelegate(), float InTimeoutSecs = -1.f) const;
    FHttpRequestPtr SrcHandlersv2CommitGetBulk(const SrcHandlersv2CommitGetBulkRequest& Request, const FSrcHandlersv2CommitGetBulkDelegate& Delegate = FSrcHandlersv2CommitGetBulkDelegate(), float InTimeoutSecs = -1.f) const;
    FHttpRequestPtr SrcHandlersv2CommitListAll(const SrcHandlersv2CommitListAllRequest& Request, const FSrcHandlersv2CommitListAllDelegate& Delegate = FSrcHandlersv2CommitListAllDelegate(), float InTimeoutSecs = -1.f) const;
    FHttpRequestPtr SrcHandlersv2CommitPatch(const SrcHandlersv2CommitPatchRequest& Request, const FSrcHandlersv2CommitPatchDelegate& Delegate = FSrcHandlersv2CommitPatchDelegate(), float InTimeoutSecs = -1.f) const;
    FHttpRequestPtr SrcHandlersv2RevertRevert(const SrcHandlersv2RevertRevertRequest& Request, const FSrcHandlersv2RevertRevertDelegate& Delegate = FSrcHandlersv2RevertRevertDelegate(), float InTimeoutSecs = -1.f) const;
    FHttpRequestPtr SrcHandlersv2WorkspaceCommitWorkspace(const SrcHandlersv2WorkspaceCommitWorkspaceRequest& Request, const FSrcHandlersv2WorkspaceCommitWorkspaceDelegate& Delegate = FSrcHandlersv2WorkspaceCommitWorkspaceDelegate(), float InTimeoutSecs = -1.f) const;
    
private:
    void OnSrcHandlersv2CommitGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSrcHandlersv2CommitGetDelegate Delegate) const;
    void OnSrcHandlersv2CommitGetBulkResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSrcHandlersv2CommitGetBulkDelegate Delegate) const;
    void OnSrcHandlersv2CommitListAllResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSrcHandlersv2CommitListAllDelegate Delegate) const;
    void OnSrcHandlersv2CommitPatchResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSrcHandlersv2CommitPatchDelegate Delegate) const;
    void OnSrcHandlersv2RevertRevertResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSrcHandlersv2RevertRevertDelegate Delegate) const;
    void OnSrcHandlersv2WorkspaceCommitWorkspaceResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSrcHandlersv2WorkspaceCommitWorkspaceDelegate Delegate) const;
    
	FHttpRequestRef CreateHttpRequest(const Request& Request) const;
	bool IsValid() const;
	void HandleResponse(FHttpResponsePtr HttpResponse, bool bSucceeded, Response& InOutResponse) const;

	FString Url;
	TMap<FString,FString> AdditionalHeaderParams;
	mutable FHttpRetrySystem::FManager* RetryManager = nullptr;
	mutable TUniquePtr<HttpRetryManager> DefaultRetryManager;
};

}
