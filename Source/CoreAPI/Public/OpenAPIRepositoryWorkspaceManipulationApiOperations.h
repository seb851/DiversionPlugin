// Copyright 2024 Diversion Company, Inc. All Rights Reserved.
/**
 * Diversion Core API
 * Definition of the Core API used to access low-level functionality of Diversion
 *
 * OpenAPI spec version: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "OpenAPIBaseModel.h"
#include "OpenAPIRepositoryWorkspaceManipulationApi.h"

#include "OpenAPICherryPickStatus.h"
#include "OpenAPIClientUpdateResults.h"
#include "OpenAPIClientUpdates.h"
#include "OpenAPIError.h"
#include "OpenAPIMergeId.h"
#include "OpenAPINeedLogsOutput.h"
#include "OpenAPINewResourceId.h"
#include "OpenAPINewWorkspace.h"
#include "OpenAPIRefsFilesStatus.h"
#include "OpenAPIResetStatus.h"
#include "OpenAPISrcHandlersv2WorkspaceCherryPickRequest.h"
#include "OpenAPISrcHandlersv2WorkspaceGetUploadingAgents200Response.h"
#include "OpenAPISrcHandlersv2WorkspaceListAllWorkspaces200Response.h"
#include "OpenAPISrcHandlersv2WorkspaceResetRequest.h"
#include "OpenAPIWorkspace.h"
#include "OpenAPIWorkspaceCheckout.h"
#include "OpenAPIWorkspacePreferences.h"
#include "OpenAPIWorkspaceRename.h"
#include "OpenAPIWorkspaceStatus.h"
#include "OpenAPIWorkspaceUpdates.h"

namespace CoreAPI
{

/* Apply a batch of updates to the workspace

*/
class COREAPI_API OpenAPIRepositoryWorkspaceManipulationApi::SrcHandlersv2WorkspaceApplyClientUpdatesRequest : public Request
{
public:
    virtual ~SrcHandlersv2WorkspaceApplyClientUpdatesRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The repo ID of the repository. Repo _name_ can be used instead of the ID, but usage of ID for permanent linking and API requests is preferred. */
	FString RepoId;
	/* The repo ID of the workspace. */
	FString WorkspaceId;
	/* The unique id of the client making this request */
	FString XDvClientId;
	OpenAPIClientUpdates OpenAPIClientUpdates;
	/* Indicating that the client has unfinished uploads */
	TOptional<bool> XDvHasUploads;
	/* Client's host name */
	TOptional<FString> XDvHostName;
};

class COREAPI_API OpenAPIRepositoryWorkspaceManipulationApi::SrcHandlersv2WorkspaceApplyClientUpdatesResponse : public Response
{
public:
    virtual ~SrcHandlersv2WorkspaceApplyClientUpdatesResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIClientUpdateResults Content;
};

/* Workspace checkout ref
 *
 * Set the workspace to follow a different branch or commit (checkout). Currently supports only moving to a branch with an identical commit as the workspace&#39;s current branch, or moving to any branch/commit if the workspace has no working changes.
*/
class COREAPI_API OpenAPIRepositoryWorkspaceManipulationApi::SrcHandlersv2WorkspaceCheckoutRequest : public Request
{
public:
    virtual ~SrcHandlersv2WorkspaceCheckoutRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The repo ID of the repository. Repo _name_ can be used instead of the ID, but usage of ID for permanent linking and API requests is preferred. */
	FString RepoId;
	/* The repo ID of the workspace. */
	FString WorkspaceId;
	OpenAPIWorkspaceCheckout OpenAPIWorkspaceCheckout;
};

class COREAPI_API OpenAPIRepositoryWorkspaceManipulationApi::SrcHandlersv2WorkspaceCheckoutResponse : public Response
{
public:
    virtual ~SrcHandlersv2WorkspaceCheckoutResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    
};

/* Cherry-pick a commit into the workspace

*/
class COREAPI_API OpenAPIRepositoryWorkspaceManipulationApi::SrcHandlersv2WorkspaceCherryPickRequest : public Request
{
public:
    virtual ~SrcHandlersv2WorkspaceCherryPickRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The repo ID of the repository. Repo _name_ can be used instead of the ID, but usage of ID for permanent linking and API requests is preferred. */
	FString RepoId;
	/* The repo ID of the workspace. */
	FString WorkspaceId;
	OpenAPISrcHandlersv2WorkspaceCherryPickRequest OpenAPISrcHandlersv2WorkspaceCherryPickRequest;
};

class COREAPI_API OpenAPIRepositoryWorkspaceManipulationApi::SrcHandlersv2WorkspaceCherryPickResponse : public Response
{
public:
    virtual ~SrcHandlersv2WorkspaceCherryPickResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPICherryPickStatus Content;
};

/* Create a workspace
 *
 * Create a new workspace
*/
class COREAPI_API OpenAPIRepositoryWorkspaceManipulationApi::SrcHandlersv2WorkspaceCreateWorkspaceRequest : public Request
{
public:
    virtual ~SrcHandlersv2WorkspaceCreateWorkspaceRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The repo ID of the repository. Repo _name_ can be used instead of the ID, but usage of ID for permanent linking and API requests is preferred. */
	FString RepoId;
	/* The unique id of the client making this request */
	FString XDvClientId;
	OpenAPINewWorkspace OpenAPINewWorkspace;
};

class COREAPI_API OpenAPIRepositoryWorkspaceManipulationApi::SrcHandlersv2WorkspaceCreateWorkspaceResponse : public Response
{
public:
    virtual ~SrcHandlersv2WorkspaceCreateWorkspaceResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPINewResourceId Content;
};

/* Deletes a workspace

*/
class COREAPI_API OpenAPIRepositoryWorkspaceManipulationApi::SrcHandlersv2WorkspaceDeleteRequest : public Request
{
public:
    virtual ~SrcHandlersv2WorkspaceDeleteRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The repo ID of the repository. Repo _name_ can be used instead of the ID, but usage of ID for permanent linking and API requests is preferred. */
	FString RepoId;
	/* The repo ID of the workspace. */
	FString WorkspaceId;
};

class COREAPI_API OpenAPIRepositoryWorkspaceManipulationApi::SrcHandlersv2WorkspaceDeleteResponse : public Response
{
public:
    virtual ~SrcHandlersv2WorkspaceDeleteResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    
};

/* Merge base branch into workspace

*/
class COREAPI_API OpenAPIRepositoryWorkspaceManipulationApi::SrcHandlersv2WorkspaceForwardWorkspaceRequest : public Request
{
public:
    virtual ~SrcHandlersv2WorkspaceForwardWorkspaceRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The repo ID of the repository. Repo _name_ can be used instead of the ID, but usage of ID for permanent linking and API requests is preferred. */
	FString RepoId;
	/* The repo ID of the workspace. */
	FString WorkspaceId;
};

class COREAPI_API OpenAPIRepositoryWorkspaceManipulationApi::SrcHandlersv2WorkspaceForwardWorkspaceResponse : public Response
{
public:
    virtual ~SrcHandlersv2WorkspaceForwardWorkspaceResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    
};

/* Should the agent upload the logs

*/
class COREAPI_API OpenAPIRepositoryWorkspaceManipulationApi::SrcHandlersv2WorkspaceGetClientShouldUploadLogsRequest : public Request
{
public:
    virtual ~SrcHandlersv2WorkspaceGetClientShouldUploadLogsRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The repo ID of the repository. Repo _name_ can be used instead of the ID, but usage of ID for permanent linking and API requests is preferred. */
	FString RepoId;
	/* The repo ID of the workspace. */
	FString WorkspaceId;
	/* The unique id of the client making this request */
	FString XDvClientId;
};

class COREAPI_API OpenAPIRepositoryWorkspaceManipulationApi::SrcHandlersv2WorkspaceGetClientShouldUploadLogsResponse : public Response
{
public:
    virtual ~SrcHandlersv2WorkspaceGetClientShouldUploadLogsResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPINeedLogsOutput Content;
};

/* Get list of potential clashes with files in other users&#39; workspaces and branches

*/
class COREAPI_API OpenAPIRepositoryWorkspaceManipulationApi::SrcHandlersv2WorkspaceGetOtherStatusesRequest : public Request
{
public:
    virtual ~SrcHandlersv2WorkspaceGetOtherStatusesRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The repo ID of the repository. Repo _name_ can be used instead of the ID, but usage of ID for permanent linking and API requests is preferred. */
	FString RepoId;
	/* The repo ID of the workspace. */
	FString WorkspaceId;
	/* A path prefix in the file tree to walk under */
	TOptional<FString> PathPrefix;
	/* A list of prefixes in the file tree to walk under */
	TOptional<TArray<FString>> PathPrefixes;
	/* Limit the number of entries returned from walk */
	TOptional<int32> Limit;
	/* Filters the first entries returned from walk */
	TOptional<int32> Skip;
	/* Specifies if to recursively iterate file tree to next directory levels */
	TOptional<bool> Recurse;
};

class COREAPI_API OpenAPIRepositoryWorkspaceManipulationApi::SrcHandlersv2WorkspaceGetOtherStatusesResponse : public Response
{
public:
    virtual ~SrcHandlersv2WorkspaceGetOtherStatusesResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIRefsFilesStatus Content;
};

/* Get preferences of the current user

*/
class COREAPI_API OpenAPIRepositoryWorkspaceManipulationApi::SrcHandlersv2WorkspaceGetPreferencesRequest : public Request
{
public:
    virtual ~SrcHandlersv2WorkspaceGetPreferencesRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The repo ID of the repository. Repo _name_ can be used instead of the ID, but usage of ID for permanent linking and API requests is preferred. */
	FString RepoId;
	/* The repo ID of the workspace. */
	FString WorkspaceId;
};

class COREAPI_API OpenAPIRepositoryWorkspaceManipulationApi::SrcHandlersv2WorkspaceGetPreferencesResponse : public Response
{
public:
    virtual ~SrcHandlersv2WorkspaceGetPreferencesResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIWorkspacePreferences Content;
};

/* Get status of changes in workspace

*/
class COREAPI_API OpenAPIRepositoryWorkspaceManipulationApi::SrcHandlersv2WorkspaceGetStatusRequest : public Request
{
public:
    virtual ~SrcHandlersv2WorkspaceGetStatusRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The repo ID of the repository. Repo _name_ can be used instead of the ID, but usage of ID for permanent linking and API requests is preferred. */
	FString RepoId;
	/* The repo ID of the workspace. */
	FString WorkspaceId;
	/* Should detail all the changed items in status response */
	TOptional<bool> DetailItems;
	/* Limit the number of entries returned from walk */
	TOptional<int32> Limit;
	/* Filters the first entries returned from walk */
	TOptional<int32> Skip;
	/* Specifies if to recursively iterate file tree to next directory levels */
	TOptional<bool> Recurse;
	/* A path prefix in the file tree to walk under */
	TOptional<FString> PathPrefix;
	/* Specifies if the results should be full or readable by a user */
	TOptional<bool> AllowTrim;
};

class COREAPI_API OpenAPIRepositoryWorkspaceManipulationApi::SrcHandlersv2WorkspaceGetStatusResponse : public Response
{
public:
    virtual ~SrcHandlersv2WorkspaceGetStatusResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIWorkspaceStatus Content;
};

/* Get a list agents that are currently uploading to this workspace

*/
class COREAPI_API OpenAPIRepositoryWorkspaceManipulationApi::SrcHandlersv2WorkspaceGetUploadingAgentsRequest : public Request
{
public:
    virtual ~SrcHandlersv2WorkspaceGetUploadingAgentsRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The repo ID of the repository. Repo _name_ can be used instead of the ID, but usage of ID for permanent linking and API requests is preferred. */
	FString RepoId;
	/* The repo ID of the workspace. */
	FString WorkspaceId;
};

class COREAPI_API OpenAPIRepositoryWorkspaceManipulationApi::SrcHandlersv2WorkspaceGetUploadingAgentsResponse : public Response
{
public:
    virtual ~SrcHandlersv2WorkspaceGetUploadingAgentsResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPISrcHandlersv2WorkspaceGetUploadingAgents200Response Content;
};

/* 
 *
 * Get a workspace object details
*/
class COREAPI_API OpenAPIRepositoryWorkspaceManipulationApi::SrcHandlersv2WorkspaceGetWorkspaceRequest : public Request
{
public:
    virtual ~SrcHandlersv2WorkspaceGetWorkspaceRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The repo ID of the repository. Repo _name_ can be used instead of the ID, but usage of ID for permanent linking and API requests is preferred. */
	FString RepoId;
	/* The repo ID of the workspace. */
	FString WorkspaceId;
};

class COREAPI_API OpenAPIRepositoryWorkspaceManipulationApi::SrcHandlersv2WorkspaceGetWorkspaceResponse : public Response
{
public:
    virtual ~SrcHandlersv2WorkspaceGetWorkspaceResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIWorkspace Content;
};

/* Get updates needed to be applied by the client to this workspace

*/
class COREAPI_API OpenAPIRepositoryWorkspaceManipulationApi::SrcHandlersv2WorkspaceGetWorkspaceUpdatesRequest : public Request
{
public:
    virtual ~SrcHandlersv2WorkspaceGetWorkspaceUpdatesRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The repo ID of the repository. Repo _name_ can be used instead of the ID, but usage of ID for permanent linking and API requests is preferred. */
	FString RepoId;
	/* The repo ID of the workspace. */
	FString WorkspaceId;
	/* The unique id of the client making this request */
	FString XDvClientId;
	/* Returns all change history above this ordinal ID. */
	int32 FromOrdinalId = 0;
	/* Indicating that the client has unfinished uploads */
	TOptional<bool> XDvHasUploads;
	/* Client's host name */
	TOptional<FString> XDvHostName;
};

class COREAPI_API OpenAPIRepositoryWorkspaceManipulationApi::SrcHandlersv2WorkspaceGetWorkspaceUpdatesResponse : public Response
{
public:
    virtual ~SrcHandlersv2WorkspaceGetWorkspaceUpdatesResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIWorkspaceUpdates Content;
};

/* 
 *
 * List user&#39;s workspaces
*/
class COREAPI_API OpenAPIRepositoryWorkspaceManipulationApi::SrcHandlersv2WorkspaceListAllWorkspacesRequest : public Request
{
public:
    virtual ~SrcHandlersv2WorkspaceListAllWorkspacesRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The repo ID of the repository. Repo _name_ can be used instead of the ID, but usage of ID for permanent linking and API requests is preferred. */
	FString RepoId;
};

class COREAPI_API OpenAPIRepositoryWorkspaceManipulationApi::SrcHandlersv2WorkspaceListAllWorkspacesResponse : public Response
{
public:
    virtual ~SrcHandlersv2WorkspaceListAllWorkspacesResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPISrcHandlersv2WorkspaceListAllWorkspaces200Response Content;
};

/* Update workspace name

*/
class COREAPI_API OpenAPIRepositoryWorkspaceManipulationApi::SrcHandlersv2WorkspaceRenameWorkspaceRequest : public Request
{
public:
    virtual ~SrcHandlersv2WorkspaceRenameWorkspaceRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The repo ID of the repository. Repo _name_ can be used instead of the ID, but usage of ID for permanent linking and API requests is preferred. */
	FString RepoId;
	/* The repo ID of the workspace. */
	FString WorkspaceId;
	OpenAPIWorkspaceRename OpenAPIWorkspaceRename;
};

class COREAPI_API OpenAPIRepositoryWorkspaceManipulationApi::SrcHandlersv2WorkspaceRenameWorkspaceResponse : public Response
{
public:
    virtual ~SrcHandlersv2WorkspaceRenameWorkspaceResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    
};

/* Reset changes in workspace

*/
class COREAPI_API OpenAPIRepositoryWorkspaceManipulationApi::SrcHandlersv2WorkspaceResetRequest : public Request
{
public:
    virtual ~SrcHandlersv2WorkspaceResetRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The repo ID of the repository. Repo _name_ can be used instead of the ID, but usage of ID for permanent linking and API requests is preferred. */
	FString RepoId;
	/* The repo ID of the workspace. */
	FString WorkspaceId;
	OpenAPISrcHandlersv2WorkspaceResetRequest OpenAPISrcHandlersv2WorkspaceResetRequest;
};

class COREAPI_API OpenAPIRepositoryWorkspaceManipulationApi::SrcHandlersv2WorkspaceResetResponse : public Response
{
public:
    virtual ~SrcHandlersv2WorkspaceResetResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIResetStatus Content;
};

/* Update the preferences of the current user

*/
class COREAPI_API OpenAPIRepositoryWorkspaceManipulationApi::SrcHandlersv2WorkspaceSetPreferencesRequest : public Request
{
public:
    virtual ~SrcHandlersv2WorkspaceSetPreferencesRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The repo ID of the repository. Repo _name_ can be used instead of the ID, but usage of ID for permanent linking and API requests is preferred. */
	FString RepoId;
	/* The repo ID of the workspace. */
	FString WorkspaceId;
	OpenAPIWorkspacePreferences OpenAPIWorkspacePreferences;
};

class COREAPI_API OpenAPIRepositoryWorkspaceManipulationApi::SrcHandlersv2WorkspaceSetPreferencesResponse : public Response
{
public:
    virtual ~SrcHandlersv2WorkspaceSetPreferencesResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    
};

/* Set a temporary indication that the workspace is currently uploading changes

*/
class COREAPI_API OpenAPIRepositoryWorkspaceManipulationApi::SrcHandlersv2WorkspaceSetUploadingRequest : public Request
{
public:
    virtual ~SrcHandlersv2WorkspaceSetUploadingRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The repo ID of the repository. Repo _name_ can be used instead of the ID, but usage of ID for permanent linking and API requests is preferred. */
	FString RepoId;
	/* The repo ID of the workspace. */
	FString WorkspaceId;
	/* The unique id of the client making this request */
	FString XDvClientId;
	/* Indicating that the client has unfinished uploads */
	TOptional<bool> XDvHasUploads;
	/* Client's host name */
	TOptional<FString> XDvHostName;
};

class COREAPI_API OpenAPIRepositoryWorkspaceManipulationApi::SrcHandlersv2WorkspaceSetUploadingResponse : public Response
{
public:
    virtual ~SrcHandlersv2WorkspaceSetUploadingResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    
};

}
