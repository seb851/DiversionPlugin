// Copyright 2024 Diversion Company, Inc. All Rights Reserved.
/**
 * Diversion Core API
 * Definition of the Core API used to access low-level functionality of Diversion
 *
 * OpenAPI spec version: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "CoreMinimal.h"
#include "OpenAPIBaseModel.h"

namespace CoreAPI
{

class COREAPI_API OpenAPIRepositoryManipulationApi : public TSharedFromThis<OpenAPIRepositoryManipulationApi>
{
public:
	OpenAPIRepositoryManipulationApi();
	~OpenAPIRepositoryManipulationApi();

	/* Sets the URL Endpoint.
	* Note: several fallback endpoints can be configured in request retry policies, see Request::SetShouldRetry */
	void SetURL(const FString& Url);

	/* Adds global header params to all requests */
	void AddHeaderParam(const FString& Key, const FString& Value);
	void ClearHeaderParams();

	/* Sets the retry manager to the user-defined retry manager. User must manage the lifetime of the retry manager.
	* If no retry manager is specified and a request needs retries, a default retry manager will be used.
	* See also: Request::SetShouldRetry */
	void SetHttpRetryManager(FHttpRetrySystem::FManager& RetryManager);
	FHttpRetrySystem::FManager& GetHttpRetryManager();

	class SrcHandlersIntegrationsGitImportImportInBackgroundRequest;
	class SrcHandlersIntegrationsGitImportImportInBackgroundResponse;
	class SrcHandlersIntegrationsGitImportImportVerifyUrlRequest;
	class SrcHandlersIntegrationsGitImportImportVerifyUrlResponse;
	class SrcHandlersIntegrationsGithubHandleRepoGithubWebhookRequest;
	class SrcHandlersIntegrationsGithubHandleRepoGithubWebhookResponse;
	class SrcHandlersv2CommitGetObjectHistoryRequest;
	class SrcHandlersv2CommitGetObjectHistoryResponse;
	class SrcHandlersv2FilesDownloadBlobRequest;
	class SrcHandlersv2FilesDownloadBlobResponse;
	class SrcHandlersv2FilesGetBlobRequest;
	class SrcHandlersv2FilesGetBlobResponse;
	class SrcHandlersv2FilesGetFileEntryRequest;
	class SrcHandlersv2FilesGetFileEntryResponse;
	class SrcHandlersv2RepoDeleteRequest;
	class SrcHandlersv2RepoDeleteResponse;
	class SrcHandlersv2RepoGetRequest;
	class SrcHandlersv2RepoGetResponse;
	class SrcHandlersv2TreeFiletreeRequest;
	class SrcHandlersv2TreeFiletreeResponse;
	
    DECLARE_DELEGATE_OneParam(FSrcHandlersIntegrationsGitImportImportInBackgroundDelegate, const SrcHandlersIntegrationsGitImportImportInBackgroundResponse&);
    DECLARE_DELEGATE_OneParam(FSrcHandlersIntegrationsGitImportImportVerifyUrlDelegate, const SrcHandlersIntegrationsGitImportImportVerifyUrlResponse&);
    DECLARE_DELEGATE_OneParam(FSrcHandlersIntegrationsGithubHandleRepoGithubWebhookDelegate, const SrcHandlersIntegrationsGithubHandleRepoGithubWebhookResponse&);
    DECLARE_DELEGATE_OneParam(FSrcHandlersv2CommitGetObjectHistoryDelegate, const SrcHandlersv2CommitGetObjectHistoryResponse&);
    DECLARE_DELEGATE_OneParam(FSrcHandlersv2FilesDownloadBlobDelegate, const SrcHandlersv2FilesDownloadBlobResponse&);
    DECLARE_DELEGATE_OneParam(FSrcHandlersv2FilesGetBlobDelegate, const SrcHandlersv2FilesGetBlobResponse&);
    DECLARE_DELEGATE_OneParam(FSrcHandlersv2FilesGetFileEntryDelegate, const SrcHandlersv2FilesGetFileEntryResponse&);
    DECLARE_DELEGATE_OneParam(FSrcHandlersv2RepoDeleteDelegate, const SrcHandlersv2RepoDeleteResponse&);
    DECLARE_DELEGATE_OneParam(FSrcHandlersv2RepoGetDelegate, const SrcHandlersv2RepoGetResponse&);
    DECLARE_DELEGATE_OneParam(FSrcHandlersv2TreeFiletreeDelegate, const SrcHandlersv2TreeFiletreeResponse&);
    
    FHttpRequestPtr SrcHandlersIntegrationsGitImportImportInBackground(const SrcHandlersIntegrationsGitImportImportInBackgroundRequest& Request, const FSrcHandlersIntegrationsGitImportImportInBackgroundDelegate& Delegate = FSrcHandlersIntegrationsGitImportImportInBackgroundDelegate(), float InTimeoutSecs = -1.f) const;
    FHttpRequestPtr SrcHandlersIntegrationsGitImportImportVerifyUrl(const SrcHandlersIntegrationsGitImportImportVerifyUrlRequest& Request, const FSrcHandlersIntegrationsGitImportImportVerifyUrlDelegate& Delegate = FSrcHandlersIntegrationsGitImportImportVerifyUrlDelegate(), float InTimeoutSecs = -1.f) const;
    FHttpRequestPtr SrcHandlersIntegrationsGithubHandleRepoGithubWebhook(const SrcHandlersIntegrationsGithubHandleRepoGithubWebhookRequest& Request, const FSrcHandlersIntegrationsGithubHandleRepoGithubWebhookDelegate& Delegate = FSrcHandlersIntegrationsGithubHandleRepoGithubWebhookDelegate(), float InTimeoutSecs = -1.f) const;
    FHttpRequestPtr SrcHandlersv2CommitGetObjectHistory(const SrcHandlersv2CommitGetObjectHistoryRequest& Request, const FSrcHandlersv2CommitGetObjectHistoryDelegate& Delegate = FSrcHandlersv2CommitGetObjectHistoryDelegate(), float InTimeoutSecs = -1.f) const;
    FHttpRequestPtr SrcHandlersv2FilesDownloadBlob(const SrcHandlersv2FilesDownloadBlobRequest& Request, const FSrcHandlersv2FilesDownloadBlobDelegate& Delegate = FSrcHandlersv2FilesDownloadBlobDelegate(), float InTimeoutSecs = -1.f) const;
    FHttpRequestPtr SrcHandlersv2FilesGetBlob(const SrcHandlersv2FilesGetBlobRequest& Request, const FSrcHandlersv2FilesGetBlobDelegate& Delegate = FSrcHandlersv2FilesGetBlobDelegate(), float InTimeoutSecs = -1.f) const;
    FHttpRequestPtr SrcHandlersv2FilesGetFileEntry(const SrcHandlersv2FilesGetFileEntryRequest& Request, const FSrcHandlersv2FilesGetFileEntryDelegate& Delegate = FSrcHandlersv2FilesGetFileEntryDelegate(), float InTimeoutSecs = -1.f) const;
    FHttpRequestPtr SrcHandlersv2RepoDelete(const SrcHandlersv2RepoDeleteRequest& Request, const FSrcHandlersv2RepoDeleteDelegate& Delegate = FSrcHandlersv2RepoDeleteDelegate(), float InTimeoutSecs = -1.f) const;
    FHttpRequestPtr SrcHandlersv2RepoGet(const SrcHandlersv2RepoGetRequest& Request, const FSrcHandlersv2RepoGetDelegate& Delegate = FSrcHandlersv2RepoGetDelegate(), float InTimeoutSecs = -1.f) const;
    FHttpRequestPtr SrcHandlersv2TreeFiletree(const SrcHandlersv2TreeFiletreeRequest& Request, const FSrcHandlersv2TreeFiletreeDelegate& Delegate = FSrcHandlersv2TreeFiletreeDelegate(), float InTimeoutSecs = -1.f) const;
    
private:
    void OnSrcHandlersIntegrationsGitImportImportInBackgroundResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSrcHandlersIntegrationsGitImportImportInBackgroundDelegate Delegate) const;
    void OnSrcHandlersIntegrationsGitImportImportVerifyUrlResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSrcHandlersIntegrationsGitImportImportVerifyUrlDelegate Delegate) const;
    void OnSrcHandlersIntegrationsGithubHandleRepoGithubWebhookResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSrcHandlersIntegrationsGithubHandleRepoGithubWebhookDelegate Delegate) const;
    void OnSrcHandlersv2CommitGetObjectHistoryResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSrcHandlersv2CommitGetObjectHistoryDelegate Delegate) const;
    void OnSrcHandlersv2FilesDownloadBlobResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSrcHandlersv2FilesDownloadBlobDelegate Delegate, const FString InResponseFilePath) const;
    void OnSrcHandlersv2FilesGetBlobResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSrcHandlersv2FilesGetBlobDelegate Delegate, const FString InResponseFilePath) const;
    void OnSrcHandlersv2FilesGetFileEntryResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSrcHandlersv2FilesGetFileEntryDelegate Delegate) const;
    void OnSrcHandlersv2RepoDeleteResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSrcHandlersv2RepoDeleteDelegate Delegate) const;
    void OnSrcHandlersv2RepoGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSrcHandlersv2RepoGetDelegate Delegate) const;
    void OnSrcHandlersv2TreeFiletreeResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSrcHandlersv2TreeFiletreeDelegate Delegate) const;
    
	FHttpRequestRef CreateHttpRequest(const Request& Request) const;
	bool IsValid() const;
	void HandleResponse(FHttpResponsePtr HttpResponse, bool bSucceeded, Response& InOutResponse) const;

	FString Url;
	TMap<FString,FString> AdditionalHeaderParams;
	mutable FHttpRetrySystem::FManager* RetryManager = nullptr;
	mutable TUniquePtr<HttpRetryManager> DefaultRetryManager;
};

}
