// Copyright 2024 Diversion Company, Inc. All Rights Reserved.
/**
 * Diversion Core API
 * Definition of the Core API used to access low-level functionality of Diversion
 *
 * OpenAPI spec version: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "OpenAPIBaseModel.h"
#include "OpenAPIRepositoryBranchManipulationApi.h"

#include "OpenAPIBranch.h"
#include "OpenAPIError.h"
#include "OpenAPINewBranch.h"
#include "OpenAPINewResourceId.h"
#include "OpenAPISrcHandlersv2BranchListAll200Response.h"
#include "OpenAPISrcHandlersv2BranchPatchRequest.h"

namespace CoreAPI
{

/* 
 *
 * Delete a branch
*/
class COREAPI_API OpenAPIRepositoryBranchManipulationApi::SrcHandlersv2BranchDeleteRequest : public Request
{
public:
    virtual ~SrcHandlersv2BranchDeleteRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The repo ID of the repository. Repo _name_ can be used instead of the ID, but usage of ID for permanent linking and API requests is preferred. */
	FString RepoId;
	/* Branch ID. Branch _name_ can be used instead of the ID, but storing and using branch ID in API requests is preferred. */
	FString BranchId;
};

class COREAPI_API OpenAPIRepositoryBranchManipulationApi::SrcHandlersv2BranchDeleteResponse : public Response
{
public:
    virtual ~SrcHandlersv2BranchDeleteResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    
};

/* Get the current branch details

*/
class COREAPI_API OpenAPIRepositoryBranchManipulationApi::SrcHandlersv2BranchGetRequest : public Request
{
public:
    virtual ~SrcHandlersv2BranchGetRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The repo ID of the repository. Repo _name_ can be used instead of the ID, but usage of ID for permanent linking and API requests is preferred. */
	FString RepoId;
	/* Branch ID. Branch _name_ can be used instead of the ID, but storing and using branch ID in API requests is preferred. */
	FString BranchId;
};

class COREAPI_API OpenAPIRepositoryBranchManipulationApi::SrcHandlersv2BranchGetResponse : public Response
{
public:
    virtual ~SrcHandlersv2BranchGetResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIBranch Content;
};

/* 
 *
 * Get a list of all branches in the repo.
*/
class COREAPI_API OpenAPIRepositoryBranchManipulationApi::SrcHandlersv2BranchListAllRequest : public Request
{
public:
    virtual ~SrcHandlersv2BranchListAllRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The repo ID of the repository. Repo _name_ can be used instead of the ID, but usage of ID for permanent linking and API requests is preferred. */
	FString RepoId;
};

class COREAPI_API OpenAPIRepositoryBranchManipulationApi::SrcHandlersv2BranchListAllResponse : public Response
{
public:
    virtual ~SrcHandlersv2BranchListAllResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPISrcHandlersv2BranchListAll200Response Content;
};

/* Update a branch

*/
class COREAPI_API OpenAPIRepositoryBranchManipulationApi::SrcHandlersv2BranchPatchRequest : public Request
{
public:
    virtual ~SrcHandlersv2BranchPatchRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The repo ID of the repository. Repo _name_ can be used instead of the ID, but usage of ID for permanent linking and API requests is preferred. */
	FString RepoId;
	/* Branch ID. Branch _name_ can be used instead of the ID, but storing and using branch ID in API requests is preferred. */
	FString BranchId;
	OpenAPISrcHandlersv2BranchPatchRequest OpenAPISrcHandlersv2BranchPatchRequest;
};

class COREAPI_API OpenAPIRepositoryBranchManipulationApi::SrcHandlersv2BranchPatchResponse : public Response
{
public:
    virtual ~SrcHandlersv2BranchPatchResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    
};

/* 
 *
 * Create a branch
*/
class COREAPI_API OpenAPIRepositoryBranchManipulationApi::SrcHandlersv2BranchPostRequest : public Request
{
public:
    virtual ~SrcHandlersv2BranchPostRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The repo ID of the repository. Repo _name_ can be used instead of the ID, but usage of ID for permanent linking and API requests is preferred. */
	FString RepoId;
	OpenAPINewBranch OpenAPINewBranch;
};

class COREAPI_API OpenAPIRepositoryBranchManipulationApi::SrcHandlersv2BranchPostResponse : public Response
{
public:
    virtual ~SrcHandlersv2BranchPostResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPINewResourceId Content;
};

}
