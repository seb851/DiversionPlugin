// Copyright 2024 Diversion Company, Inc. All Rights Reserved.
/**
 * Diversion Core API
 * Definition of the Core API used to access low-level functionality of Diversion
 *
 * OpenAPI spec version: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "OpenAPIBaseModel.h"
#include "OpenAPIFileMutationApi.h"

#include "OpenAPIHelpers.h"
#include "OpenAPIBlobUploadUrl.h"
#include "OpenAPIError.h"

namespace CoreAPI
{

/* Upload file to a new or existing path

*/
class COREAPI_API OpenAPIFileMutationApi::SrcHandlersv2FilesCreateOrUpdateFileRequest : public Request
{
public:
    virtual ~SrcHandlersv2FilesCreateOrUpdateFileRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The repo ID of the repository. Repo _name_ can be used instead of the ID, but usage of ID for permanent linking and API requests is preferred. */
	FString RepoId;
	/* An ID of a workspace, branch or commit. */
	FString RefId;
	/* A path to an item inside the repository. */
	FString Path;
	/* The unique id of the client making this request */
	FString XDvClientId;
	/* The file mode (as Unix mode) */
	int32 Mode = 0;
	/* The file's modification time in seconds since epoch */
	int64 Mtime = 0;
	/* An optional storage type for async upload. */
	TOptional<int32> StorageBackend;
	/* An optional storage uri to be sent along storage_backend. */
	TOptional<FString> StorageUri;
	/* Blob size in bytes */
	TOptional<int64> Size;
	/* A sha1 hexdigest */
	TOptional<FString> Sha1;
	/* Blob binary contents, if the file is a blob and if alternative storage solution was not used. */
	TOptional<FString> Body;
};

class COREAPI_API OpenAPIFileMutationApi::SrcHandlersv2FilesCreateOrUpdateFileResponse : public Response
{
public:
    virtual ~SrcHandlersv2FilesCreateOrUpdateFileResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    
};

/* Delete a file from an existing path

*/
class COREAPI_API OpenAPIFileMutationApi::SrcHandlersv2FilesDeleteFileRequest : public Request
{
public:
    virtual ~SrcHandlersv2FilesDeleteFileRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The repo ID of the repository. Repo _name_ can be used instead of the ID, but usage of ID for permanent linking and API requests is preferred. */
	FString RepoId;
	/* An ID of a workspace, branch or commit. */
	FString RefId;
	/* A path to an item inside the repository. */
	FString Path;
	/* The unique id of the client making this request */
	FString XDvClientId;
};

class COREAPI_API OpenAPIFileMutationApi::SrcHandlersv2FilesDeleteFileResponse : public Response
{
public:
    virtual ~SrcHandlersv2FilesDeleteFileResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    
};

/* Request an upload link for async blob upload from client side

*/
class COREAPI_API OpenAPIFileMutationApi::SrcHandlersv2FilesGetBlobUploadLinkRequest : public Request
{
public:
    virtual ~SrcHandlersv2FilesGetBlobUploadLinkRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The repo ID of the repository. Repo _name_ can be used instead of the ID, but usage of ID for permanent linking and API requests is preferred. */
	FString RepoId;
	/* A sha1 hexdigest */
	TOptional<FString> Sha1;
};

class COREAPI_API OpenAPIFileMutationApi::SrcHandlersv2FilesGetBlobUploadLinkResponse : public Response
{
public:
    virtual ~SrcHandlersv2FilesGetBlobUploadLinkResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIBlobUploadUrl Content;
};

/* Move a file to a different path

*/
class COREAPI_API OpenAPIFileMutationApi::SrcHandlersv2FilesMoveFileRequest : public Request
{
public:
    virtual ~SrcHandlersv2FilesMoveFileRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The repo ID of the repository. Repo _name_ can be used instead of the ID, but usage of ID for permanent linking and API requests is preferred. */
	FString RepoId;
	/* An ID of a workspace, branch or commit. */
	FString RefId;
	/* A path to an item inside the repository. */
	FString Path;
	/* The new path to where the file has moved */
	FString NewPath;
	/* The unique id of the client making this request */
	FString XDvClientId;
};

class COREAPI_API OpenAPIFileMutationApi::SrcHandlersv2FilesMoveFileResponse : public Response
{
public:
    virtual ~SrcHandlersv2FilesMoveFileResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    
};

}
