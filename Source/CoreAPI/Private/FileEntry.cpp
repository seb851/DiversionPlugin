// Copyright 2024 Diversion Company, Inc. All Rights Reserved.
/**
 * Diversion Core API
 * Definition of the Core API used to access low-level functionality of Diversion
 *
 * The version of the OpenAPI document: 0.2.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.10.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "JsonBody.h"
#include "FileEntry.h"

namespace Diversion {
namespace CoreAPI {
namespace Model {



void FileEntry::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("path")); WriteJsonValue(Writer, mPath);
	if (mPrev_path.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("prev_path")); WriteJsonValue(Writer, mPrev_path.GetValue());
	}
	if (mHash.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("hash")); WriteJsonValue(Writer, mHash.GetValue());
	}
	if (mPrev_hash.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("prev_hash")); WriteJsonValue(Writer, mPrev_hash.GetValue());
	}
	Writer->WriteIdentifierPrefix(TEXT("status")); WriteJsonValue(Writer, mStatus);
	Writer->WriteIdentifierPrefix(TEXT("mode")); WriteJsonValue(Writer, mMode);
	if (mMtime.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("mtime")); WriteJsonValue(Writer, mMtime.GetValue());
	}
	if (mBlob.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("blob")); WriteJsonValue(Writer, mBlob.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool FileEntry::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{

	const TSharedPtr<FJsonObject>* InnerGeneratorOpenAPIObject;
	if (!JsonValue->TryGetObject(InnerGeneratorOpenAPIObject))
		return false;

	bool ParseSuccess = true;

    

	ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("path"), mPath);
    ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("prev_path"), mPrev_path);
    ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("hash"), mHash);
    ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("prev_hash"), mPrev_hash);
	ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("status"), mStatus);
	ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("mode"), mMode);
    ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("mtime"), mMtime);
    ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("blob"), mBlob);


	return ParseSuccess;
}


}
}
}

