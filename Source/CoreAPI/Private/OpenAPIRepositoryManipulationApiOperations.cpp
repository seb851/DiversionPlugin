// Copyright 2024 Diversion Company, Inc. All Rights Reserved.
/**
 * Diversion Core API
 * Definition of the Core API used to access low-level functionality of Diversion
 *
 * OpenAPI spec version: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIRepositoryManipulationApiOperations.h"

#include "CoreAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Dom/JsonObject.h"
#include "Templates/SharedPointer.h"
#include "HttpModule.h"
#include "PlatformHttp.h"

namespace CoreAPI
{

FString OpenAPIRepositoryManipulationApi::SrcHandlersIntegrationsGitImportImportInBackgroundRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("repo_id"), FStringFormatArg(ToUrlString(RepoId)) } };

	FString InnerGeneratorOpenAPIPath = FString::Format(TEXT("/repos/{repo_id}/import"), PathParams);

	return InnerGeneratorOpenAPIPath;
}

void OpenAPIRepositoryManipulationApi::SrcHandlersIntegrationsGitImportImportInBackgroundRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = { TEXT("application/json") };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("POST"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
		// Body parameters
		FString JsonBody;
		JsonWriter Writer = TJsonWriterFactory<>::Create(&JsonBody);

		if (OpenAPIGitRepoImport.IsSet())
		{
			WriteJsonValue(Writer, OpenAPIGitRepoImport.GetValue());
		}
		Writer->Close();

		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/json; charset=utf-8"));
		HttpRequest->SetContentAsString(JsonBody);
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
		UE_LOG(LogCoreAPI, Error, TEXT("Body parameter (OpenAPIGitRepoImport) was ignored, not supported in multipart form"));
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
		UE_LOG(LogCoreAPI, Error, TEXT("Body parameter (OpenAPIGitRepoImport) was ignored, not supported in urlencoded requests"));
	}
	else
	{
		UE_LOG(LogCoreAPI, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void OpenAPIRepositoryManipulationApi::SrcHandlersIntegrationsGitImportImportInBackgroundResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 202:
		SetResponseString(TEXT("Import started asynchronously. Poll the repo until it shows a default branch."));
		break;
	case 409:
		SetResponseString(TEXT("Repo is not empty or is already synced with another URL."));
		break;
	case 422:
		SetResponseString(TEXT("Repo credentials are not set and therefore it cannot be imported."));
		break;
	case 0:
	default:
		SetResponseString(TEXT("An error occurred"));
		break;
	}
}

bool OpenAPIRepositoryManipulationApi::SrcHandlersIntegrationsGitImportImportInBackgroundResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return true;
}

FString OpenAPIRepositoryManipulationApi::SrcHandlersIntegrationsGitImportImportVerifyUrlRequest::ComputePath() const
{
	FString InnerGeneratorOpenAPIPath(TEXT("/repos/import/check"));
	return InnerGeneratorOpenAPIPath;
}

void OpenAPIRepositoryManipulationApi::SrcHandlersIntegrationsGitImportImportVerifyUrlRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = { TEXT("application/json") };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("POST"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
		// Body parameters
		FString JsonBody;
		JsonWriter Writer = TJsonWriterFactory<>::Create(&JsonBody);

		if (OpenAPIGitRepoImport.IsSet())
		{
			WriteJsonValue(Writer, OpenAPIGitRepoImport.GetValue());
		}
		Writer->Close();

		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/json; charset=utf-8"));
		HttpRequest->SetContentAsString(JsonBody);
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
		UE_LOG(LogCoreAPI, Error, TEXT("Body parameter (OpenAPIGitRepoImport) was ignored, not supported in multipart form"));
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
		UE_LOG(LogCoreAPI, Error, TEXT("Body parameter (OpenAPIGitRepoImport) was ignored, not supported in urlencoded requests"));
	}
	else
	{
		UE_LOG(LogCoreAPI, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void OpenAPIRepositoryManipulationApi::SrcHandlersIntegrationsGitImportImportVerifyUrlResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 204:
		SetResponseString(TEXT("Git repo can be imported."));
		break;
	case 422:
		SetResponseString(TEXT("Repo credentials are not set and therefore it cannot be imported."));
		break;
	case 0:
	default:
		SetResponseString(TEXT("An error occurred"));
		break;
	}
}

bool OpenAPIRepositoryManipulationApi::SrcHandlersIntegrationsGitImportImportVerifyUrlResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return true;
}

FString OpenAPIRepositoryManipulationApi::SrcHandlersIntegrationsGithubHandleRepoGithubWebhookRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("repo_id"), FStringFormatArg(ToUrlString(RepoId)) } };

	FString InnerGeneratorOpenAPIPath = FString::Format(TEXT("/repos/{repo_id}/sync"), PathParams);

	return InnerGeneratorOpenAPIPath;
}

void OpenAPIRepositoryManipulationApi::SrcHandlersIntegrationsGithubHandleRepoGithubWebhookRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("POST"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
	}
	else
	{
		UE_LOG(LogCoreAPI, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void OpenAPIRepositoryManipulationApi::SrcHandlersIntegrationsGithubHandleRepoGithubWebhookResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 202:
		SetResponseString(TEXT("Sync started asynchronously."));
		break;
	case 0:
	default:
		SetResponseString(TEXT("An error occurred"));
		break;
	}
}

bool OpenAPIRepositoryManipulationApi::SrcHandlersIntegrationsGithubHandleRepoGithubWebhookResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return true;
}

FString OpenAPIRepositoryManipulationApi::SrcHandlersv2CommitGetObjectHistoryRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("repo_id"), FStringFormatArg(ToUrlString(RepoId)) },
	{ TEXT("ref_id"), FStringFormatArg(ToUrlString(RefId)) },
	{ TEXT("path"), FStringFormatArg(ToUrlString(Path)) } };

	FString InnerGeneratorOpenAPIPath = FString::Format(TEXT("/repos/{repo_id}/files/history/{ref_id}/{path}"), PathParams);

	TArray<FString> QueryParams;
	if(Limit.IsSet())
	{
		QueryParams.Add(FString(TEXT("limit=")) + ToUrlString(Limit.GetValue()));
	}
	if(Skip.IsSet())
	{
		QueryParams.Add(FString(TEXT("skip=")) + ToUrlString(Skip.GetValue()));
	}
	InnerGeneratorOpenAPIPath += TCHAR('?');
	InnerGeneratorOpenAPIPath += FString::Join(QueryParams, TEXT("&"));

	return InnerGeneratorOpenAPIPath;
}

void OpenAPIRepositoryManipulationApi::SrcHandlersv2CommitGetObjectHistoryRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void OpenAPIRepositoryManipulationApi::SrcHandlersv2CommitGetObjectHistoryResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("List of changes in the history of a versioned file"));
		break;
	case 404:
		SetResponseString(TEXT("The specified resource was not found"));
		break;
	case 0:
	default:
		SetResponseString(TEXT("An error occurred"));
		break;
	}
}

bool OpenAPIRepositoryManipulationApi::SrcHandlersv2CommitGetObjectHistoryResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIRepositoryManipulationApi::SrcHandlersv2FilesDownloadBlobRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("repo_id"), FStringFormatArg(ToUrlString(RepoId)) } };

	FString InnerGeneratorOpenAPIPath = FString::Format(TEXT("/repos/{repo_id}/blobs/download"), PathParams);

	TArray<FString> QueryParams;
	QueryParams.Add(FString(TEXT("storage_backend=")) + ToUrlString(StorageBackend));
	QueryParams.Add(FString(TEXT("storage_uri=")) + ToUrlString(StorageUri));
	InnerGeneratorOpenAPIPath += TCHAR('?');
	InnerGeneratorOpenAPIPath += FString::Join(QueryParams, TEXT("&"));

	return InnerGeneratorOpenAPIPath;
}

void OpenAPIRepositoryManipulationApi::SrcHandlersv2FilesDownloadBlobRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/octet-stream") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void OpenAPIRepositoryManipulationApi::SrcHandlersv2FilesDownloadBlobResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("File contents"));
		break;
	case 204:
		SetResponseString(TEXT("Redirect to file contents"));
		break;
	}
}

bool OpenAPIRepositoryManipulationApi::SrcHandlersv2FilesDownloadBlobResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	// Content is a file, no available JSON conversion
	return false;
}

FString OpenAPIRepositoryManipulationApi::SrcHandlersv2FilesGetBlobRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("repo_id"), FStringFormatArg(ToUrlString(RepoId)) },
	{ TEXT("ref_id"), FStringFormatArg(ToUrlString(RefId)) },
	{ TEXT("path"), FStringFormatArg(ToUrlString(Path)) } };

	FString InnerGeneratorOpenAPIPath = FString::Format(TEXT("/repos/{repo_id}/blobs/{ref_id}/{path}"), PathParams);

	return InnerGeneratorOpenAPIPath;
}

void OpenAPIRepositoryManipulationApi::SrcHandlersv2FilesGetBlobRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/octet-stream") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void OpenAPIRepositoryManipulationApi::SrcHandlersv2FilesGetBlobResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("File contents"));
		break;
	case 204:
		SetResponseString(TEXT("Redirect to file contents"));
		break;
	}
}

bool OpenAPIRepositoryManipulationApi::SrcHandlersv2FilesGetBlobResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	// Content is a file, no available JSON conversion
	return false;
}

FString OpenAPIRepositoryManipulationApi::SrcHandlersv2FilesGetFileEntryRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("repo_id"), FStringFormatArg(ToUrlString(RepoId)) },
	{ TEXT("ref_id"), FStringFormatArg(ToUrlString(RefId)) },
	{ TEXT("path"), FStringFormatArg(ToUrlString(Path)) } };

	FString InnerGeneratorOpenAPIPath = FString::Format(TEXT("/repos/{repo_id}/files/{ref_id}/{path}"), PathParams);

	return InnerGeneratorOpenAPIPath;
}

void OpenAPIRepositoryManipulationApi::SrcHandlersv2FilesGetFileEntryRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void OpenAPIRepositoryManipulationApi::SrcHandlersv2FilesGetFileEntryResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("File information"));
		break;
	case 404:
		SetResponseString(TEXT("The specified resource was not found"));
		break;
	case 0:
	default:
		SetResponseString(TEXT("An error occurred"));
		break;
	}
}

bool OpenAPIRepositoryManipulationApi::SrcHandlersv2FilesGetFileEntryResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIRepositoryManipulationApi::SrcHandlersv2RepoDeleteRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("repo_id"), FStringFormatArg(ToUrlString(RepoId)) } };

	FString InnerGeneratorOpenAPIPath = FString::Format(TEXT("/repos/{repo_id}"), PathParams);

	return InnerGeneratorOpenAPIPath;
}

void OpenAPIRepositoryManipulationApi::SrcHandlersv2RepoDeleteRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("DELETE"));

}

void OpenAPIRepositoryManipulationApi::SrcHandlersv2RepoDeleteResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 202:
		SetResponseString(TEXT("Repo deletion started asynchronously."));
		break;
	case 0:
	default:
		SetResponseString(TEXT("An error occurred"));
		break;
	}
}

bool OpenAPIRepositoryManipulationApi::SrcHandlersv2RepoDeleteResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return true;
}

FString OpenAPIRepositoryManipulationApi::SrcHandlersv2RepoGetRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("repo_id"), FStringFormatArg(ToUrlString(RepoId)) } };

	FString InnerGeneratorOpenAPIPath = FString::Format(TEXT("/repos/{repo_id}"), PathParams);

	return InnerGeneratorOpenAPIPath;
}

void OpenAPIRepositoryManipulationApi::SrcHandlersv2RepoGetRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void OpenAPIRepositoryManipulationApi::SrcHandlersv2RepoGetResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Repo object with the requested identifier"));
		break;
	case 0:
	default:
		SetResponseString(TEXT("An error occurred"));
		break;
	}
}

bool OpenAPIRepositoryManipulationApi::SrcHandlersv2RepoGetResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIRepositoryManipulationApi::SrcHandlersv2TreeFiletreeRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("repo_id"), FStringFormatArg(ToUrlString(RepoId)) },
	{ TEXT("ref_id"), FStringFormatArg(ToUrlString(RefId)) } };

	FString InnerGeneratorOpenAPIPath = FString::Format(TEXT("/repos/{repo_id}/trees/{ref_id}"), PathParams);

	TArray<FString> QueryParams;
	if(Path.IsSet())
	{
		QueryParams.Add(FString(TEXT("path=")) + ToUrlString(Path.GetValue()));
	}
	if(Recurse.IsSet())
	{
		QueryParams.Add(FString(TEXT("recurse=")) + ToUrlString(Recurse.GetValue()));
	}
	if(Skip.IsSet())
	{
		QueryParams.Add(FString(TEXT("skip=")) + ToUrlString(Skip.GetValue()));
	}
	if(Limit.IsSet())
	{
		QueryParams.Add(FString(TEXT("limit=")) + ToUrlString(Limit.GetValue()));
	}
	if(Offset.IsSet())
	{
		QueryParams.Add(FString(TEXT("offset=")) + ToUrlString(Offset.GetValue()));
	}
	if(IncludeDeleted.IsSet())
	{
		QueryParams.Add(FString(TEXT("include_deleted=")) + ToUrlString(IncludeDeleted.GetValue()));
	}
	if(WorkspaceJournalOrdinalId.IsSet())
	{
		QueryParams.Add(FString(TEXT("workspace_journal_ordinal_id=")) + ToUrlString(WorkspaceJournalOrdinalId.GetValue()));
	}
	if(ItemNameQuery.IsSet())
	{
		QueryParams.Add(FString(TEXT("item_name_query=")) + ToUrlString(ItemNameQuery.GetValue()));
	}
	if(DirsOnly.IsSet())
	{
		QueryParams.Add(FString(TEXT("dirs_only=")) + ToUrlString(DirsOnly.GetValue()));
	}
	if(UseSelectiveSync.IsSet())
	{
		QueryParams.Add(FString(TEXT("use_selective_sync=")) + ToUrlString(UseSelectiveSync.GetValue()));
	}
	if(MaxDepth.IsSet())
	{
		QueryParams.Add(FString(TEXT("max_depth=")) + ToUrlString(MaxDepth.GetValue()));
	}
	if(IgnoreJournalOrdinalDiff.IsSet())
	{
		QueryParams.Add(FString(TEXT("ignore_journal_ordinal_diff=")) + ToUrlString(IgnoreJournalOrdinalDiff.GetValue()));
	}
	InnerGeneratorOpenAPIPath += TCHAR('?');
	InnerGeneratorOpenAPIPath += FString::Join(QueryParams, TEXT("&"));

	return InnerGeneratorOpenAPIPath;
}

void OpenAPIRepositoryManipulationApi::SrcHandlersv2TreeFiletreeRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void OpenAPIRepositoryManipulationApi::SrcHandlersv2TreeFiletreeResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Success"));
		break;
	case 400:
		SetResponseString(TEXT("The request does not meet the required conditions"));
		break;
	case 404:
		SetResponseString(TEXT("The specified resource was not found"));
		break;
	case 412:
		SetResponseString(TEXT("The specified resource is no longer up to date"));
		break;
	case 0:
	default:
		SetResponseString(TEXT("An error occurred"));
		break;
	}
}

bool OpenAPIRepositoryManipulationApi::SrcHandlersv2TreeFiletreeResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

}
