// Copyright 2024 Diversion Company, Inc. All Rights Reserved.
/**
 * Diversion Core API
 * Definition of the Core API used to access low-level functionality of Diversion
 *
 * OpenAPI spec version: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIRepositoryMergeManipulationApiOperations.h"

#include "CoreAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Dom/JsonObject.h"
#include "Templates/SharedPointer.h"
#include "HttpModule.h"
#include "PlatformHttp.h"

namespace CoreAPI
{

FString OpenAPIRepositoryMergeManipulationApi::SrcHandlersv2MergeAcceptSideRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("repo_id"), FStringFormatArg(ToUrlString(RepoId)) },
	{ TEXT("merge_id"), FStringFormatArg(ToUrlString(MergeId)) },
	{ TEXT("conflict_id"), FStringFormatArg(ToUrlString(ConflictId)) } };

	FString InnerGeneratorOpenAPIPath = FString::Format(TEXT("/repos/{repo_id}/merges/{merge_id}/conflicts/{conflict_id}/accept"), PathParams);

	TArray<FString> QueryParams;
	QueryParams.Add(FString(TEXT("index_id=")) + ToUrlString(IndexId));
	InnerGeneratorOpenAPIPath += TCHAR('?');
	InnerGeneratorOpenAPIPath += FString::Join(QueryParams, TEXT("&"));

	return InnerGeneratorOpenAPIPath;
}

void OpenAPIRepositoryMergeManipulationApi::SrcHandlersv2MergeAcceptSideRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = {  };

	HttpRequest->SetVerb(TEXT("POST"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
	}
	else
	{
		UE_LOG(LogCoreAPI, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void OpenAPIRepositoryMergeManipulationApi::SrcHandlersv2MergeAcceptSideResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Request completed successfully"));
		break;
	}
}

bool OpenAPIRepositoryMergeManipulationApi::SrcHandlersv2MergeAcceptSideResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return true;
}

FString OpenAPIRepositoryMergeManipulationApi::SrcHandlersv2MergeCloseMergeRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("repo_id"), FStringFormatArg(ToUrlString(RepoId)) },
	{ TEXT("merge_id"), FStringFormatArg(ToUrlString(MergeId)) } };

	FString InnerGeneratorOpenAPIPath = FString::Format(TEXT("/repos/{repo_id}/merges/{merge_id}/close"), PathParams);

	return InnerGeneratorOpenAPIPath;
}

void OpenAPIRepositoryMergeManipulationApi::SrcHandlersv2MergeCloseMergeRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("POST"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
	}
	else
	{
		UE_LOG(LogCoreAPI, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void OpenAPIRepositoryMergeManipulationApi::SrcHandlersv2MergeCloseMergeResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Request completed successfully"));
		break;
	case 403:
		SetResponseString(TEXT("Unauthorized"));
		break;
	case 404:
		SetResponseString(TEXT("The specified resource was not found"));
		break;
	case 503:
		SetResponseString(TEXT("Service unavailable"));
		break;
	}
}

bool OpenAPIRepositoryMergeManipulationApi::SrcHandlersv2MergeCloseMergeResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return true;
}

FString OpenAPIRepositoryMergeManipulationApi::SrcHandlersv2MergeFinalizeRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("repo_id"), FStringFormatArg(ToUrlString(RepoId)) },
	{ TEXT("merge_id"), FStringFormatArg(ToUrlString(MergeId)) } };

	FString InnerGeneratorOpenAPIPath = FString::Format(TEXT("/repos/{repo_id}/merges/{merge_id}"), PathParams);

	return InnerGeneratorOpenAPIPath;
}

void OpenAPIRepositoryMergeManipulationApi::SrcHandlersv2MergeFinalizeRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = { TEXT("application/json") };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("POST"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
		// Body parameters
		FString JsonBody;
		JsonWriter Writer = TJsonWriterFactory<>::Create(&JsonBody);

		if (OpenAPICommitMessage.IsSet())
		{
			WriteJsonValue(Writer, OpenAPICommitMessage.GetValue());
		}
		Writer->Close();

		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/json; charset=utf-8"));
		HttpRequest->SetContentAsString(JsonBody);
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
		UE_LOG(LogCoreAPI, Error, TEXT("Body parameter (OpenAPICommitMessage) was ignored, not supported in multipart form"));
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
		UE_LOG(LogCoreAPI, Error, TEXT("Body parameter (OpenAPICommitMessage) was ignored, not supported in urlencoded requests"));
	}
	else
	{
		UE_LOG(LogCoreAPI, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void OpenAPIRepositoryMergeManipulationApi::SrcHandlersv2MergeFinalizeResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Request completed successfully"));
		break;
	case 201:
		SetResponseString(TEXT("Resource created"));
		break;
	case 403:
		SetResponseString(TEXT("Unauthorized"));
		break;
	case 404:
		SetResponseString(TEXT("The specified resource was not found"));
		break;
	case 405:
		SetResponseString(TEXT("An error occurred"));
		break;
	case 503:
		SetResponseString(TEXT("Service unavailable"));
		break;
	}
}

bool OpenAPIRepositoryMergeManipulationApi::SrcHandlersv2MergeFinalizeResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return true;
}

FString OpenAPIRepositoryMergeManipulationApi::SrcHandlersv2MergeGetOpenMergeRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("repo_id"), FStringFormatArg(ToUrlString(RepoId)) },
	{ TEXT("merge_id"), FStringFormatArg(ToUrlString(MergeId)) } };

	FString InnerGeneratorOpenAPIPath = FString::Format(TEXT("/repos/{repo_id}/merges/{merge_id}"), PathParams);

	return InnerGeneratorOpenAPIPath;
}

void OpenAPIRepositoryMergeManipulationApi::SrcHandlersv2MergeGetOpenMergeRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void OpenAPIRepositoryMergeManipulationApi::SrcHandlersv2MergeGetOpenMergeResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("An object describing the merge."));
		break;
	case 404:
		SetResponseString(TEXT("The specified resource was not found"));
		break;
	}
}

bool OpenAPIRepositoryMergeManipulationApi::SrcHandlersv2MergeGetOpenMergeResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIRepositoryMergeManipulationApi::SrcHandlersv2MergeListOpenMergesRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("repo_id"), FStringFormatArg(ToUrlString(RepoId)) } };

	FString InnerGeneratorOpenAPIPath = FString::Format(TEXT("/repos/{repo_id}/merges"), PathParams);

	TArray<FString> QueryParams;
	if(BaseId.IsSet())
	{
		QueryParams.Add(FString(TEXT("base_id=")) + ToUrlString(BaseId.GetValue()));
	}
	if(OtherId.IsSet())
	{
		QueryParams.Add(FString(TEXT("other_id=")) + ToUrlString(OtherId.GetValue()));
	}
	InnerGeneratorOpenAPIPath += TCHAR('?');
	InnerGeneratorOpenAPIPath += FString::Join(QueryParams, TEXT("&"));

	return InnerGeneratorOpenAPIPath;
}

void OpenAPIRepositoryMergeManipulationApi::SrcHandlersv2MergeListOpenMergesRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void OpenAPIRepositoryMergeManipulationApi::SrcHandlersv2MergeListOpenMergesResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Success"));
		break;
	}
}

bool OpenAPIRepositoryMergeManipulationApi::SrcHandlersv2MergeListOpenMergesResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIRepositoryMergeManipulationApi::SrcHandlersv2MergeMergeRequestRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("repo_id"), FStringFormatArg(ToUrlString(RepoId)) } };

	FString InnerGeneratorOpenAPIPath = FString::Format(TEXT("/repos/{repo_id}/merge_request"), PathParams);

	TArray<FString> QueryParams;
	if(BaseId.IsSet())
	{
		QueryParams.Add(FString(TEXT("base_id=")) + ToUrlString(BaseId.GetValue()));
	}
	if(OtherId.IsSet())
	{
		QueryParams.Add(FString(TEXT("other_id=")) + ToUrlString(OtherId.GetValue()));
	}
	InnerGeneratorOpenAPIPath += TCHAR('?');
	InnerGeneratorOpenAPIPath += FString::Join(QueryParams, TEXT("&"));

	return InnerGeneratorOpenAPIPath;
}

void OpenAPIRepositoryMergeManipulationApi::SrcHandlersv2MergeMergeRequestRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void OpenAPIRepositoryMergeManipulationApi::SrcHandlersv2MergeMergeRequestResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("A URL to a webapp page showing the incoming changes in the future merge."));
		break;
	case 400:
		SetResponseString(TEXT("The request does not meet the required conditions"));
		break;
	}
}

bool OpenAPIRepositoryMergeManipulationApi::SrcHandlersv2MergeMergeRequestResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIRepositoryMergeManipulationApi::SrcHandlersv2MergePostRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("repo_id"), FStringFormatArg(ToUrlString(RepoId)) } };

	FString InnerGeneratorOpenAPIPath = FString::Format(TEXT("/repos/{repo_id}/merges"), PathParams);

	TArray<FString> QueryParams;
	if(BaseId.IsSet())
	{
		QueryParams.Add(FString(TEXT("base_id=")) + ToUrlString(BaseId.GetValue()));
	}
	if(OtherId.IsSet())
	{
		QueryParams.Add(FString(TEXT("other_id=")) + ToUrlString(OtherId.GetValue()));
	}
	InnerGeneratorOpenAPIPath += TCHAR('?');
	InnerGeneratorOpenAPIPath += FString::Join(QueryParams, TEXT("&"));

	return InnerGeneratorOpenAPIPath;
}

void OpenAPIRepositoryMergeManipulationApi::SrcHandlersv2MergePostRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("POST"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
	}
	else
	{
		UE_LOG(LogCoreAPI, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void OpenAPIRepositoryMergeManipulationApi::SrcHandlersv2MergePostResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Request completed successfully"));
		break;
	case 201:
		SetResponseString(TEXT("The merge into a branch was completed successfully, and the response contains the new commit ID"));
		break;
	case 202:
		SetResponseString(TEXT("The merge is in progress. It has merge conflicts requiring active input from the user for conflict resolution. The response contains a merge ID, which can be used for querying /repos/{repo_id}/merges/{merge_id}"));
		break;
	case 503:
		SetResponseString(TEXT("Service unavailable"));
		break;
	}
}

bool OpenAPIRepositoryMergeManipulationApi::SrcHandlersv2MergePostResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return true;
}

FString OpenAPIRepositoryMergeManipulationApi::SrcHandlersv2MergeSetResultRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("repo_id"), FStringFormatArg(ToUrlString(RepoId)) },
	{ TEXT("merge_id"), FStringFormatArg(ToUrlString(MergeId)) },
	{ TEXT("conflict_id"), FStringFormatArg(ToUrlString(ConflictId)) } };

	FString InnerGeneratorOpenAPIPath = FString::Format(TEXT("/repos/{repo_id}/merges/{merge_id}/conflicts/{conflict_id}"), PathParams);

	TArray<FString> QueryParams;
	if(Size.IsSet())
	{
		QueryParams.Add(FString(TEXT("size=")) + ToUrlString(Size.GetValue()));
	}
	if(Sha1.IsSet())
	{
		QueryParams.Add(FString(TEXT("sha1=")) + ToUrlString(Sha1.GetValue()));
	}
	if(StorageBackend.IsSet())
	{
		QueryParams.Add(FString(TEXT("storage_backend=")) + ToUrlString(StorageBackend.GetValue()));
	}
	if(StorageUri.IsSet())
	{
		QueryParams.Add(FString(TEXT("storage_uri=")) + ToUrlString(StorageUri.GetValue()));
	}
	QueryParams.Add(FString(TEXT("mode=")) + ToUrlString(Mode));
	if(Path.IsSet())
	{
		QueryParams.Add(FString(TEXT("path=")) + ToUrlString(Path.GetValue()));
	}
	InnerGeneratorOpenAPIPath += TCHAR('?');
	InnerGeneratorOpenAPIPath += FString::Join(QueryParams, TEXT("&"));

	return InnerGeneratorOpenAPIPath;
}

void OpenAPIRepositoryMergeManipulationApi::SrcHandlersv2MergeSetResultRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = { TEXT("application/octet-stream") };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("POST"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
		// Body parameters
		FString JsonBody;
		JsonWriter Writer = TJsonWriterFactory<>::Create(&JsonBody);

		WriteJsonValue(Writer, Body);
		Writer->Close();

		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/json; charset=utf-8"));
		HttpRequest->SetContentAsString(JsonBody);
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
		UE_LOG(LogCoreAPI, Error, TEXT("Body parameter (body) was ignored, not supported in multipart form"));
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
		UE_LOG(LogCoreAPI, Error, TEXT("Body parameter (body) was ignored, not supported in urlencoded requests"));
	}
	else
	{
		UE_LOG(LogCoreAPI, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void OpenAPIRepositoryMergeManipulationApi::SrcHandlersv2MergeSetResultResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Request completed successfully"));
		break;
	case 0:
	default:
		SetResponseString(TEXT("An error occurred"));
		break;
	}
}

bool OpenAPIRepositoryMergeManipulationApi::SrcHandlersv2MergeSetResultResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return true;
}

}
