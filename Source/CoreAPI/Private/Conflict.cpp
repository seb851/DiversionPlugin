// Copyright 2024 Diversion Company, Inc. All Rights Reserved.
/**
 * Diversion Core API
 * Definition of the Core API used to access low-level functionality of Diversion
 *
 * The version of the OpenAPI document: 0.2.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.10.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "JsonBody.h"
#include "Conflict.h"

namespace Diversion {
namespace CoreAPI {
namespace Model {



void Conflict::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("conflict_id")); WriteJsonValue(Writer, mConflict_id);
	Writer->WriteIdentifierPrefix(TEXT("is_resolved")); WriteJsonValue(Writer, mIs_resolved);
	if (mResolved_side.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("resolved_side")); WriteJsonValue(Writer, Conflict::EnumToString(mResolved_side.GetValue()));
	}
	Writer->WriteIdentifierPrefix(TEXT("base")); WriteJsonValue(Writer, mBase);
	Writer->WriteIdentifierPrefix(TEXT("other")); WriteJsonValue(Writer, mOther);
	if (mResult.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("result")); WriteJsonValue(Writer, mResult.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool Conflict::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{

	const TSharedPtr<FJsonObject>* InnerGeneratorOpenAPIObject;
	if (!JsonValue->TryGetObject(InnerGeneratorOpenAPIObject))
		return false;

	bool ParseSuccess = true;

    

	ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("conflict_id"), mConflict_id);
	ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("is_resolved"), mIs_resolved);
    // Reading the value into a string enum first
    TOptional<FString> Resolved_sideString;
    bool ParseEnumResolved_sideStringSuccess = TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("resolved_side"), Resolved_sideString);
    if (ParseEnumResolved_sideStringSuccess && Resolved_sideString.IsSet()) {
        ParseSuccess &= Conflict::EnumFromString(Resolved_sideString.GetValue(), mResolved_side);
    }
	ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("base"), mBase);
	ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("other"), mOther);
    ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("result"), mResult);


	return ParseSuccess;
}


FString Conflict::EnumToString(const TOptional<Resolved_sideEnum>& EnumValue) {
    if(!EnumValue.IsSet()) return TEXT("");
    switch (EnumValue.GetValue())
    {
    case Resolved_sideEnum::RESULT:
        return TEXT("RESULT");
    case Resolved_sideEnum::BASE:
        return TEXT("BASE");
    case Resolved_sideEnum::OTHER:
        return TEXT("OTHER");
    default:
        return TEXT("");
    }
}

bool Conflict::EnumFromString(const FString& EnumAsString, TOptional<Resolved_sideEnum>& EnumValue) {
    if(EnumAsString.IsEmpty()) return false;
    if(EnumAsString == TEXT("RESULT")) {
        EnumValue = Resolved_sideEnum::RESULT;
        return true;
    }
    if(EnumAsString == TEXT("BASE")) {
        EnumValue = Resolved_sideEnum::BASE;
        return true;
    }
    if(EnumAsString == TEXT("OTHER")) {
        EnumValue = Resolved_sideEnum::OTHER;
        return true;
    }

    return false;
}


}
}
}

