// Copyright 2024 Diversion Company, Inc. All Rights Reserved.
/**
 * Diversion Core API
 * Definition of the Core API used to access low-level functionality of Diversion
 *
 * OpenAPI spec version: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIRepositoryCommitManipulationApiOperations.h"

#include "CoreAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Dom/JsonObject.h"
#include "Templates/SharedPointer.h"
#include "HttpModule.h"
#include "PlatformHttp.h"

namespace CoreAPI
{

FString OpenAPIRepositoryCommitManipulationApi::SrcHandlersv2CommitGetRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("repo_id"), FStringFormatArg(ToUrlString(RepoId)) },
	{ TEXT("commit_id"), FStringFormatArg(ToUrlString(CommitId)) } };

	FString InnerGeneratorOpenAPIPath = FString::Format(TEXT("/repos/{repo_id}/commits/{commit_id}"), PathParams);

	return InnerGeneratorOpenAPIPath;
}

void OpenAPIRepositoryCommitManipulationApi::SrcHandlersv2CommitGetRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void OpenAPIRepositoryCommitManipulationApi::SrcHandlersv2CommitGetResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("An object describing a commit"));
		break;
	case 0:
	default:
		SetResponseString(TEXT("An error occurred"));
		break;
	}
}

bool OpenAPIRepositoryCommitManipulationApi::SrcHandlersv2CommitGetResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIRepositoryCommitManipulationApi::SrcHandlersv2CommitGetBulkRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("repo_id"), FStringFormatArg(ToUrlString(RepoId)) } };

	FString InnerGeneratorOpenAPIPath = FString::Format(TEXT("/repos/{repo_id}/commits/bulk"), PathParams);

	TArray<FString> QueryParams;
	QueryParams.Add(CollectionToUrlString_multi(RefIds, TEXT("ref_ids")));
	InnerGeneratorOpenAPIPath += TCHAR('?');
	InnerGeneratorOpenAPIPath += FString::Join(QueryParams, TEXT("&"));

	return InnerGeneratorOpenAPIPath;
}

void OpenAPIRepositoryCommitManipulationApi::SrcHandlersv2CommitGetBulkRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void OpenAPIRepositoryCommitManipulationApi::SrcHandlersv2CommitGetBulkResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("An object describing a mapping of a commit by its ID"));
		break;
	case 0:
	default:
		SetResponseString(TEXT("An error occurred"));
		break;
	}
}

bool OpenAPIRepositoryCommitManipulationApi::SrcHandlersv2CommitGetBulkResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIRepositoryCommitManipulationApi::SrcHandlersv2CommitListAllRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("repo_id"), FStringFormatArg(ToUrlString(RepoId)) } };

	FString InnerGeneratorOpenAPIPath = FString::Format(TEXT("/repos/{repo_id}/commits"), PathParams);

	TArray<FString> QueryParams;
	if(RefIds.IsSet())
	{
		QueryParams.Add(CollectionToUrlString_multi(RefIds.GetValue(), TEXT("ref_ids")));
	}
	if(Limit.IsSet())
	{
		QueryParams.Add(FString(TEXT("limit=")) + ToUrlString(Limit.GetValue()));
	}
	if(Skip.IsSet())
	{
		QueryParams.Add(FString(TEXT("skip=")) + ToUrlString(Skip.GetValue()));
	}
	if(Query.IsSet())
	{
		QueryParams.Add(FString(TEXT("query=")) + ToUrlString(Query.GetValue()));
	}
	InnerGeneratorOpenAPIPath += TCHAR('?');
	InnerGeneratorOpenAPIPath += FString::Join(QueryParams, TEXT("&"));

	return InnerGeneratorOpenAPIPath;
}

void OpenAPIRepositoryCommitManipulationApi::SrcHandlersv2CommitListAllRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void OpenAPIRepositoryCommitManipulationApi::SrcHandlersv2CommitListAllResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Success"));
		break;
	case 0:
	default:
		SetResponseString(TEXT("An error occurred"));
		break;
	}
}

bool OpenAPIRepositoryCommitManipulationApi::SrcHandlersv2CommitListAllResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIRepositoryCommitManipulationApi::SrcHandlersv2CommitPatchRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("repo_id"), FStringFormatArg(ToUrlString(RepoId)) },
	{ TEXT("commit_id"), FStringFormatArg(ToUrlString(CommitId)) } };

	FString InnerGeneratorOpenAPIPath = FString::Format(TEXT("/repos/{repo_id}/commits/{commit_id}"), PathParams);

	return InnerGeneratorOpenAPIPath;
}

void OpenAPIRepositoryCommitManipulationApi::SrcHandlersv2CommitPatchRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = { TEXT("application/json") };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("PATCH"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
		// Body parameters
		FString JsonBody;
		JsonWriter Writer = TJsonWriterFactory<>::Create(&JsonBody);

		WriteJsonValue(Writer, OpenAPICommitMessage);
		Writer->Close();

		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/json; charset=utf-8"));
		HttpRequest->SetContentAsString(JsonBody);
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
		UE_LOG(LogCoreAPI, Error, TEXT("Body parameter (OpenAPICommitMessage) was ignored, not supported in multipart form"));
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
		UE_LOG(LogCoreAPI, Error, TEXT("Body parameter (OpenAPICommitMessage) was ignored, not supported in urlencoded requests"));
	}
	else
	{
		UE_LOG(LogCoreAPI, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void OpenAPIRepositoryCommitManipulationApi::SrcHandlersv2CommitPatchResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Request completed successfully"));
		break;
	case 0:
	default:
		SetResponseString(TEXT("An error occurred"));
		break;
	}
}

bool OpenAPIRepositoryCommitManipulationApi::SrcHandlersv2CommitPatchResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIRepositoryCommitManipulationApi::SrcHandlersv2RevertRevertRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("repo_id"), FStringFormatArg(ToUrlString(RepoId)) } };

	FString InnerGeneratorOpenAPIPath = FString::Format(TEXT("/repos/{repo_id}/revert"), PathParams);

	TArray<FString> QueryParams;
	if(BaseId.IsSet())
	{
		QueryParams.Add(FString(TEXT("base_id=")) + ToUrlString(BaseId.GetValue()));
	}
	if(RevertRefId.IsSet())
	{
		QueryParams.Add(FString(TEXT("revert_ref_id=")) + ToUrlString(RevertRefId.GetValue()));
	}
	InnerGeneratorOpenAPIPath += TCHAR('?');
	InnerGeneratorOpenAPIPath += FString::Join(QueryParams, TEXT("&"));

	return InnerGeneratorOpenAPIPath;
}

void OpenAPIRepositoryCommitManipulationApi::SrcHandlersv2RevertRevertRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("POST"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
	}
	else
	{
		UE_LOG(LogCoreAPI, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void OpenAPIRepositoryCommitManipulationApi::SrcHandlersv2RevertRevertResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Request completed successfully"));
		break;
	case 201:
		SetResponseString(TEXT("The revert was completed successfully"));
		break;
	case 202:
		SetResponseString(TEXT("The revert is in progress. It has merge conflicts requiring active input from the user for conflict resolution. The response contains a merge ID, which can be used for querying /repos/{repo_id}/merges/{merge_id}"));
		break;
	case 400:
		SetResponseString(TEXT("The request does not meet the required conditions"));
		break;
	case 409:
		SetResponseString(TEXT("The workspace is not empty, cannot revert"));
		break;
	case 503:
		SetResponseString(TEXT("Service unavailable"));
		break;
	}
}

bool OpenAPIRepositoryCommitManipulationApi::SrcHandlersv2RevertRevertResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return true;
}

FString OpenAPIRepositoryCommitManipulationApi::SrcHandlersv2WorkspaceCommitWorkspaceRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("repo_id"), FStringFormatArg(ToUrlString(RepoId)) },
	{ TEXT("workspace_id"), FStringFormatArg(ToUrlString(WorkspaceId)) } };

	FString InnerGeneratorOpenAPIPath = FString::Format(TEXT("/repos/{repo_id}/workspaces/{workspace_id}/commit"), PathParams);

	return InnerGeneratorOpenAPIPath;
}

void OpenAPIRepositoryCommitManipulationApi::SrcHandlersv2WorkspaceCommitWorkspaceRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = { TEXT("application/json") };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("POST"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
		// Body parameters
		FString JsonBody;
		JsonWriter Writer = TJsonWriterFactory<>::Create(&JsonBody);

		WriteJsonValue(Writer, OpenAPICommitRequest);
		Writer->Close();

		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/json; charset=utf-8"));
		HttpRequest->SetContentAsString(JsonBody);
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
		UE_LOG(LogCoreAPI, Error, TEXT("Body parameter (OpenAPICommitRequest) was ignored, not supported in multipart form"));
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
		UE_LOG(LogCoreAPI, Error, TEXT("Body parameter (OpenAPICommitRequest) was ignored, not supported in urlencoded requests"));
	}
	else
	{
		UE_LOG(LogCoreAPI, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void OpenAPIRepositoryCommitManipulationApi::SrcHandlersv2WorkspaceCommitWorkspaceResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 201:
		SetResponseString(TEXT("Commit created"));
		break;
	case 200:
		SetResponseString(TEXT("Request completed successfully"));
		break;
	case 400:
		SetResponseString(TEXT("None of the commit paths exist"));
		break;
	case 412:
		SetResponseString(TEXT("The specified resource is no longer up to date"));
		break;
	case 409:
		SetResponseString(TEXT("Workspace contains conflicts"));
		break;
	case 503:
		SetResponseString(TEXT("Service unavailable"));
		break;
	case 522:
		SetResponseString(TEXT("Server service error"));
		break;
	case 0:
	default:
		SetResponseString(TEXT("An error occurred"));
		break;
	}
}

bool OpenAPIRepositoryCommitManipulationApi::SrcHandlersv2WorkspaceCommitWorkspaceResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return true;
}

}
