// Copyright 2024 Diversion Company, Inc. All Rights Reserved.
/**
 * Diversion Core API
 * Definition of the Core API used to access low-level functionality of Diversion
 *
 * The version of the OpenAPI document: 0.2.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.10.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "SupportApi.h"
#include "HTTPResult.h"
#include "JsonBody.h"

#include "Types.h"


namespace Diversion {
namespace CoreAPI {

using namespace Diversion::CoreAPI::Model;

SupportApi::SupportApi(TSharedPtr<DiversionHttp::FHttpRequestManager> InApiClient)
     : ApiClient(InApiClient) {}

SupportApi::~SupportApi() {}



THTTPResult<TVariant<void*>> SupportApi::SrcHandlersSupportErrorReport(TSharedPtr<ErrorReport> errorReport, 
        const FString& Token,
        const TMap<FString, FString>& Headers,
		int ConnectionTimeoutSeconds, int RequestTimeoutSeconds) const
{

    // verify the required parameter 'errorReport' is set
    if (errorReport == nullptr)
    {
        return THTTPResult<TVariant<void*>>::Failure(TEXT("Missing required parameter 'errorReport' when calling SupportApi->SrcHandlersSupportErrorReport"), 400, {});
    }

    FString URL = TEXT("/v0/support/error");

    TMap<FString, FString> localVarQueryParams;
    TMap<FString, FString> localVarFormParams;
    //TMap<FString, TSharedPtr<HttpContent>> localVarFileParams;

    
    TSet<FString> localVarResponseHttpContentTypes;

    FString localVarResponseHttpContentType;

    // use JSON if possible
    if (localVarResponseHttpContentTypes.Num() == 0)
    {
        localVarResponseHttpContentType = TEXT("application/json");
    }
    // JSON
    else if (localVarResponseHttpContentTypes.Contains(TEXT("application/json")))
    {
        localVarResponseHttpContentType = TEXT("application/json");
    }
    else
    {
        return THTTPResult<TVariant<void*>>::Failure(TEXT("SupportApi->SrcHandlersSupportErrorReport does not produce any supported media type"), 400, {});
    }

    // TODO: Add this to the headers
    //Headers[TEXT("Accept")] = localVarResponseHttpContentType;

    TSet<FString> localVarConsumeHttpContentTypes;
    localVarConsumeHttpContentTypes.Add(TEXT("application/json"));


    FString Content = TEXT("");
    // TSharedPtr<IHttpBody> localVarHttpBody;
    FString localVarRequestHttpContentType;

    // use JSON if possible
    if (localVarConsumeHttpContentTypes.Num() == 0 || localVarConsumeHttpContentTypes.Contains(TEXT("application/json")))
    {
        localVarRequestHttpContentType = TEXT("application/json");

        JsonWriter ContentWriter = TJsonWriterFactory<>::Create(&Content);
        
        errorReport->WriteJson(ContentWriter);
        
        ContentWriter->Close();

    }
    else
    {
        return THTTPResult<TVariant<void*>>::Failure(TEXT("SupportApi->SrcHandlersSupportErrorReport does not consume any supported media type"), 415, {});
    }

    // Add query params
    if (localVarQueryParams.Num() > 0) {
        URL += TEXT("?");
        FString QueryParams;
        for (const auto& Param : localVarQueryParams)
        {
            QueryParams += Param.Key + TEXT("=") + Param.Value + TEXT("&");
        }
        QueryParams.RemoveFromEnd(TEXT("&"));
        URL += QueryParams;
    }

    DiversionHttp::HTTPCallResponse Response = ApiClient->SendRequest(URL, DiversionHttp::HttpMethod::POST, Token, localVarRequestHttpContentType, 
        Content, Headers, ConnectionTimeoutSeconds, RequestTimeoutSeconds);

    // TODO: Add validation - check response content type
    
    if (Response.ResponseCode == 204) {
        TVariant<void*> variantResult;
        variantResult.Emplace<void*>(nullptr);
        return THTTPResult<TVariant<void*>>::Success(TOptional(variantResult), Response.ResponseCode, Response.Headers);

    }


    if (Response.ResponseCode >= 400)
    {
            FString ErrorMessage = TEXT("General Failure");
            if(Response.Error.IsSet()) {
                ErrorMessage = Response.Error.GetValue();
            } 
            else if(!Response.Contents.IsEmpty()) {
                // Try parsing as JSON
                TSharedPtr<FJsonObject> JsonObject;
                TSharedRef<TJsonReader<>> JsonReader = TJsonReaderFactory<>::Create(Response.Contents);
                if (FJsonSerializer::Deserialize(JsonReader, JsonObject) 
                    && JsonObject.IsValid())
                {
                    if (JsonObject->HasField(TEXT("error_message"))) {
                        ErrorMessage = JsonObject->GetStringField(TEXT("error_message"));
                    }
                    else {
                        // Treat it as an error string 
                        ErrorMessage = Response.Contents;
                    }
                }
                else {
                    // Treat it as an error string 
                    ErrorMessage = Response.Contents;
                }
            }

            FString CurrError = TEXT("error calling src_handlers_support_errorReport: ") + ErrorMessage;
            return THTTPResult<TVariant<void*>>::Failure(CurrError, Response.ResponseCode, Response.Headers);
    }

    // Unepxected response code - TODO: try parse as any of the expected response types
    return THTTPResult<TVariant<void*>>::Failure(TEXT("error calling SrcHandlersSupportErrorReport: unexpected response code"), Response.ResponseCode, Response.Headers);
}


}
}

