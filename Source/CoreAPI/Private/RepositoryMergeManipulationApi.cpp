// Copyright 2024 Diversion Company, Inc. All Rights Reserved.
/**
 * Diversion Core API
 * Definition of the Core API used to access low-level functionality of Diversion
 *
 * The version of the OpenAPI document: 0.2.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.10.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "RepositoryMergeManipulationApi.h"
#include "HTTPResult.h"
#include "JsonBody.h"

#include "Types.h"


namespace Diversion {
namespace CoreAPI {

using namespace Diversion::CoreAPI::Model;

RepositoryMergeManipulationApi::RepositoryMergeManipulationApi(TSharedPtr<DiversionHttp::FHttpRequestManager> InApiClient)
     : ApiClient(InApiClient) {}

RepositoryMergeManipulationApi::~RepositoryMergeManipulationApi() {}



THTTPResult<TVariant<void*, TSharedPtr<NewResourceId>, TSharedPtr<Error>>> RepositoryMergeManipulationApi::SrcHandlersv2MergeFinalize(FString repoId, FString mergeId, TOptional<TSharedPtr<CommitMessage>> commitMessage, 
        const FString& Token,
        const TMap<FString, FString>& Headers,
		int ConnectionTimeoutSeconds, int RequestTimeoutSeconds) const
{

    FString URL = TEXT("/v0/repos/{repo_id}/merges/{merge_id}");
    URL.ReplaceInline(TEXT("{repo_id}"), *DiversionHttp::URLEncode(DiversionHttp::parameterToString(repoId)));
    URL.ReplaceInline(TEXT("{merge_id}"), *DiversionHttp::URLEncode(DiversionHttp::parameterToString(mergeId)));

    TMap<FString, FString> localVarQueryParams;
    TMap<FString, FString> localVarFormParams;
    //TMap<FString, TSharedPtr<HttpContent>> localVarFileParams;

    
    TSet<FString> localVarResponseHttpContentTypes;
    localVarResponseHttpContentTypes.Add(TEXT("application/json"));

    FString localVarResponseHttpContentType;

    // use JSON if possible
    if (localVarResponseHttpContentTypes.Num() == 0)
    {
        localVarResponseHttpContentType = TEXT("application/json");
    }
    // JSON
    else if (localVarResponseHttpContentTypes.Contains(TEXT("application/json")))
    {
        localVarResponseHttpContentType = TEXT("application/json");
    }
    else
    {
        return THTTPResult<TVariant<void*, TSharedPtr<NewResourceId>, TSharedPtr<Error>>>::Failure(TEXT("RepositoryMergeManipulationApi->SrcHandlersv2MergeFinalize does not produce any supported media type"), 400, {});
    }

    // TODO: Add this to the headers
    //Headers[TEXT("Accept")] = localVarResponseHttpContentType;

    TSet<FString> localVarConsumeHttpContentTypes;
    localVarConsumeHttpContentTypes.Add(TEXT("application/json"));


    FString Content = TEXT("");
    // TSharedPtr<IHttpBody> localVarHttpBody;
    FString localVarRequestHttpContentType;

    // use JSON if possible
    if (localVarConsumeHttpContentTypes.Num() == 0 || localVarConsumeHttpContentTypes.Contains(TEXT("application/json")))
    {
        localVarRequestHttpContentType = TEXT("application/json");

        JsonWriter ContentWriter = TJsonWriterFactory<>::Create(&Content);
        if(commitMessage.IsSet() && commitMessage.GetValue().IsValid()) { 
            commitMessage.GetValue()->WriteJson(ContentWriter);
        }
        ContentWriter->Close();

    }
    else
    {
        return THTTPResult<TVariant<void*, TSharedPtr<NewResourceId>, TSharedPtr<Error>>>::Failure(TEXT("RepositoryMergeManipulationApi->SrcHandlersv2MergeFinalize does not consume any supported media type"), 415, {});
    }

    // Add query params
    if (localVarQueryParams.Num() > 0) {
        URL += TEXT("?");
        FString QueryParams;
        for (const auto& Param : localVarQueryParams)
        {
            QueryParams += Param.Key + TEXT("=") + Param.Value + TEXT("&");
        }
        QueryParams.RemoveFromEnd(TEXT("&"));
        URL += QueryParams;
    }

    DiversionHttp::HTTPCallResponse Response = ApiClient->SendRequest(URL, DiversionHttp::HttpMethod::POST, Token, localVarRequestHttpContentType, 
        Content, Headers, ConnectionTimeoutSeconds, RequestTimeoutSeconds);

    // TODO: Add validation - check response content type
    
    if (Response.ResponseCode == 200) {
        TVariant<void*, TSharedPtr<NewResourceId>, TSharedPtr<Error>> variantResult;
        variantResult.Emplace<void*>(nullptr);
        return THTTPResult<TVariant<void*, TSharedPtr<NewResourceId>, TSharedPtr<Error>>>::Success(TOptional(variantResult), Response.ResponseCode, Response.Headers);

    }
    if (Response.ResponseCode == 201) {
        if(localVarResponseHttpContentType == TEXT("application/json"))
        {
            TSharedPtr<NewResourceId> localVarResult = MakeShared<NewResourceId>();
            TSharedPtr<FJsonValue> JsonValue;
            TSharedRef<TJsonReader<>> JsonReader = TJsonReaderFactory<>::Create(Response.Contents);
            if (!FJsonSerializer::Deserialize(JsonReader, JsonValue) || !JsonValue.IsValid())
            {
                return THTTPResult<TVariant<void*, TSharedPtr<NewResourceId>, TSharedPtr<Error>>>::Failure(TEXT("error calling src_handlersv2_merge_finalize: JSON reader failed parsing the response string"), 500, Response.Headers);
            }

            
            if (localVarResult->FromJson(JsonValue)) {
                TVariant<void*, TSharedPtr<NewResourceId>, TSharedPtr<Error>> variantResult;
                variantResult.Emplace<TSharedPtr<NewResourceId>>(localVarResult);
                return THTTPResult<TVariant<void*, TSharedPtr<NewResourceId>, TSharedPtr<Error>>>::Success(TOptional(variantResult), Response.ResponseCode, Response.Headers);
            }
            else {
                return THTTPResult<TVariant<void*, TSharedPtr<NewResourceId>, TSharedPtr<Error>>>::Failure(TEXT("error calling src_handlersv2_merge_finalize: JSON response was not in the expected format"), 500, Response.Headers);
            }
        }


        else
        {
            return THTTPResult<TVariant<void*, TSharedPtr<NewResourceId>, TSharedPtr<Error>>>::Failure(TEXT("error calling src_handlersv2_merge_finalize: unsupported response type"), 500, Response.Headers);
        }
    }
    if (Response.ResponseCode == 403) {
            FString ErrorMessage = TEXT("General Failure");
            if(Response.Error.IsSet()) {
                ErrorMessage = Response.Error.GetValue();
            } 
            // Try parsing as JSON
            else if(!Response.Contents.IsEmpty()) {
                if(localVarResponseHttpContentType == TEXT("application/json"))
                {
                    TSharedPtr<Error> localVarResult = MakeShared<Error>();
                    TSharedPtr<FJsonValue> JsonValue;
                    TSharedRef<TJsonReader<>> JsonReader = TJsonReaderFactory<>::Create(Response.Contents);
                    if (!FJsonSerializer::Deserialize(JsonReader, JsonValue) || !JsonValue.IsValid())
                    {
                        ErrorMessage = TEXT("Received corrupted error data");
                    }
                    
                    if (localVarResult->FromJson(JsonValue)) {
                        TVariant<void*, TSharedPtr<NewResourceId>, TSharedPtr<Error>> variantResult;
                        variantResult.Emplace<TSharedPtr<Error>>(localVarResult);
                        return THTTPResult<TVariant<void*, TSharedPtr<NewResourceId>, TSharedPtr<Error>>>::Failure(TEXT("ParsedJsonError"), Response.ResponseCode, Response.Headers, TOptional(variantResult));
                    }
                    else {
                        ErrorMessage = TEXT("Received corrupted error data");
                    }
                }
            }
            FString CurrError = TEXT("error calling src_handlersv2_merge_finalize: ") + ErrorMessage;
            return THTTPResult<TVariant<void*, TSharedPtr<NewResourceId>, TSharedPtr<Error>>>::Failure(CurrError, Response.ResponseCode, Response.Headers);

    }
    if (Response.ResponseCode == 404) {
            FString ErrorMessage = TEXT("General Failure");
            if(Response.Error.IsSet()) {
                ErrorMessage = Response.Error.GetValue();
            } 
            // Try parsing as JSON
            else if(!Response.Contents.IsEmpty()) {
                if(localVarResponseHttpContentType == TEXT("application/json"))
                {
                    TSharedPtr<Error> localVarResult = MakeShared<Error>();
                    TSharedPtr<FJsonValue> JsonValue;
                    TSharedRef<TJsonReader<>> JsonReader = TJsonReaderFactory<>::Create(Response.Contents);
                    if (!FJsonSerializer::Deserialize(JsonReader, JsonValue) || !JsonValue.IsValid())
                    {
                        ErrorMessage = TEXT("Received corrupted error data");
                    }
                    
                    if (localVarResult->FromJson(JsonValue)) {
                        TVariant<void*, TSharedPtr<NewResourceId>, TSharedPtr<Error>> variantResult;
                        variantResult.Emplace<TSharedPtr<Error>>(localVarResult);
                        return THTTPResult<TVariant<void*, TSharedPtr<NewResourceId>, TSharedPtr<Error>>>::Failure(TEXT("ParsedJsonError"), Response.ResponseCode, Response.Headers, TOptional(variantResult));
                    }
                    else {
                        ErrorMessage = TEXT("Received corrupted error data");
                    }
                }
            }
            FString CurrError = TEXT("error calling src_handlersv2_merge_finalize: ") + ErrorMessage;
            return THTTPResult<TVariant<void*, TSharedPtr<NewResourceId>, TSharedPtr<Error>>>::Failure(CurrError, Response.ResponseCode, Response.Headers);

    }
    if (Response.ResponseCode == 405) {
            FString ErrorMessage = TEXT("General Failure");
            if(Response.Error.IsSet()) {
                ErrorMessage = Response.Error.GetValue();
            } 
            // Try parsing as JSON
            else if(!Response.Contents.IsEmpty()) {
                if(localVarResponseHttpContentType == TEXT("application/json"))
                {
                    TSharedPtr<Error> localVarResult = MakeShared<Error>();
                    TSharedPtr<FJsonValue> JsonValue;
                    TSharedRef<TJsonReader<>> JsonReader = TJsonReaderFactory<>::Create(Response.Contents);
                    if (!FJsonSerializer::Deserialize(JsonReader, JsonValue) || !JsonValue.IsValid())
                    {
                        ErrorMessage = TEXT("Received corrupted error data");
                    }
                    
                    if (localVarResult->FromJson(JsonValue)) {
                        TVariant<void*, TSharedPtr<NewResourceId>, TSharedPtr<Error>> variantResult;
                        variantResult.Emplace<TSharedPtr<Error>>(localVarResult);
                        return THTTPResult<TVariant<void*, TSharedPtr<NewResourceId>, TSharedPtr<Error>>>::Failure(TEXT("ParsedJsonError"), Response.ResponseCode, Response.Headers, TOptional(variantResult));
                    }
                    else {
                        ErrorMessage = TEXT("Received corrupted error data");
                    }
                }
            }
            FString CurrError = TEXT("error calling src_handlersv2_merge_finalize: ") + ErrorMessage;
            return THTTPResult<TVariant<void*, TSharedPtr<NewResourceId>, TSharedPtr<Error>>>::Failure(CurrError, Response.ResponseCode, Response.Headers);

    }
    if (Response.ResponseCode == 503) {
            FString ErrorMessage = TEXT("General Failure");
            if(Response.Error.IsSet()) {
                ErrorMessage = Response.Error.GetValue();
            } 
            // Try parsing as JSON
            else if(!Response.Contents.IsEmpty()) {
                if(localVarResponseHttpContentType == TEXT("application/json"))
                {
                    TSharedPtr<Error> localVarResult = MakeShared<Error>();
                    TSharedPtr<FJsonValue> JsonValue;
                    TSharedRef<TJsonReader<>> JsonReader = TJsonReaderFactory<>::Create(Response.Contents);
                    if (!FJsonSerializer::Deserialize(JsonReader, JsonValue) || !JsonValue.IsValid())
                    {
                        ErrorMessage = TEXT("Received corrupted error data");
                    }
                    
                    if (localVarResult->FromJson(JsonValue)) {
                        TVariant<void*, TSharedPtr<NewResourceId>, TSharedPtr<Error>> variantResult;
                        variantResult.Emplace<TSharedPtr<Error>>(localVarResult);
                        return THTTPResult<TVariant<void*, TSharedPtr<NewResourceId>, TSharedPtr<Error>>>::Failure(TEXT("ParsedJsonError"), Response.ResponseCode, Response.Headers, TOptional(variantResult));
                    }
                    else {
                        ErrorMessage = TEXT("Received corrupted error data");
                    }
                }
            }
            FString CurrError = TEXT("error calling src_handlersv2_merge_finalize: ") + ErrorMessage;
            return THTTPResult<TVariant<void*, TSharedPtr<NewResourceId>, TSharedPtr<Error>>>::Failure(CurrError, Response.ResponseCode, Response.Headers);

    }


    if (Response.ResponseCode >= 400)
    {
            FString ErrorMessage = TEXT("General Failure");
            if(Response.Error.IsSet()) {
                ErrorMessage = Response.Error.GetValue();
            } 
            else if(!Response.Contents.IsEmpty()) {
                // Try parsing as JSON
                TSharedPtr<FJsonObject> JsonObject;
                TSharedRef<TJsonReader<>> JsonReader = TJsonReaderFactory<>::Create(Response.Contents);
                if (FJsonSerializer::Deserialize(JsonReader, JsonObject) 
                    && JsonObject.IsValid())
                {
                    if (JsonObject->HasField(TEXT("error_message"))) {
                        ErrorMessage = JsonObject->GetStringField(TEXT("error_message"));
                    }
                    else {
                        // Treat it as an error string 
                        ErrorMessage = Response.Contents;
                    }
                }
                else {
                    // Treat it as an error string 
                    ErrorMessage = Response.Contents;
                }
            }

            FString CurrError = TEXT("error calling src_handlersv2_merge_finalize: ") + ErrorMessage;
            return THTTPResult<TVariant<void*, TSharedPtr<NewResourceId>, TSharedPtr<Error>>>::Failure(CurrError, Response.ResponseCode, Response.Headers);
    }

    // Unepxected response code - TODO: try parse as any of the expected response types
    return THTTPResult<TVariant<void*, TSharedPtr<NewResourceId>, TSharedPtr<Error>>>::Failure(TEXT("error calling SrcHandlersv2MergeFinalize: unexpected response code"), Response.ResponseCode, Response.Headers);
}



THTTPResult<TVariant<TSharedPtr<DetailedMerge>, TSharedPtr<Error>>> RepositoryMergeManipulationApi::SrcHandlersv2MergeGetOpenMerge(FString repoId, FString mergeId, 
        const FString& Token,
        const TMap<FString, FString>& Headers,
		int ConnectionTimeoutSeconds, int RequestTimeoutSeconds) const
{

    FString URL = TEXT("/v0/repos/{repo_id}/merges/{merge_id}");
    URL.ReplaceInline(TEXT("{repo_id}"), *DiversionHttp::URLEncode(DiversionHttp::parameterToString(repoId)));
    URL.ReplaceInline(TEXT("{merge_id}"), *DiversionHttp::URLEncode(DiversionHttp::parameterToString(mergeId)));

    TMap<FString, FString> localVarQueryParams;
    TMap<FString, FString> localVarFormParams;
    //TMap<FString, TSharedPtr<HttpContent>> localVarFileParams;

    
    TSet<FString> localVarResponseHttpContentTypes;
    localVarResponseHttpContentTypes.Add(TEXT("application/json"));

    FString localVarResponseHttpContentType;

    // use JSON if possible
    if (localVarResponseHttpContentTypes.Num() == 0)
    {
        localVarResponseHttpContentType = TEXT("application/json");
    }
    // JSON
    else if (localVarResponseHttpContentTypes.Contains(TEXT("application/json")))
    {
        localVarResponseHttpContentType = TEXT("application/json");
    }
    else
    {
        return THTTPResult<TVariant<TSharedPtr<DetailedMerge>, TSharedPtr<Error>>>::Failure(TEXT("RepositoryMergeManipulationApi->SrcHandlersv2MergeGetOpenMerge does not produce any supported media type"), 400, {});
    }

    // TODO: Add this to the headers
    //Headers[TEXT("Accept")] = localVarResponseHttpContentType;

    TSet<FString> localVarConsumeHttpContentTypes;


    FString Content = TEXT("");
    // TSharedPtr<IHttpBody> localVarHttpBody;
    FString localVarRequestHttpContentType;

    // use JSON if possible
    if (localVarConsumeHttpContentTypes.Num() == 0 || localVarConsumeHttpContentTypes.Contains(TEXT("application/json")))
    {
        localVarRequestHttpContentType = TEXT("application/json");
    }
    else
    {
        return THTTPResult<TVariant<TSharedPtr<DetailedMerge>, TSharedPtr<Error>>>::Failure(TEXT("RepositoryMergeManipulationApi->SrcHandlersv2MergeGetOpenMerge does not consume any supported media type"), 415, {});
    }

    // Add query params
    if (localVarQueryParams.Num() > 0) {
        URL += TEXT("?");
        FString QueryParams;
        for (const auto& Param : localVarQueryParams)
        {
            QueryParams += Param.Key + TEXT("=") + Param.Value + TEXT("&");
        }
        QueryParams.RemoveFromEnd(TEXT("&"));
        URL += QueryParams;
    }

    DiversionHttp::HTTPCallResponse Response = ApiClient->SendRequest(URL, DiversionHttp::HttpMethod::GET, Token, localVarRequestHttpContentType, 
        Content, Headers, ConnectionTimeoutSeconds, RequestTimeoutSeconds);

    // TODO: Add validation - check response content type
    
    if (Response.ResponseCode == 200) {
        if(localVarResponseHttpContentType == TEXT("application/json"))
        {
            TSharedPtr<DetailedMerge> localVarResult = MakeShared<DetailedMerge>();
            TSharedPtr<FJsonValue> JsonValue;
            TSharedRef<TJsonReader<>> JsonReader = TJsonReaderFactory<>::Create(Response.Contents);
            if (!FJsonSerializer::Deserialize(JsonReader, JsonValue) || !JsonValue.IsValid())
            {
                return THTTPResult<TVariant<TSharedPtr<DetailedMerge>, TSharedPtr<Error>>>::Failure(TEXT("error calling src_handlersv2_merge_getOpenMerge: JSON reader failed parsing the response string"), 500, Response.Headers);
            }

            
            if (localVarResult->FromJson(JsonValue)) {
                TVariant<TSharedPtr<DetailedMerge>, TSharedPtr<Error>> variantResult;
                variantResult.Emplace<TSharedPtr<DetailedMerge>>(localVarResult);
                return THTTPResult<TVariant<TSharedPtr<DetailedMerge>, TSharedPtr<Error>>>::Success(TOptional(variantResult), Response.ResponseCode, Response.Headers);
            }
            else {
                return THTTPResult<TVariant<TSharedPtr<DetailedMerge>, TSharedPtr<Error>>>::Failure(TEXT("error calling src_handlersv2_merge_getOpenMerge: JSON response was not in the expected format"), 500, Response.Headers);
            }
        }


        else
        {
            return THTTPResult<TVariant<TSharedPtr<DetailedMerge>, TSharedPtr<Error>>>::Failure(TEXT("error calling src_handlersv2_merge_getOpenMerge: unsupported response type"), 500, Response.Headers);
        }
    }
    if (Response.ResponseCode == 404) {
            FString ErrorMessage = TEXT("General Failure");
            if(Response.Error.IsSet()) {
                ErrorMessage = Response.Error.GetValue();
            } 
            // Try parsing as JSON
            else if(!Response.Contents.IsEmpty()) {
                if(localVarResponseHttpContentType == TEXT("application/json"))
                {
                    TSharedPtr<Error> localVarResult = MakeShared<Error>();
                    TSharedPtr<FJsonValue> JsonValue;
                    TSharedRef<TJsonReader<>> JsonReader = TJsonReaderFactory<>::Create(Response.Contents);
                    if (!FJsonSerializer::Deserialize(JsonReader, JsonValue) || !JsonValue.IsValid())
                    {
                        ErrorMessage = TEXT("Received corrupted error data");
                    }
                    
                    if (localVarResult->FromJson(JsonValue)) {
                        TVariant<TSharedPtr<DetailedMerge>, TSharedPtr<Error>> variantResult;
                        variantResult.Emplace<TSharedPtr<Error>>(localVarResult);
                        return THTTPResult<TVariant<TSharedPtr<DetailedMerge>, TSharedPtr<Error>>>::Failure(TEXT("ParsedJsonError"), Response.ResponseCode, Response.Headers, TOptional(variantResult));
                    }
                    else {
                        ErrorMessage = TEXT("Received corrupted error data");
                    }
                }
            }
            FString CurrError = TEXT("error calling src_handlersv2_merge_getOpenMerge: ") + ErrorMessage;
            return THTTPResult<TVariant<TSharedPtr<DetailedMerge>, TSharedPtr<Error>>>::Failure(CurrError, Response.ResponseCode, Response.Headers);

    }


    if (Response.ResponseCode >= 400)
    {
            FString ErrorMessage = TEXT("General Failure");
            if(Response.Error.IsSet()) {
                ErrorMessage = Response.Error.GetValue();
            } 
            else if(!Response.Contents.IsEmpty()) {
                // Try parsing as JSON
                TSharedPtr<FJsonObject> JsonObject;
                TSharedRef<TJsonReader<>> JsonReader = TJsonReaderFactory<>::Create(Response.Contents);
                if (FJsonSerializer::Deserialize(JsonReader, JsonObject) 
                    && JsonObject.IsValid())
                {
                    if (JsonObject->HasField(TEXT("error_message"))) {
                        ErrorMessage = JsonObject->GetStringField(TEXT("error_message"));
                    }
                    else {
                        // Treat it as an error string 
                        ErrorMessage = Response.Contents;
                    }
                }
                else {
                    // Treat it as an error string 
                    ErrorMessage = Response.Contents;
                }
            }

            FString CurrError = TEXT("error calling src_handlersv2_merge_getOpenMerge: ") + ErrorMessage;
            return THTTPResult<TVariant<TSharedPtr<DetailedMerge>, TSharedPtr<Error>>>::Failure(CurrError, Response.ResponseCode, Response.Headers);
    }

    // Unepxected response code - TODO: try parse as any of the expected response types
    return THTTPResult<TVariant<TSharedPtr<DetailedMerge>, TSharedPtr<Error>>>::Failure(TEXT("error calling SrcHandlersv2MergeGetOpenMerge: unexpected response code"), Response.ResponseCode, Response.Headers);
}



THTTPResult<TVariant<TSharedPtr<Src_handlersv2_merge_list_open_merges_200_response>>> RepositoryMergeManipulationApi::SrcHandlersv2MergeListOpenMerges(FString repoId, TOptional<FString> baseId, TOptional<FString> otherId, 
        const FString& Token,
        const TMap<FString, FString>& Headers,
		int ConnectionTimeoutSeconds, int RequestTimeoutSeconds) const
{

    FString URL = TEXT("/v0/repos/{repo_id}/merges");
    URL.ReplaceInline(TEXT("{repo_id}"), *DiversionHttp::URLEncode(DiversionHttp::parameterToString(repoId)));

    TMap<FString, FString> localVarQueryParams;
    TMap<FString, FString> localVarFormParams;
    //TMap<FString, TSharedPtr<HttpContent>> localVarFileParams;

    
    TSet<FString> localVarResponseHttpContentTypes;
    localVarResponseHttpContentTypes.Add(TEXT("application/json"));

    FString localVarResponseHttpContentType;

    // use JSON if possible
    if (localVarResponseHttpContentTypes.Num() == 0)
    {
        localVarResponseHttpContentType = TEXT("application/json");
    }
    // JSON
    else if (localVarResponseHttpContentTypes.Contains(TEXT("application/json")))
    {
        localVarResponseHttpContentType = TEXT("application/json");
    }
    else
    {
        return THTTPResult<TVariant<TSharedPtr<Src_handlersv2_merge_list_open_merges_200_response>>>::Failure(TEXT("RepositoryMergeManipulationApi->SrcHandlersv2MergeListOpenMerges does not produce any supported media type"), 400, {});
    }

    // TODO: Add this to the headers
    //Headers[TEXT("Accept")] = localVarResponseHttpContentType;

    TSet<FString> localVarConsumeHttpContentTypes;

    if (baseId.IsSet())
    {
        localVarQueryParams.Add(TEXT("base_id"), DiversionHttp::URLEncode(DiversionHttp::parameterToString(baseId.Get(TEXT("")))));
    }
    if (otherId.IsSet())
    {
        localVarQueryParams.Add(TEXT("other_id"), DiversionHttp::URLEncode(DiversionHttp::parameterToString(otherId.Get(TEXT("")))));
    }

    FString Content = TEXT("");
    // TSharedPtr<IHttpBody> localVarHttpBody;
    FString localVarRequestHttpContentType;

    // use JSON if possible
    if (localVarConsumeHttpContentTypes.Num() == 0 || localVarConsumeHttpContentTypes.Contains(TEXT("application/json")))
    {
        localVarRequestHttpContentType = TEXT("application/json");
    }
    else
    {
        return THTTPResult<TVariant<TSharedPtr<Src_handlersv2_merge_list_open_merges_200_response>>>::Failure(TEXT("RepositoryMergeManipulationApi->SrcHandlersv2MergeListOpenMerges does not consume any supported media type"), 415, {});
    }

    // Add query params
    if (localVarQueryParams.Num() > 0) {
        URL += TEXT("?");
        FString QueryParams;
        for (const auto& Param : localVarQueryParams)
        {
            QueryParams += Param.Key + TEXT("=") + Param.Value + TEXT("&");
        }
        QueryParams.RemoveFromEnd(TEXT("&"));
        URL += QueryParams;
    }

    DiversionHttp::HTTPCallResponse Response = ApiClient->SendRequest(URL, DiversionHttp::HttpMethod::GET, Token, localVarRequestHttpContentType, 
        Content, Headers, ConnectionTimeoutSeconds, RequestTimeoutSeconds);

    // TODO: Add validation - check response content type
    
    if (Response.ResponseCode == 200) {
        if(localVarResponseHttpContentType == TEXT("application/json"))
        {
            TSharedPtr<Src_handlersv2_merge_list_open_merges_200_response> localVarResult = MakeShared<Src_handlersv2_merge_list_open_merges_200_response>();
            TSharedPtr<FJsonValue> JsonValue;
            TSharedRef<TJsonReader<>> JsonReader = TJsonReaderFactory<>::Create(Response.Contents);
            if (!FJsonSerializer::Deserialize(JsonReader, JsonValue) || !JsonValue.IsValid())
            {
                return THTTPResult<TVariant<TSharedPtr<Src_handlersv2_merge_list_open_merges_200_response>>>::Failure(TEXT("error calling src_handlersv2_merge_listOpenMerges: JSON reader failed parsing the response string"), 500, Response.Headers);
            }

            
            if (localVarResult->FromJson(JsonValue)) {
                TVariant<TSharedPtr<Src_handlersv2_merge_list_open_merges_200_response>> variantResult;
                variantResult.Emplace<TSharedPtr<Src_handlersv2_merge_list_open_merges_200_response>>(localVarResult);
                return THTTPResult<TVariant<TSharedPtr<Src_handlersv2_merge_list_open_merges_200_response>>>::Success(TOptional(variantResult), Response.ResponseCode, Response.Headers);
            }
            else {
                return THTTPResult<TVariant<TSharedPtr<Src_handlersv2_merge_list_open_merges_200_response>>>::Failure(TEXT("error calling src_handlersv2_merge_listOpenMerges: JSON response was not in the expected format"), 500, Response.Headers);
            }
        }


        else
        {
            return THTTPResult<TVariant<TSharedPtr<Src_handlersv2_merge_list_open_merges_200_response>>>::Failure(TEXT("error calling src_handlersv2_merge_listOpenMerges: unsupported response type"), 500, Response.Headers);
        }
    }


    if (Response.ResponseCode >= 400)
    {
            FString ErrorMessage = TEXT("General Failure");
            if(Response.Error.IsSet()) {
                ErrorMessage = Response.Error.GetValue();
            } 
            else if(!Response.Contents.IsEmpty()) {
                // Try parsing as JSON
                TSharedPtr<FJsonObject> JsonObject;
                TSharedRef<TJsonReader<>> JsonReader = TJsonReaderFactory<>::Create(Response.Contents);
                if (FJsonSerializer::Deserialize(JsonReader, JsonObject) 
                    && JsonObject.IsValid())
                {
                    if (JsonObject->HasField(TEXT("error_message"))) {
                        ErrorMessage = JsonObject->GetStringField(TEXT("error_message"));
                    }
                    else {
                        // Treat it as an error string 
                        ErrorMessage = Response.Contents;
                    }
                }
                else {
                    // Treat it as an error string 
                    ErrorMessage = Response.Contents;
                }
            }

            FString CurrError = TEXT("error calling src_handlersv2_merge_listOpenMerges: ") + ErrorMessage;
            return THTTPResult<TVariant<TSharedPtr<Src_handlersv2_merge_list_open_merges_200_response>>>::Failure(CurrError, Response.ResponseCode, Response.Headers);
    }

    // Unepxected response code - TODO: try parse as any of the expected response types
    return THTTPResult<TVariant<TSharedPtr<Src_handlersv2_merge_list_open_merges_200_response>>>::Failure(TEXT("error calling SrcHandlersv2MergeListOpenMerges: unexpected response code"), Response.ResponseCode, Response.Headers);
}



THTTPResult<TVariant<void*, TSharedPtr<NewResourceId>, TSharedPtr<MergeId>, TSharedPtr<Error>>> RepositoryMergeManipulationApi::SrcHandlersv2MergePost(FString repoId, TOptional<FString> baseId, TOptional<FString> otherId, 
        const FString& Token,
        const TMap<FString, FString>& Headers,
		int ConnectionTimeoutSeconds, int RequestTimeoutSeconds) const
{

    FString URL = TEXT("/v0/repos/{repo_id}/merges");
    URL.ReplaceInline(TEXT("{repo_id}"), *DiversionHttp::URLEncode(DiversionHttp::parameterToString(repoId)));

    TMap<FString, FString> localVarQueryParams;
    TMap<FString, FString> localVarFormParams;
    //TMap<FString, TSharedPtr<HttpContent>> localVarFileParams;

    
    TSet<FString> localVarResponseHttpContentTypes;
    localVarResponseHttpContentTypes.Add(TEXT("application/json"));

    FString localVarResponseHttpContentType;

    // use JSON if possible
    if (localVarResponseHttpContentTypes.Num() == 0)
    {
        localVarResponseHttpContentType = TEXT("application/json");
    }
    // JSON
    else if (localVarResponseHttpContentTypes.Contains(TEXT("application/json")))
    {
        localVarResponseHttpContentType = TEXT("application/json");
    }
    else
    {
        return THTTPResult<TVariant<void*, TSharedPtr<NewResourceId>, TSharedPtr<MergeId>, TSharedPtr<Error>>>::Failure(TEXT("RepositoryMergeManipulationApi->SrcHandlersv2MergePost does not produce any supported media type"), 400, {});
    }

    // TODO: Add this to the headers
    //Headers[TEXT("Accept")] = localVarResponseHttpContentType;

    TSet<FString> localVarConsumeHttpContentTypes;

    if (baseId.IsSet())
    {
        localVarQueryParams.Add(TEXT("base_id"), DiversionHttp::URLEncode(DiversionHttp::parameterToString(baseId.Get(TEXT("")))));
    }
    if (otherId.IsSet())
    {
        localVarQueryParams.Add(TEXT("other_id"), DiversionHttp::URLEncode(DiversionHttp::parameterToString(otherId.Get(TEXT("")))));
    }

    FString Content = TEXT("");
    // TSharedPtr<IHttpBody> localVarHttpBody;
    FString localVarRequestHttpContentType;

    // use JSON if possible
    if (localVarConsumeHttpContentTypes.Num() == 0 || localVarConsumeHttpContentTypes.Contains(TEXT("application/json")))
    {
        localVarRequestHttpContentType = TEXT("application/json");
    }
    else
    {
        return THTTPResult<TVariant<void*, TSharedPtr<NewResourceId>, TSharedPtr<MergeId>, TSharedPtr<Error>>>::Failure(TEXT("RepositoryMergeManipulationApi->SrcHandlersv2MergePost does not consume any supported media type"), 415, {});
    }

    // Add query params
    if (localVarQueryParams.Num() > 0) {
        URL += TEXT("?");
        FString QueryParams;
        for (const auto& Param : localVarQueryParams)
        {
            QueryParams += Param.Key + TEXT("=") + Param.Value + TEXT("&");
        }
        QueryParams.RemoveFromEnd(TEXT("&"));
        URL += QueryParams;
    }

    DiversionHttp::HTTPCallResponse Response = ApiClient->SendRequest(URL, DiversionHttp::HttpMethod::POST, Token, localVarRequestHttpContentType, 
        Content, Headers, ConnectionTimeoutSeconds, RequestTimeoutSeconds);

    // TODO: Add validation - check response content type
    
    if (Response.ResponseCode == 200) {
        TVariant<void*, TSharedPtr<NewResourceId>, TSharedPtr<MergeId>, TSharedPtr<Error>> variantResult;
        variantResult.Emplace<void*>(nullptr);
        return THTTPResult<TVariant<void*, TSharedPtr<NewResourceId>, TSharedPtr<MergeId>, TSharedPtr<Error>>>::Success(TOptional(variantResult), Response.ResponseCode, Response.Headers);

    }
    if (Response.ResponseCode == 201) {
        if(localVarResponseHttpContentType == TEXT("application/json"))
        {
            TSharedPtr<NewResourceId> localVarResult = MakeShared<NewResourceId>();
            TSharedPtr<FJsonValue> JsonValue;
            TSharedRef<TJsonReader<>> JsonReader = TJsonReaderFactory<>::Create(Response.Contents);
            if (!FJsonSerializer::Deserialize(JsonReader, JsonValue) || !JsonValue.IsValid())
            {
                return THTTPResult<TVariant<void*, TSharedPtr<NewResourceId>, TSharedPtr<MergeId>, TSharedPtr<Error>>>::Failure(TEXT("error calling src_handlersv2_merge_post: JSON reader failed parsing the response string"), 500, Response.Headers);
            }

            
            if (localVarResult->FromJson(JsonValue)) {
                TVariant<void*, TSharedPtr<NewResourceId>, TSharedPtr<MergeId>, TSharedPtr<Error>> variantResult;
                variantResult.Emplace<TSharedPtr<NewResourceId>>(localVarResult);
                return THTTPResult<TVariant<void*, TSharedPtr<NewResourceId>, TSharedPtr<MergeId>, TSharedPtr<Error>>>::Success(TOptional(variantResult), Response.ResponseCode, Response.Headers);
            }
            else {
                return THTTPResult<TVariant<void*, TSharedPtr<NewResourceId>, TSharedPtr<MergeId>, TSharedPtr<Error>>>::Failure(TEXT("error calling src_handlersv2_merge_post: JSON response was not in the expected format"), 500, Response.Headers);
            }
        }


        else
        {
            return THTTPResult<TVariant<void*, TSharedPtr<NewResourceId>, TSharedPtr<MergeId>, TSharedPtr<Error>>>::Failure(TEXT("error calling src_handlersv2_merge_post: unsupported response type"), 500, Response.Headers);
        }
    }
    if (Response.ResponseCode == 202) {
        if(localVarResponseHttpContentType == TEXT("application/json"))
        {
            TSharedPtr<MergeId> localVarResult = MakeShared<MergeId>();
            TSharedPtr<FJsonValue> JsonValue;
            TSharedRef<TJsonReader<>> JsonReader = TJsonReaderFactory<>::Create(Response.Contents);
            if (!FJsonSerializer::Deserialize(JsonReader, JsonValue) || !JsonValue.IsValid())
            {
                return THTTPResult<TVariant<void*, TSharedPtr<NewResourceId>, TSharedPtr<MergeId>, TSharedPtr<Error>>>::Failure(TEXT("error calling src_handlersv2_merge_post: JSON reader failed parsing the response string"), 500, Response.Headers);
            }

            
            if (localVarResult->FromJson(JsonValue)) {
                TVariant<void*, TSharedPtr<NewResourceId>, TSharedPtr<MergeId>, TSharedPtr<Error>> variantResult;
                variantResult.Emplace<TSharedPtr<MergeId>>(localVarResult);
                return THTTPResult<TVariant<void*, TSharedPtr<NewResourceId>, TSharedPtr<MergeId>, TSharedPtr<Error>>>::Success(TOptional(variantResult), Response.ResponseCode, Response.Headers);
            }
            else {
                return THTTPResult<TVariant<void*, TSharedPtr<NewResourceId>, TSharedPtr<MergeId>, TSharedPtr<Error>>>::Failure(TEXT("error calling src_handlersv2_merge_post: JSON response was not in the expected format"), 500, Response.Headers);
            }
        }


        else
        {
            return THTTPResult<TVariant<void*, TSharedPtr<NewResourceId>, TSharedPtr<MergeId>, TSharedPtr<Error>>>::Failure(TEXT("error calling src_handlersv2_merge_post: unsupported response type"), 500, Response.Headers);
        }
    }
    if (Response.ResponseCode == 503) {
            FString ErrorMessage = TEXT("General Failure");
            if(Response.Error.IsSet()) {
                ErrorMessage = Response.Error.GetValue();
            } 
            // Try parsing as JSON
            else if(!Response.Contents.IsEmpty()) {
                if(localVarResponseHttpContentType == TEXT("application/json"))
                {
                    TSharedPtr<Error> localVarResult = MakeShared<Error>();
                    TSharedPtr<FJsonValue> JsonValue;
                    TSharedRef<TJsonReader<>> JsonReader = TJsonReaderFactory<>::Create(Response.Contents);
                    if (!FJsonSerializer::Deserialize(JsonReader, JsonValue) || !JsonValue.IsValid())
                    {
                        ErrorMessage = TEXT("Received corrupted error data");
                    }
                    
                    if (localVarResult->FromJson(JsonValue)) {
                        TVariant<void*, TSharedPtr<NewResourceId>, TSharedPtr<MergeId>, TSharedPtr<Error>> variantResult;
                        variantResult.Emplace<TSharedPtr<Error>>(localVarResult);
                        return THTTPResult<TVariant<void*, TSharedPtr<NewResourceId>, TSharedPtr<MergeId>, TSharedPtr<Error>>>::Failure(TEXT("ParsedJsonError"), Response.ResponseCode, Response.Headers, TOptional(variantResult));
                    }
                    else {
                        ErrorMessage = TEXT("Received corrupted error data");
                    }
                }
            }
            FString CurrError = TEXT("error calling src_handlersv2_merge_post: ") + ErrorMessage;
            return THTTPResult<TVariant<void*, TSharedPtr<NewResourceId>, TSharedPtr<MergeId>, TSharedPtr<Error>>>::Failure(CurrError, Response.ResponseCode, Response.Headers);

    }


    if (Response.ResponseCode >= 400)
    {
            FString ErrorMessage = TEXT("General Failure");
            if(Response.Error.IsSet()) {
                ErrorMessage = Response.Error.GetValue();
            } 
            else if(!Response.Contents.IsEmpty()) {
                // Try parsing as JSON
                TSharedPtr<FJsonObject> JsonObject;
                TSharedRef<TJsonReader<>> JsonReader = TJsonReaderFactory<>::Create(Response.Contents);
                if (FJsonSerializer::Deserialize(JsonReader, JsonObject) 
                    && JsonObject.IsValid())
                {
                    if (JsonObject->HasField(TEXT("error_message"))) {
                        ErrorMessage = JsonObject->GetStringField(TEXT("error_message"));
                    }
                    else {
                        // Treat it as an error string 
                        ErrorMessage = Response.Contents;
                    }
                }
                else {
                    // Treat it as an error string 
                    ErrorMessage = Response.Contents;
                }
            }

            FString CurrError = TEXT("error calling src_handlersv2_merge_post: ") + ErrorMessage;
            return THTTPResult<TVariant<void*, TSharedPtr<NewResourceId>, TSharedPtr<MergeId>, TSharedPtr<Error>>>::Failure(CurrError, Response.ResponseCode, Response.Headers);
    }

    // Unepxected response code - TODO: try parse as any of the expected response types
    return THTTPResult<TVariant<void*, TSharedPtr<NewResourceId>, TSharedPtr<MergeId>, TSharedPtr<Error>>>::Failure(TEXT("error calling SrcHandlersv2MergePost: unexpected response code"), Response.ResponseCode, Response.Headers);
}



THTTPResult<TVariant<void*, TSharedPtr<Error>>> RepositoryMergeManipulationApi::SrcHandlersv2MergeSetResult(FString repoId, FString mergeId, FString conflictId, int32_t mode, TSharedPtr<HttpContent> body, TOptional<int64_t> size, TOptional<FString> sha1, TOptional<int32_t> storageBackend, TOptional<FString> storageUri, TOptional<FString> path, 
        const FString& Token,
        const TMap<FString, FString>& Headers,
		int ConnectionTimeoutSeconds, int RequestTimeoutSeconds) const
{

    FString URL = TEXT("/v0/repos/{repo_id}/merges/{merge_id}/conflicts/{conflict_id}");
    URL.ReplaceInline(TEXT("{repo_id}"), *DiversionHttp::URLEncode(DiversionHttp::parameterToString(repoId)));
    URL.ReplaceInline(TEXT("{merge_id}"), *DiversionHttp::URLEncode(DiversionHttp::parameterToString(mergeId)));
    URL.ReplaceInline(TEXT("{conflict_id}"), *DiversionHttp::URLEncode(DiversionHttp::parameterToString(conflictId)));

    TMap<FString, FString> localVarQueryParams;
    TMap<FString, FString> localVarFormParams;
    //TMap<FString, TSharedPtr<HttpContent>> localVarFileParams;

    
    TSet<FString> localVarResponseHttpContentTypes;
    localVarResponseHttpContentTypes.Add(TEXT("application/json"));

    FString localVarResponseHttpContentType;

    // use JSON if possible
    if (localVarResponseHttpContentTypes.Num() == 0)
    {
        localVarResponseHttpContentType = TEXT("application/json");
    }
    // JSON
    else if (localVarResponseHttpContentTypes.Contains(TEXT("application/json")))
    {
        localVarResponseHttpContentType = TEXT("application/json");
    }
    else
    {
        return THTTPResult<TVariant<void*, TSharedPtr<Error>>>::Failure(TEXT("RepositoryMergeManipulationApi->SrcHandlersv2MergeSetResult does not produce any supported media type"), 400, {});
    }

    // TODO: Add this to the headers
    //Headers[TEXT("Accept")] = localVarResponseHttpContentType;

    TSet<FString> localVarConsumeHttpContentTypes;
    localVarConsumeHttpContentTypes.Add(TEXT("application/octet-stream"));

    {
        localVarQueryParams.Add(TEXT("mode"), DiversionHttp::URLEncode(DiversionHttp::parameterToString(mode)));
    }
    if (size.IsSet())
    {
        localVarQueryParams.Add(TEXT("size"), DiversionHttp::URLEncode(DiversionHttp::parameterToString(size.Get(0L))));
    }
    if (sha1.IsSet())
    {
        localVarQueryParams.Add(TEXT("sha1"), DiversionHttp::URLEncode(DiversionHttp::parameterToString(sha1.Get(TEXT("")))));
    }
    if (storageBackend.IsSet())
    {
        localVarQueryParams.Add(TEXT("storage_backend"), DiversionHttp::URLEncode(DiversionHttp::parameterToString(storageBackend.Get(0))));
    }
    if (storageUri.IsSet())
    {
        localVarQueryParams.Add(TEXT("storage_uri"), DiversionHttp::URLEncode(DiversionHttp::parameterToString(storageUri.Get(TEXT("")))));
    }
    if (path.IsSet())
    {
        localVarQueryParams.Add(TEXT("path"), DiversionHttp::URLEncode(DiversionHttp::parameterToString(path.Get(TEXT("")))));
    }

    FString Content = TEXT("");
    // TSharedPtr<IHttpBody> localVarHttpBody;
    FString localVarRequestHttpContentType;

    if (localVarConsumeHttpContentTypes.Contains(TEXT("application/octet-stream")))
    {
        localVarRequestHttpContentType = TEXT("application/octet-stream");
        Content = body->WriteToString();
    }
    else
    {
        return THTTPResult<TVariant<void*, TSharedPtr<Error>>>::Failure(TEXT("RepositoryMergeManipulationApi->SrcHandlersv2MergeSetResult does not consume any supported media type"), 415, {});
    }

    // Add query params
    if (localVarQueryParams.Num() > 0) {
        URL += TEXT("?");
        FString QueryParams;
        for (const auto& Param : localVarQueryParams)
        {
            QueryParams += Param.Key + TEXT("=") + Param.Value + TEXT("&");
        }
        QueryParams.RemoveFromEnd(TEXT("&"));
        URL += QueryParams;
    }

    DiversionHttp::HTTPCallResponse Response = ApiClient->SendRequest(URL, DiversionHttp::HttpMethod::POST, Token, localVarRequestHttpContentType, 
        Content, Headers, ConnectionTimeoutSeconds, RequestTimeoutSeconds);

    // TODO: Add validation - check response content type
    
    if (Response.ResponseCode == 202) {
        TVariant<void*, TSharedPtr<Error>> variantResult;
        variantResult.Emplace<void*>(nullptr);
        return THTTPResult<TVariant<void*, TSharedPtr<Error>>>::Success(TOptional(variantResult), Response.ResponseCode, Response.Headers);

    }
    if (Response.ResponseCode == 0) {
        if(localVarResponseHttpContentType == TEXT("application/json"))
        {
            TSharedPtr<Error> localVarResult = MakeShared<Error>();
            TSharedPtr<FJsonValue> JsonValue;
            TSharedRef<TJsonReader<>> JsonReader = TJsonReaderFactory<>::Create(Response.Contents);
            if (!FJsonSerializer::Deserialize(JsonReader, JsonValue) || !JsonValue.IsValid())
            {
                return THTTPResult<TVariant<void*, TSharedPtr<Error>>>::Failure(TEXT("error calling src_handlersv2_merge_setResult: JSON reader failed parsing the response string"), 500, Response.Headers);
            }

            
            if (localVarResult->FromJson(JsonValue)) {
                TVariant<void*, TSharedPtr<Error>> variantResult;
                variantResult.Emplace<TSharedPtr<Error>>(localVarResult);
                return THTTPResult<TVariant<void*, TSharedPtr<Error>>>::Success(TOptional(variantResult), Response.ResponseCode, Response.Headers);
            }
            else {
                return THTTPResult<TVariant<void*, TSharedPtr<Error>>>::Failure(TEXT("error calling src_handlersv2_merge_setResult: JSON response was not in the expected format"), 500, Response.Headers);
            }
        }


        else
        {
            return THTTPResult<TVariant<void*, TSharedPtr<Error>>>::Failure(TEXT("error calling src_handlersv2_merge_setResult: unsupported response type"), 500, Response.Headers);
        }
    }


    if (Response.ResponseCode >= 400)
    {
            FString ErrorMessage = TEXT("General Failure");
            if(Response.Error.IsSet()) {
                ErrorMessage = Response.Error.GetValue();
            } 
            else if(!Response.Contents.IsEmpty()) {
                // Try parsing as JSON
                TSharedPtr<FJsonObject> JsonObject;
                TSharedRef<TJsonReader<>> JsonReader = TJsonReaderFactory<>::Create(Response.Contents);
                if (FJsonSerializer::Deserialize(JsonReader, JsonObject) 
                    && JsonObject.IsValid())
                {
                    if (JsonObject->HasField(TEXT("error_message"))) {
                        ErrorMessage = JsonObject->GetStringField(TEXT("error_message"));
                    }
                    else {
                        // Treat it as an error string 
                        ErrorMessage = Response.Contents;
                    }
                }
                else {
                    // Treat it as an error string 
                    ErrorMessage = Response.Contents;
                }
            }

            FString CurrError = TEXT("error calling src_handlersv2_merge_setResult: ") + ErrorMessage;
            return THTTPResult<TVariant<void*, TSharedPtr<Error>>>::Failure(CurrError, Response.ResponseCode, Response.Headers);
    }

    // Unepxected response code - TODO: try parse as any of the expected response types
    return THTTPResult<TVariant<void*, TSharedPtr<Error>>>::Failure(TEXT("error calling SrcHandlersv2MergeSetResult: unexpected response code"), Response.ResponseCode, Response.Headers);
}


}
}

