// Copyright 2024 Diversion Company, Inc. All Rights Reserved.
/**
 * Diversion Core API
 * Definition of the Core API used to access low-level functionality of Diversion
 *
 * The version of the OpenAPI document: 0.2.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.10.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "RepositoryWorkspaceManipulationApi.h"
#include "HTTPResult.h"
#include "JsonBody.h"

#include "Types.h"


namespace Diversion {
namespace CoreAPI {

using namespace Diversion::CoreAPI::Model;

RepositoryWorkspaceManipulationApi::RepositoryWorkspaceManipulationApi(TSharedPtr<DiversionHttp::FHttpRequestManager> InApiClient)
     : ApiClient(InApiClient) {}

RepositoryWorkspaceManipulationApi::~RepositoryWorkspaceManipulationApi() {}



THTTPResult<TVariant<void*, TSharedPtr<MergeId>, TSharedPtr<Error>>> RepositoryWorkspaceManipulationApi::SrcHandlersv2WorkspaceForwardWorkspace(FString repoId, FString workspaceId, 
        const FString& Token,
        const TMap<FString, FString>& Headers,
		int ConnectionTimeoutSeconds, int RequestTimeoutSeconds) const
{

    FString URL = TEXT("/v0/repos/{repo_id}/workspaces/{workspace_id}/forward");
    URL.ReplaceInline(TEXT("{repo_id}"), *DiversionHttp::URLEncode(DiversionHttp::parameterToString(repoId)));
    URL.ReplaceInline(TEXT("{workspace_id}"), *DiversionHttp::URLEncode(DiversionHttp::parameterToString(workspaceId)));

    TMap<FString, FString> localVarQueryParams;
    TMap<FString, FString> localVarFormParams;
    //TMap<FString, TSharedPtr<HttpContent>> localVarFileParams;

    
    TSet<FString> localVarResponseHttpContentTypes;
    localVarResponseHttpContentTypes.Add(TEXT("application/json"));

    FString localVarResponseHttpContentType;

    // use JSON if possible
    if (localVarResponseHttpContentTypes.Num() == 0)
    {
        localVarResponseHttpContentType = TEXT("application/json");
    }
    // JSON
    else if (localVarResponseHttpContentTypes.Contains(TEXT("application/json")))
    {
        localVarResponseHttpContentType = TEXT("application/json");
    }
    else
    {
        return THTTPResult<TVariant<void*, TSharedPtr<MergeId>, TSharedPtr<Error>>>::Failure(TEXT("RepositoryWorkspaceManipulationApi->SrcHandlersv2WorkspaceForwardWorkspace does not produce any supported media type"), 400, {});
    }

    // TODO: Add this to the headers
    //Headers[TEXT("Accept")] = localVarResponseHttpContentType;

    TSet<FString> localVarConsumeHttpContentTypes;


    FString Content = TEXT("");
    // TSharedPtr<IHttpBody> localVarHttpBody;
    FString localVarRequestHttpContentType;

    // use JSON if possible
    if (localVarConsumeHttpContentTypes.Num() == 0 || localVarConsumeHttpContentTypes.Contains(TEXT("application/json")))
    {
        localVarRequestHttpContentType = TEXT("application/json");
    }
    else
    {
        return THTTPResult<TVariant<void*, TSharedPtr<MergeId>, TSharedPtr<Error>>>::Failure(TEXT("RepositoryWorkspaceManipulationApi->SrcHandlersv2WorkspaceForwardWorkspace does not consume any supported media type"), 415, {});
    }

    // Add query params
    if (localVarQueryParams.Num() > 0) {
        URL += TEXT("?");
        FString QueryParams;
        for (const auto& Param : localVarQueryParams)
        {
            QueryParams += Param.Key + TEXT("=") + Param.Value + TEXT("&");
        }
        QueryParams.RemoveFromEnd(TEXT("&"));
        URL += QueryParams;
    }

    DiversionHttp::HTTPCallResponse Response = ApiClient->SendRequest(URL, DiversionHttp::HttpMethod::POST, Token, localVarRequestHttpContentType, 
        Content, Headers, ConnectionTimeoutSeconds, RequestTimeoutSeconds);

    // TODO: Add validation - check response content type
    
    if (Response.ResponseCode == 204) {
        TVariant<void*, TSharedPtr<MergeId>, TSharedPtr<Error>> variantResult;
        variantResult.Emplace<void*>(nullptr);
        return THTTPResult<TVariant<void*, TSharedPtr<MergeId>, TSharedPtr<Error>>>::Success(TOptional(variantResult), Response.ResponseCode, Response.Headers);

    }
    if (Response.ResponseCode == 200) {
        TVariant<void*, TSharedPtr<MergeId>, TSharedPtr<Error>> variantResult;
        variantResult.Emplace<void*>(nullptr);
        return THTTPResult<TVariant<void*, TSharedPtr<MergeId>, TSharedPtr<Error>>>::Success(TOptional(variantResult), Response.ResponseCode, Response.Headers);

    }
    if (Response.ResponseCode == 202) {
        if(localVarResponseHttpContentType == TEXT("application/json"))
        {
            TSharedPtr<MergeId> localVarResult = MakeShared<MergeId>();
            TSharedPtr<FJsonValue> JsonValue;
            TSharedRef<TJsonReader<>> JsonReader = TJsonReaderFactory<>::Create(Response.Contents);
            if (!FJsonSerializer::Deserialize(JsonReader, JsonValue) || !JsonValue.IsValid())
            {
                return THTTPResult<TVariant<void*, TSharedPtr<MergeId>, TSharedPtr<Error>>>::Failure(TEXT("error calling src_handlersv2_workspace_forwardWorkspace: JSON reader failed parsing the response string"), 500, Response.Headers);
            }

            
            if (localVarResult->FromJson(JsonValue)) {
                TVariant<void*, TSharedPtr<MergeId>, TSharedPtr<Error>> variantResult;
                variantResult.Emplace<TSharedPtr<MergeId>>(localVarResult);
                return THTTPResult<TVariant<void*, TSharedPtr<MergeId>, TSharedPtr<Error>>>::Success(TOptional(variantResult), Response.ResponseCode, Response.Headers);
            }
            else {
                return THTTPResult<TVariant<void*, TSharedPtr<MergeId>, TSharedPtr<Error>>>::Failure(TEXT("error calling src_handlersv2_workspace_forwardWorkspace: JSON response was not in the expected format"), 500, Response.Headers);
            }
        }


        else
        {
            return THTTPResult<TVariant<void*, TSharedPtr<MergeId>, TSharedPtr<Error>>>::Failure(TEXT("error calling src_handlersv2_workspace_forwardWorkspace: unsupported response type"), 500, Response.Headers);
        }
    }
    if (Response.ResponseCode == 412) {
            FString ErrorMessage = TEXT("General Failure");
            if(Response.Error.IsSet()) {
                ErrorMessage = Response.Error.GetValue();
            } 
            // Try parsing as JSON
            else if(!Response.Contents.IsEmpty()) {
                if(localVarResponseHttpContentType == TEXT("application/json"))
                {
                    TSharedPtr<Error> localVarResult = MakeShared<Error>();
                    TSharedPtr<FJsonValue> JsonValue;
                    TSharedRef<TJsonReader<>> JsonReader = TJsonReaderFactory<>::Create(Response.Contents);
                    if (!FJsonSerializer::Deserialize(JsonReader, JsonValue) || !JsonValue.IsValid())
                    {
                        ErrorMessage = TEXT("Received corrupted error data");
                    }
                    
                    if (localVarResult->FromJson(JsonValue)) {
                        TVariant<void*, TSharedPtr<MergeId>, TSharedPtr<Error>> variantResult;
                        variantResult.Emplace<TSharedPtr<Error>>(localVarResult);
                        return THTTPResult<TVariant<void*, TSharedPtr<MergeId>, TSharedPtr<Error>>>::Failure(TEXT("ParsedJsonError"), Response.ResponseCode, Response.Headers, TOptional(variantResult));
                    }
                    else {
                        ErrorMessage = TEXT("Received corrupted error data");
                    }
                }
            }
            FString CurrError = TEXT("error calling src_handlersv2_workspace_forwardWorkspace: ") + ErrorMessage;
            return THTTPResult<TVariant<void*, TSharedPtr<MergeId>, TSharedPtr<Error>>>::Failure(CurrError, Response.ResponseCode, Response.Headers);

    }
    if (Response.ResponseCode == 503) {
            FString ErrorMessage = TEXT("General Failure");
            if(Response.Error.IsSet()) {
                ErrorMessage = Response.Error.GetValue();
            } 
            // Try parsing as JSON
            else if(!Response.Contents.IsEmpty()) {
                if(localVarResponseHttpContentType == TEXT("application/json"))
                {
                    TSharedPtr<Error> localVarResult = MakeShared<Error>();
                    TSharedPtr<FJsonValue> JsonValue;
                    TSharedRef<TJsonReader<>> JsonReader = TJsonReaderFactory<>::Create(Response.Contents);
                    if (!FJsonSerializer::Deserialize(JsonReader, JsonValue) || !JsonValue.IsValid())
                    {
                        ErrorMessage = TEXT("Received corrupted error data");
                    }
                    
                    if (localVarResult->FromJson(JsonValue)) {
                        TVariant<void*, TSharedPtr<MergeId>, TSharedPtr<Error>> variantResult;
                        variantResult.Emplace<TSharedPtr<Error>>(localVarResult);
                        return THTTPResult<TVariant<void*, TSharedPtr<MergeId>, TSharedPtr<Error>>>::Failure(TEXT("ParsedJsonError"), Response.ResponseCode, Response.Headers, TOptional(variantResult));
                    }
                    else {
                        ErrorMessage = TEXT("Received corrupted error data");
                    }
                }
            }
            FString CurrError = TEXT("error calling src_handlersv2_workspace_forwardWorkspace: ") + ErrorMessage;
            return THTTPResult<TVariant<void*, TSharedPtr<MergeId>, TSharedPtr<Error>>>::Failure(CurrError, Response.ResponseCode, Response.Headers);

    }


    if (Response.ResponseCode >= 400)
    {
            FString ErrorMessage = TEXT("General Failure");
            if(Response.Error.IsSet()) {
                ErrorMessage = Response.Error.GetValue();
            } 
            else if(!Response.Contents.IsEmpty()) {
                // Try parsing as JSON
                TSharedPtr<FJsonObject> JsonObject;
                TSharedRef<TJsonReader<>> JsonReader = TJsonReaderFactory<>::Create(Response.Contents);
                if (FJsonSerializer::Deserialize(JsonReader, JsonObject) 
                    && JsonObject.IsValid())
                {
                    if (JsonObject->HasField(TEXT("error_message"))) {
                        ErrorMessage = JsonObject->GetStringField(TEXT("error_message"));
                    }
                    else {
                        // Treat it as an error string 
                        ErrorMessage = Response.Contents;
                    }
                }
                else {
                    // Treat it as an error string 
                    ErrorMessage = Response.Contents;
                }
            }

            FString CurrError = TEXT("error calling src_handlersv2_workspace_forwardWorkspace: ") + ErrorMessage;
            return THTTPResult<TVariant<void*, TSharedPtr<MergeId>, TSharedPtr<Error>>>::Failure(CurrError, Response.ResponseCode, Response.Headers);
    }

    // Unepxected response code - TODO: try parse as any of the expected response types
    return THTTPResult<TVariant<void*, TSharedPtr<MergeId>, TSharedPtr<Error>>>::Failure(TEXT("error calling SrcHandlersv2WorkspaceForwardWorkspace: unexpected response code"), Response.ResponseCode, Response.Headers);
}



THTTPResult<TVariant<TSharedPtr<RefsFilesStatus>, TSharedPtr<Error>>> RepositoryWorkspaceManipulationApi::SrcHandlersv2WorkspaceGetOtherStatuses(FString repoId, FString workspaceId, TOptional<FString> pathPrefix, TOptional<TArray<FString>> pathPrefixes, TOptional<int32_t> limit, TOptional<int32_t> skip, TOptional<bool> recurse, 
        const FString& Token,
        const TMap<FString, FString>& Headers,
		int ConnectionTimeoutSeconds, int RequestTimeoutSeconds) const
{

    FString URL = TEXT("/v0/repos/{repo_id}/workspaces/{workspace_id}/other_statuses");
    URL.ReplaceInline(TEXT("{repo_id}"), *DiversionHttp::URLEncode(DiversionHttp::parameterToString(repoId)));
    URL.ReplaceInline(TEXT("{workspace_id}"), *DiversionHttp::URLEncode(DiversionHttp::parameterToString(workspaceId)));

    TMap<FString, FString> localVarQueryParams;
    TMap<FString, FString> localVarFormParams;
    //TMap<FString, TSharedPtr<HttpContent>> localVarFileParams;

    
    TSet<FString> localVarResponseHttpContentTypes;
    localVarResponseHttpContentTypes.Add(TEXT("application/json"));

    FString localVarResponseHttpContentType;

    // use JSON if possible
    if (localVarResponseHttpContentTypes.Num() == 0)
    {
        localVarResponseHttpContentType = TEXT("application/json");
    }
    // JSON
    else if (localVarResponseHttpContentTypes.Contains(TEXT("application/json")))
    {
        localVarResponseHttpContentType = TEXT("application/json");
    }
    else
    {
        return THTTPResult<TVariant<TSharedPtr<RefsFilesStatus>, TSharedPtr<Error>>>::Failure(TEXT("RepositoryWorkspaceManipulationApi->SrcHandlersv2WorkspaceGetOtherStatuses does not produce any supported media type"), 400, {});
    }

    // TODO: Add this to the headers
    //Headers[TEXT("Accept")] = localVarResponseHttpContentType;

    TSet<FString> localVarConsumeHttpContentTypes;

    if (pathPrefix.IsSet())
    {
        localVarQueryParams.Add(TEXT("path_prefix"), DiversionHttp::URLEncode(DiversionHttp::parameterToString(pathPrefix.Get(TEXT("")))));
    }
    if (pathPrefixes.IsSet())
    {
        for (const auto& Item : pathPrefixes.GetValue())
        {
            localVarQueryParams.Add(TEXT("path_prefixes"), DiversionHttp::URLEncode(DiversionHttp::parameterToString(Item)));
        }
    }
    if (limit.IsSet())
    {
        localVarQueryParams.Add(TEXT("limit"), DiversionHttp::URLEncode(DiversionHttp::parameterToString(limit.Get(0))));
    }
    if (skip.IsSet())
    {
        localVarQueryParams.Add(TEXT("skip"), DiversionHttp::URLEncode(DiversionHttp::parameterToString(skip.Get(0))));
    }
    if (recurse.IsSet())
    {
        localVarQueryParams.Add(TEXT("recurse"), DiversionHttp::URLEncode(DiversionHttp::parameterToString(recurse.Get(false))));
    }

    FString Content = TEXT("");
    // TSharedPtr<IHttpBody> localVarHttpBody;
    FString localVarRequestHttpContentType;

    // use JSON if possible
    if (localVarConsumeHttpContentTypes.Num() == 0 || localVarConsumeHttpContentTypes.Contains(TEXT("application/json")))
    {
        localVarRequestHttpContentType = TEXT("application/json");
    }
    else
    {
        return THTTPResult<TVariant<TSharedPtr<RefsFilesStatus>, TSharedPtr<Error>>>::Failure(TEXT("RepositoryWorkspaceManipulationApi->SrcHandlersv2WorkspaceGetOtherStatuses does not consume any supported media type"), 415, {});
    }

    // Add query params
    if (localVarQueryParams.Num() > 0) {
        URL += TEXT("?");
        FString QueryParams;
        for (const auto& Param : localVarQueryParams)
        {
            QueryParams += Param.Key + TEXT("=") + Param.Value + TEXT("&");
        }
        QueryParams.RemoveFromEnd(TEXT("&"));
        URL += QueryParams;
    }

    DiversionHttp::HTTPCallResponse Response = ApiClient->SendRequest(URL, DiversionHttp::HttpMethod::GET, Token, localVarRequestHttpContentType, 
        Content, Headers, ConnectionTimeoutSeconds, RequestTimeoutSeconds);

    // TODO: Add validation - check response content type
    
    if (Response.ResponseCode == 200) {
        if(localVarResponseHttpContentType == TEXT("application/json"))
        {
            TSharedPtr<RefsFilesStatus> localVarResult = MakeShared<RefsFilesStatus>();
            TSharedPtr<FJsonValue> JsonValue;
            TSharedRef<TJsonReader<>> JsonReader = TJsonReaderFactory<>::Create(Response.Contents);
            if (!FJsonSerializer::Deserialize(JsonReader, JsonValue) || !JsonValue.IsValid())
            {
                return THTTPResult<TVariant<TSharedPtr<RefsFilesStatus>, TSharedPtr<Error>>>::Failure(TEXT("error calling src_handlersv2_workspace_getOtherStatuses: JSON reader failed parsing the response string"), 500, Response.Headers);
            }

            
            if (localVarResult->FromJson(JsonValue)) {
                TVariant<TSharedPtr<RefsFilesStatus>, TSharedPtr<Error>> variantResult;
                variantResult.Emplace<TSharedPtr<RefsFilesStatus>>(localVarResult);
                return THTTPResult<TVariant<TSharedPtr<RefsFilesStatus>, TSharedPtr<Error>>>::Success(TOptional(variantResult), Response.ResponseCode, Response.Headers);
            }
            else {
                return THTTPResult<TVariant<TSharedPtr<RefsFilesStatus>, TSharedPtr<Error>>>::Failure(TEXT("error calling src_handlersv2_workspace_getOtherStatuses: JSON response was not in the expected format"), 500, Response.Headers);
            }
        }


        else
        {
            return THTTPResult<TVariant<TSharedPtr<RefsFilesStatus>, TSharedPtr<Error>>>::Failure(TEXT("error calling src_handlersv2_workspace_getOtherStatuses: unsupported response type"), 500, Response.Headers);
        }
    }
    if (Response.ResponseCode == 0) {
        if(localVarResponseHttpContentType == TEXT("application/json"))
        {
            TSharedPtr<Error> localVarResult = MakeShared<Error>();
            TSharedPtr<FJsonValue> JsonValue;
            TSharedRef<TJsonReader<>> JsonReader = TJsonReaderFactory<>::Create(Response.Contents);
            if (!FJsonSerializer::Deserialize(JsonReader, JsonValue) || !JsonValue.IsValid())
            {
                return THTTPResult<TVariant<TSharedPtr<RefsFilesStatus>, TSharedPtr<Error>>>::Failure(TEXT("error calling src_handlersv2_workspace_getOtherStatuses: JSON reader failed parsing the response string"), 500, Response.Headers);
            }

            
            if (localVarResult->FromJson(JsonValue)) {
                TVariant<TSharedPtr<RefsFilesStatus>, TSharedPtr<Error>> variantResult;
                variantResult.Emplace<TSharedPtr<Error>>(localVarResult);
                return THTTPResult<TVariant<TSharedPtr<RefsFilesStatus>, TSharedPtr<Error>>>::Success(TOptional(variantResult), Response.ResponseCode, Response.Headers);
            }
            else {
                return THTTPResult<TVariant<TSharedPtr<RefsFilesStatus>, TSharedPtr<Error>>>::Failure(TEXT("error calling src_handlersv2_workspace_getOtherStatuses: JSON response was not in the expected format"), 500, Response.Headers);
            }
        }


        else
        {
            return THTTPResult<TVariant<TSharedPtr<RefsFilesStatus>, TSharedPtr<Error>>>::Failure(TEXT("error calling src_handlersv2_workspace_getOtherStatuses: unsupported response type"), 500, Response.Headers);
        }
    }


    if (Response.ResponseCode >= 400)
    {
            FString ErrorMessage = TEXT("General Failure");
            if(Response.Error.IsSet()) {
                ErrorMessage = Response.Error.GetValue();
            } 
            else if(!Response.Contents.IsEmpty()) {
                // Try parsing as JSON
                TSharedPtr<FJsonObject> JsonObject;
                TSharedRef<TJsonReader<>> JsonReader = TJsonReaderFactory<>::Create(Response.Contents);
                if (FJsonSerializer::Deserialize(JsonReader, JsonObject) 
                    && JsonObject.IsValid())
                {
                    if (JsonObject->HasField(TEXT("error_message"))) {
                        ErrorMessage = JsonObject->GetStringField(TEXT("error_message"));
                    }
                    else {
                        // Treat it as an error string 
                        ErrorMessage = Response.Contents;
                    }
                }
                else {
                    // Treat it as an error string 
                    ErrorMessage = Response.Contents;
                }
            }

            FString CurrError = TEXT("error calling src_handlersv2_workspace_getOtherStatuses: ") + ErrorMessage;
            return THTTPResult<TVariant<TSharedPtr<RefsFilesStatus>, TSharedPtr<Error>>>::Failure(CurrError, Response.ResponseCode, Response.Headers);
    }

    // Unepxected response code - TODO: try parse as any of the expected response types
    return THTTPResult<TVariant<TSharedPtr<RefsFilesStatus>, TSharedPtr<Error>>>::Failure(TEXT("error calling SrcHandlersv2WorkspaceGetOtherStatuses: unexpected response code"), Response.ResponseCode, Response.Headers);
}



THTTPResult<TVariant<TSharedPtr<WorkspaceStatus>, TSharedPtr<Error>>> RepositoryWorkspaceManipulationApi::SrcHandlersv2WorkspaceGetStatus(FString repoId, FString workspaceId, TOptional<bool> detailItems, TOptional<int32_t> limit, TOptional<int32_t> skip, TOptional<bool> recurse, TOptional<FString> pathPrefix, TOptional<bool> allowTrim, 
        const FString& Token,
        const TMap<FString, FString>& Headers,
		int ConnectionTimeoutSeconds, int RequestTimeoutSeconds) const
{

    FString URL = TEXT("/v0/repos/{repo_id}/workspaces/{workspace_id}/status");
    URL.ReplaceInline(TEXT("{repo_id}"), *DiversionHttp::URLEncode(DiversionHttp::parameterToString(repoId)));
    URL.ReplaceInline(TEXT("{workspace_id}"), *DiversionHttp::URLEncode(DiversionHttp::parameterToString(workspaceId)));

    TMap<FString, FString> localVarQueryParams;
    TMap<FString, FString> localVarFormParams;
    //TMap<FString, TSharedPtr<HttpContent>> localVarFileParams;

    
    TSet<FString> localVarResponseHttpContentTypes;
    localVarResponseHttpContentTypes.Add(TEXT("application/json"));

    FString localVarResponseHttpContentType;

    // use JSON if possible
    if (localVarResponseHttpContentTypes.Num() == 0)
    {
        localVarResponseHttpContentType = TEXT("application/json");
    }
    // JSON
    else if (localVarResponseHttpContentTypes.Contains(TEXT("application/json")))
    {
        localVarResponseHttpContentType = TEXT("application/json");
    }
    else
    {
        return THTTPResult<TVariant<TSharedPtr<WorkspaceStatus>, TSharedPtr<Error>>>::Failure(TEXT("RepositoryWorkspaceManipulationApi->SrcHandlersv2WorkspaceGetStatus does not produce any supported media type"), 400, {});
    }

    // TODO: Add this to the headers
    //Headers[TEXT("Accept")] = localVarResponseHttpContentType;

    TSet<FString> localVarConsumeHttpContentTypes;

    if (detailItems.IsSet())
    {
        localVarQueryParams.Add(TEXT("detail_items"), DiversionHttp::URLEncode(DiversionHttp::parameterToString(detailItems.Get(false))));
    }
    if (limit.IsSet())
    {
        localVarQueryParams.Add(TEXT("limit"), DiversionHttp::URLEncode(DiversionHttp::parameterToString(limit.Get(0))));
    }
    if (skip.IsSet())
    {
        localVarQueryParams.Add(TEXT("skip"), DiversionHttp::URLEncode(DiversionHttp::parameterToString(skip.Get(0))));
    }
    if (recurse.IsSet())
    {
        localVarQueryParams.Add(TEXT("recurse"), DiversionHttp::URLEncode(DiversionHttp::parameterToString(recurse.Get(false))));
    }
    if (pathPrefix.IsSet())
    {
        localVarQueryParams.Add(TEXT("path_prefix"), DiversionHttp::URLEncode(DiversionHttp::parameterToString(pathPrefix.Get(TEXT("")))));
    }
    if (allowTrim.IsSet())
    {
        localVarQueryParams.Add(TEXT("allow_trim"), DiversionHttp::URLEncode(DiversionHttp::parameterToString(allowTrim.Get(false))));
    }

    FString Content = TEXT("");
    // TSharedPtr<IHttpBody> localVarHttpBody;
    FString localVarRequestHttpContentType;

    // use JSON if possible
    if (localVarConsumeHttpContentTypes.Num() == 0 || localVarConsumeHttpContentTypes.Contains(TEXT("application/json")))
    {
        localVarRequestHttpContentType = TEXT("application/json");
    }
    else
    {
        return THTTPResult<TVariant<TSharedPtr<WorkspaceStatus>, TSharedPtr<Error>>>::Failure(TEXT("RepositoryWorkspaceManipulationApi->SrcHandlersv2WorkspaceGetStatus does not consume any supported media type"), 415, {});
    }

    // Add query params
    if (localVarQueryParams.Num() > 0) {
        URL += TEXT("?");
        FString QueryParams;
        for (const auto& Param : localVarQueryParams)
        {
            QueryParams += Param.Key + TEXT("=") + Param.Value + TEXT("&");
        }
        QueryParams.RemoveFromEnd(TEXT("&"));
        URL += QueryParams;
    }

    DiversionHttp::HTTPCallResponse Response = ApiClient->SendRequest(URL, DiversionHttp::HttpMethod::GET, Token, localVarRequestHttpContentType, 
        Content, Headers, ConnectionTimeoutSeconds, RequestTimeoutSeconds);

    // TODO: Add validation - check response content type
    
    if (Response.ResponseCode == 200) {
        if(localVarResponseHttpContentType == TEXT("application/json"))
        {
            TSharedPtr<WorkspaceStatus> localVarResult = MakeShared<WorkspaceStatus>();
            TSharedPtr<FJsonValue> JsonValue;
            TSharedRef<TJsonReader<>> JsonReader = TJsonReaderFactory<>::Create(Response.Contents);
            if (!FJsonSerializer::Deserialize(JsonReader, JsonValue) || !JsonValue.IsValid())
            {
                return THTTPResult<TVariant<TSharedPtr<WorkspaceStatus>, TSharedPtr<Error>>>::Failure(TEXT("error calling src_handlersv2_workspace_getStatus: JSON reader failed parsing the response string"), 500, Response.Headers);
            }

            
            if (localVarResult->FromJson(JsonValue)) {
                TVariant<TSharedPtr<WorkspaceStatus>, TSharedPtr<Error>> variantResult;
                variantResult.Emplace<TSharedPtr<WorkspaceStatus>>(localVarResult);
                return THTTPResult<TVariant<TSharedPtr<WorkspaceStatus>, TSharedPtr<Error>>>::Success(TOptional(variantResult), Response.ResponseCode, Response.Headers);
            }
            else {
                return THTTPResult<TVariant<TSharedPtr<WorkspaceStatus>, TSharedPtr<Error>>>::Failure(TEXT("error calling src_handlersv2_workspace_getStatus: JSON response was not in the expected format"), 500, Response.Headers);
            }
        }


        else
        {
            return THTTPResult<TVariant<TSharedPtr<WorkspaceStatus>, TSharedPtr<Error>>>::Failure(TEXT("error calling src_handlersv2_workspace_getStatus: unsupported response type"), 500, Response.Headers);
        }
    }
    if (Response.ResponseCode == 0) {
        if(localVarResponseHttpContentType == TEXT("application/json"))
        {
            TSharedPtr<Error> localVarResult = MakeShared<Error>();
            TSharedPtr<FJsonValue> JsonValue;
            TSharedRef<TJsonReader<>> JsonReader = TJsonReaderFactory<>::Create(Response.Contents);
            if (!FJsonSerializer::Deserialize(JsonReader, JsonValue) || !JsonValue.IsValid())
            {
                return THTTPResult<TVariant<TSharedPtr<WorkspaceStatus>, TSharedPtr<Error>>>::Failure(TEXT("error calling src_handlersv2_workspace_getStatus: JSON reader failed parsing the response string"), 500, Response.Headers);
            }

            
            if (localVarResult->FromJson(JsonValue)) {
                TVariant<TSharedPtr<WorkspaceStatus>, TSharedPtr<Error>> variantResult;
                variantResult.Emplace<TSharedPtr<Error>>(localVarResult);
                return THTTPResult<TVariant<TSharedPtr<WorkspaceStatus>, TSharedPtr<Error>>>::Success(TOptional(variantResult), Response.ResponseCode, Response.Headers);
            }
            else {
                return THTTPResult<TVariant<TSharedPtr<WorkspaceStatus>, TSharedPtr<Error>>>::Failure(TEXT("error calling src_handlersv2_workspace_getStatus: JSON response was not in the expected format"), 500, Response.Headers);
            }
        }


        else
        {
            return THTTPResult<TVariant<TSharedPtr<WorkspaceStatus>, TSharedPtr<Error>>>::Failure(TEXT("error calling src_handlersv2_workspace_getStatus: unsupported response type"), 500, Response.Headers);
        }
    }


    if (Response.ResponseCode >= 400)
    {
            FString ErrorMessage = TEXT("General Failure");
            if(Response.Error.IsSet()) {
                ErrorMessage = Response.Error.GetValue();
            } 
            else if(!Response.Contents.IsEmpty()) {
                // Try parsing as JSON
                TSharedPtr<FJsonObject> JsonObject;
                TSharedRef<TJsonReader<>> JsonReader = TJsonReaderFactory<>::Create(Response.Contents);
                if (FJsonSerializer::Deserialize(JsonReader, JsonObject) 
                    && JsonObject.IsValid())
                {
                    if (JsonObject->HasField(TEXT("error_message"))) {
                        ErrorMessage = JsonObject->GetStringField(TEXT("error_message"));
                    }
                    else {
                        // Treat it as an error string 
                        ErrorMessage = Response.Contents;
                    }
                }
                else {
                    // Treat it as an error string 
                    ErrorMessage = Response.Contents;
                }
            }

            FString CurrError = TEXT("error calling src_handlersv2_workspace_getStatus: ") + ErrorMessage;
            return THTTPResult<TVariant<TSharedPtr<WorkspaceStatus>, TSharedPtr<Error>>>::Failure(CurrError, Response.ResponseCode, Response.Headers);
    }

    // Unepxected response code - TODO: try parse as any of the expected response types
    return THTTPResult<TVariant<TSharedPtr<WorkspaceStatus>, TSharedPtr<Error>>>::Failure(TEXT("error calling SrcHandlersv2WorkspaceGetStatus: unexpected response code"), Response.ResponseCode, Response.Headers);
}



THTTPResult<TVariant<TSharedPtr<ResetStatus>, TSharedPtr<Error>>> RepositoryWorkspaceManipulationApi::SrcHandlersv2WorkspaceReset(FString repoId, FString workspaceId, TSharedPtr<Src_handlersv2_workspace_reset_request> srcHandlersv2WorkspaceResetRequest, 
        const FString& Token,
        const TMap<FString, FString>& Headers,
		int ConnectionTimeoutSeconds, int RequestTimeoutSeconds) const
{

    // verify the required parameter 'srcHandlersv2WorkspaceResetRequest' is set
    if (srcHandlersv2WorkspaceResetRequest == nullptr)
    {
        return THTTPResult<TVariant<TSharedPtr<ResetStatus>, TSharedPtr<Error>>>::Failure(TEXT("Missing required parameter 'srcHandlersv2WorkspaceResetRequest' when calling RepositoryWorkspaceManipulationApi->SrcHandlersv2WorkspaceReset"), 400, {});
    }

    FString URL = TEXT("/v0/repos/{repo_id}/workspaces/{workspace_id}/reset");
    URL.ReplaceInline(TEXT("{repo_id}"), *DiversionHttp::URLEncode(DiversionHttp::parameterToString(repoId)));
    URL.ReplaceInline(TEXT("{workspace_id}"), *DiversionHttp::URLEncode(DiversionHttp::parameterToString(workspaceId)));

    TMap<FString, FString> localVarQueryParams;
    TMap<FString, FString> localVarFormParams;
    //TMap<FString, TSharedPtr<HttpContent>> localVarFileParams;

    
    TSet<FString> localVarResponseHttpContentTypes;
    localVarResponseHttpContentTypes.Add(TEXT("application/json"));

    FString localVarResponseHttpContentType;

    // use JSON if possible
    if (localVarResponseHttpContentTypes.Num() == 0)
    {
        localVarResponseHttpContentType = TEXT("application/json");
    }
    // JSON
    else if (localVarResponseHttpContentTypes.Contains(TEXT("application/json")))
    {
        localVarResponseHttpContentType = TEXT("application/json");
    }
    else
    {
        return THTTPResult<TVariant<TSharedPtr<ResetStatus>, TSharedPtr<Error>>>::Failure(TEXT("RepositoryWorkspaceManipulationApi->SrcHandlersv2WorkspaceReset does not produce any supported media type"), 400, {});
    }

    // TODO: Add this to the headers
    //Headers[TEXT("Accept")] = localVarResponseHttpContentType;

    TSet<FString> localVarConsumeHttpContentTypes;
    localVarConsumeHttpContentTypes.Add(TEXT("application/json"));


    FString Content = TEXT("");
    // TSharedPtr<IHttpBody> localVarHttpBody;
    FString localVarRequestHttpContentType;

    // use JSON if possible
    if (localVarConsumeHttpContentTypes.Num() == 0 || localVarConsumeHttpContentTypes.Contains(TEXT("application/json")))
    {
        localVarRequestHttpContentType = TEXT("application/json");

        JsonWriter ContentWriter = TJsonWriterFactory<>::Create(&Content);
        
        srcHandlersv2WorkspaceResetRequest->WriteJson(ContentWriter);
        
        ContentWriter->Close();

    }
    else
    {
        return THTTPResult<TVariant<TSharedPtr<ResetStatus>, TSharedPtr<Error>>>::Failure(TEXT("RepositoryWorkspaceManipulationApi->SrcHandlersv2WorkspaceReset does not consume any supported media type"), 415, {});
    }

    // Add query params
    if (localVarQueryParams.Num() > 0) {
        URL += TEXT("?");
        FString QueryParams;
        for (const auto& Param : localVarQueryParams)
        {
            QueryParams += Param.Key + TEXT("=") + Param.Value + TEXT("&");
        }
        QueryParams.RemoveFromEnd(TEXT("&"));
        URL += QueryParams;
    }

    DiversionHttp::HTTPCallResponse Response = ApiClient->SendRequest(URL, DiversionHttp::HttpMethod::POST, Token, localVarRequestHttpContentType, 
        Content, Headers, ConnectionTimeoutSeconds, RequestTimeoutSeconds);

    // TODO: Add validation - check response content type
    
    if (Response.ResponseCode == 200) {
        if(localVarResponseHttpContentType == TEXT("application/json"))
        {
            TSharedPtr<ResetStatus> localVarResult = MakeShared<ResetStatus>();
            TSharedPtr<FJsonValue> JsonValue;
            TSharedRef<TJsonReader<>> JsonReader = TJsonReaderFactory<>::Create(Response.Contents);
            if (!FJsonSerializer::Deserialize(JsonReader, JsonValue) || !JsonValue.IsValid())
            {
                return THTTPResult<TVariant<TSharedPtr<ResetStatus>, TSharedPtr<Error>>>::Failure(TEXT("error calling src_handlersv2_workspace_reset: JSON reader failed parsing the response string"), 500, Response.Headers);
            }

            
            if (localVarResult->FromJson(JsonValue)) {
                TVariant<TSharedPtr<ResetStatus>, TSharedPtr<Error>> variantResult;
                variantResult.Emplace<TSharedPtr<ResetStatus>>(localVarResult);
                return THTTPResult<TVariant<TSharedPtr<ResetStatus>, TSharedPtr<Error>>>::Success(TOptional(variantResult), Response.ResponseCode, Response.Headers);
            }
            else {
                return THTTPResult<TVariant<TSharedPtr<ResetStatus>, TSharedPtr<Error>>>::Failure(TEXT("error calling src_handlersv2_workspace_reset: JSON response was not in the expected format"), 500, Response.Headers);
            }
        }


        else
        {
            return THTTPResult<TVariant<TSharedPtr<ResetStatus>, TSharedPtr<Error>>>::Failure(TEXT("error calling src_handlersv2_workspace_reset: unsupported response type"), 500, Response.Headers);
        }
    }
    if (Response.ResponseCode == 0) {
        if(localVarResponseHttpContentType == TEXT("application/json"))
        {
            TSharedPtr<Error> localVarResult = MakeShared<Error>();
            TSharedPtr<FJsonValue> JsonValue;
            TSharedRef<TJsonReader<>> JsonReader = TJsonReaderFactory<>::Create(Response.Contents);
            if (!FJsonSerializer::Deserialize(JsonReader, JsonValue) || !JsonValue.IsValid())
            {
                return THTTPResult<TVariant<TSharedPtr<ResetStatus>, TSharedPtr<Error>>>::Failure(TEXT("error calling src_handlersv2_workspace_reset: JSON reader failed parsing the response string"), 500, Response.Headers);
            }

            
            if (localVarResult->FromJson(JsonValue)) {
                TVariant<TSharedPtr<ResetStatus>, TSharedPtr<Error>> variantResult;
                variantResult.Emplace<TSharedPtr<Error>>(localVarResult);
                return THTTPResult<TVariant<TSharedPtr<ResetStatus>, TSharedPtr<Error>>>::Success(TOptional(variantResult), Response.ResponseCode, Response.Headers);
            }
            else {
                return THTTPResult<TVariant<TSharedPtr<ResetStatus>, TSharedPtr<Error>>>::Failure(TEXT("error calling src_handlersv2_workspace_reset: JSON response was not in the expected format"), 500, Response.Headers);
            }
        }


        else
        {
            return THTTPResult<TVariant<TSharedPtr<ResetStatus>, TSharedPtr<Error>>>::Failure(TEXT("error calling src_handlersv2_workspace_reset: unsupported response type"), 500, Response.Headers);
        }
    }


    if (Response.ResponseCode >= 400)
    {
            FString ErrorMessage = TEXT("General Failure");
            if(Response.Error.IsSet()) {
                ErrorMessage = Response.Error.GetValue();
            } 
            else if(!Response.Contents.IsEmpty()) {
                // Try parsing as JSON
                TSharedPtr<FJsonObject> JsonObject;
                TSharedRef<TJsonReader<>> JsonReader = TJsonReaderFactory<>::Create(Response.Contents);
                if (FJsonSerializer::Deserialize(JsonReader, JsonObject) 
                    && JsonObject.IsValid())
                {
                    if (JsonObject->HasField(TEXT("error_message"))) {
                        ErrorMessage = JsonObject->GetStringField(TEXT("error_message"));
                    }
                    else {
                        // Treat it as an error string 
                        ErrorMessage = Response.Contents;
                    }
                }
                else {
                    // Treat it as an error string 
                    ErrorMessage = Response.Contents;
                }
            }

            FString CurrError = TEXT("error calling src_handlersv2_workspace_reset: ") + ErrorMessage;
            return THTTPResult<TVariant<TSharedPtr<ResetStatus>, TSharedPtr<Error>>>::Failure(CurrError, Response.ResponseCode, Response.Headers);
    }

    // Unepxected response code - TODO: try parse as any of the expected response types
    return THTTPResult<TVariant<TSharedPtr<ResetStatus>, TSharedPtr<Error>>>::Failure(TEXT("error calling SrcHandlersv2WorkspaceReset: unexpected response code"), Response.ResponseCode, Response.Headers);
}


}
}

