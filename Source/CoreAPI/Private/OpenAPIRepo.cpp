// Copyright 2024 Diversion Company, Inc. All Rights Reserved.
/**
 * Diversion Core API
 * Definition of the Core API used to access low-level functionality of Diversion
 *
 * OpenAPI spec version: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIRepo.h"

#include "CoreAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace CoreAPI
{

void OpenAPIRepo::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("repo_name")); WriteJsonValue(Writer, RepoName);
	if (Description.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("description")); WriteJsonValue(Writer, Description.GetValue());
	}
	Writer->WriteIdentifierPrefix(TEXT("repo_id")); WriteJsonValue(Writer, RepoId);
	if (DefaultBranchId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("default_branch_id")); WriteJsonValue(Writer, DefaultBranchId.GetValue());
	}
	if (DefaultBranchName.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("default_branch_name")); WriteJsonValue(Writer, DefaultBranchName.GetValue());
	}
	Writer->WriteIdentifierPrefix(TEXT("size_bytes")); WriteJsonValue(Writer, SizeBytes);
	Writer->WriteIdentifierPrefix(TEXT("owner_user_id")); WriteJsonValue(Writer, OwnerUserId);
	Writer->WriteIdentifierPrefix(TEXT("created_timestamp")); WriteJsonValue(Writer, CreatedTimestamp);
	if (SyncGitRepoUrl.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("sync_git_repo_url")); WriteJsonValue(Writer, SyncGitRepoUrl.GetValue());
	}
	if (SyncGitLevel.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("sync_git_level")); WriteJsonValue(Writer, SyncGitLevel.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPIRepo::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* InnerGeneratorOpenAPIObject;
	if (!JsonValue->TryGetObject(InnerGeneratorOpenAPIObject))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("repo_name"), RepoName);
	ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("description"), Description);
	ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("repo_id"), RepoId);
	ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("default_branch_id"), DefaultBranchId);
	ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("default_branch_name"), DefaultBranchName);
	ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("size_bytes"), SizeBytes);
	ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("owner_user_id"), OwnerUserId);
	ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("created_timestamp"), CreatedTimestamp);
	ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("sync_git_repo_url"), SyncGitRepoUrl);
	ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("sync_git_level"), SyncGitLevel);

	return ParseSuccess;
}

}
