// Copyright 2024 Diversion Company, Inc. All Rights Reserved.
/**
 * Diversion Core API
 * Definition of the Core API used to access low-level functionality of Diversion
 *
 * OpenAPI spec version: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIFileEntry.h"

#include "CoreAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace CoreAPI
{

void OpenAPIFileEntry::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("path")); WriteJsonValue(Writer, Path);
	if (PrevPath.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("prev_path")); WriteJsonValue(Writer, PrevPath.GetValue());
	}
	if (Hash.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("hash")); WriteJsonValue(Writer, Hash.GetValue());
	}
	if (PrevHash.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("prev_hash")); WriteJsonValue(Writer, PrevHash.GetValue());
	}
	Writer->WriteIdentifierPrefix(TEXT("status")); WriteJsonValue(Writer, Status);
	Writer->WriteIdentifierPrefix(TEXT("mode")); WriteJsonValue(Writer, Mode);
	if (Mtime.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("mtime")); WriteJsonValue(Writer, Mtime.GetValue());
	}
	if (Blob.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("blob")); WriteJsonValue(Writer, Blob.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPIFileEntry::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* InnerGeneratorOpenAPIObject;
	if (!JsonValue->TryGetObject(InnerGeneratorOpenAPIObject))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("path"), Path);
	ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("prev_path"), PrevPath);
	ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("hash"), Hash);
	ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("prev_hash"), PrevHash);
	ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("status"), Status);
	ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("mode"), Mode);
	ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("mtime"), Mtime);
	ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("blob"), Blob);

	return ParseSuccess;
}

}
