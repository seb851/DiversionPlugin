// Copyright 2024 Diversion Company, Inc. All Rights Reserved.
/**
 * Diversion Core API
 * Definition of the Core API used to access low-level functionality of Diversion
 *
 * OpenAPI spec version: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIConflictIndex.h"

#include "CoreAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace CoreAPI
{

inline FString ToString(const OpenAPIConflictIndex::ConflictIndexIdEnum& Value)
{
	switch (Value)
	{
	case OpenAPIConflictIndex::ConflictIndexIdEnum::Result:
		return TEXT("RESULT");
	case OpenAPIConflictIndex::ConflictIndexIdEnum::Base:
		return TEXT("BASE");
	case OpenAPIConflictIndex::ConflictIndexIdEnum::Other:
		return TEXT("OTHER");
	}

	UE_LOG(LogCoreAPI, Error, TEXT("Invalid OpenAPIConflictIndex::ConflictIndexIdEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIConflictIndex::EnumToString(const OpenAPIConflictIndex::ConflictIndexIdEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIConflictIndex::ConflictIndexIdEnum& Value)
{
	static TMap<FString, OpenAPIConflictIndex::ConflictIndexIdEnum> StringToEnum = { 
		{ TEXT("RESULT"), OpenAPIConflictIndex::ConflictIndexIdEnum::Result },
		{ TEXT("BASE"), OpenAPIConflictIndex::ConflictIndexIdEnum::Base },
		{ TEXT("OTHER"), OpenAPIConflictIndex::ConflictIndexIdEnum::Other }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIConflictIndex::EnumFromString(const FString& EnumAsString, OpenAPIConflictIndex::ConflictIndexIdEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIConflictIndex::ConflictIndexIdEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIConflictIndex::ConflictIndexIdEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void OpenAPIConflictIndex::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("conflict_index_id")); WriteJsonValue(Writer, ConflictIndexId);
	Writer->WriteIdentifierPrefix(TEXT("file_mode")); WriteJsonValue(Writer, FileMode);
	Writer->WriteIdentifierPrefix(TEXT("path")); WriteJsonValue(Writer, Path);
	if (PrevPath.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("prev_path")); WriteJsonValue(Writer, PrevPath.GetValue());
	}
	Writer->WriteIdentifierPrefix(TEXT("type")); WriteJsonValue(Writer, Type);
	if (StorageBackend.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("storage_backend")); WriteJsonValue(Writer, StorageBackend.GetValue());
	}
	if (StorageUri.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("storage_uri")); WriteJsonValue(Writer, StorageUri.GetValue());
	}
	if (Size.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("size")); WriteJsonValue(Writer, Size.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPIConflictIndex::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* InnerGeneratorOpenAPIObject;
	if (!JsonValue->TryGetObject(InnerGeneratorOpenAPIObject))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("conflict_index_id"), ConflictIndexId);
	ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("file_mode"), FileMode);
	ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("path"), Path);
	ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("prev_path"), PrevPath);
	ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("type"), Type);
	ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("storage_backend"), StorageBackend);
	ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("storage_uri"), StorageUri);
	ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("size"), Size);

	return ParseSuccess;
}

}
