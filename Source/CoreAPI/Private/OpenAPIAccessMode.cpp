// Copyright 2024 Diversion Company, Inc. All Rights Reserved.
/**
 * Diversion Core API
 * Definition of the Core API used to access low-level functionality of Diversion
 *
 * OpenAPI spec version: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIAccessMode.h"

#include "CoreAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace CoreAPI
{

inline FString ToString(const OpenAPIAccessMode::Values& Value)
{
	switch (Value)
	{
	case OpenAPIAccessMode::Values::Read:
		return TEXT("Read");
	case OpenAPIAccessMode::Values::Write:
		return TEXT("Write");
	case OpenAPIAccessMode::Values::Admin:
		return TEXT("Admin");
	case OpenAPIAccessMode::Values::Owner:
		return TEXT("Owner");
	}

	UE_LOG(LogCoreAPI, Error, TEXT("Invalid OpenAPIAccessMode::Values Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIAccessMode::EnumToString(const OpenAPIAccessMode::Values& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIAccessMode::Values& Value)
{
	static TMap<FString, OpenAPIAccessMode::Values> StringToEnum = { 
		{ TEXT("Read"), OpenAPIAccessMode::Values::Read },
		{ TEXT("Write"), OpenAPIAccessMode::Values::Write },
		{ TEXT("Admin"), OpenAPIAccessMode::Values::Admin },
		{ TEXT("Owner"), OpenAPIAccessMode::Values::Owner }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIAccessMode::EnumFromString(const FString& EnumAsString, OpenAPIAccessMode::Values& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIAccessMode::Values& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIAccessMode::Values& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void OpenAPIAccessMode::WriteJson(JsonWriter& Writer) const
{
	WriteJsonValue(Writer, Value);
}

bool OpenAPIAccessMode::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Value);
}

}
