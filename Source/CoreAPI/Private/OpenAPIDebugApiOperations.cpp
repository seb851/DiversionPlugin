// Copyright 2024 Diversion Company, Inc. All Rights Reserved.
/**
 * Diversion Core API
 * Definition of the Core API used to access low-level functionality of Diversion
 *
 * OpenAPI spec version: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIDebugApiOperations.h"

#include "CoreAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Dom/JsonObject.h"
#include "Templates/SharedPointer.h"
#include "HttpModule.h"
#include "PlatformHttp.h"

namespace CoreAPI
{

FString OpenAPIDebugApi::SrcHandlersDebugIsAliveRequest::ComputePath() const
{
	FString InnerGeneratorOpenAPIPath(TEXT("/debug/isalive"));
	return InnerGeneratorOpenAPIPath;
}

void OpenAPIDebugApi::SrcHandlersDebugIsAliveRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = {  };

	HttpRequest->SetVerb(TEXT("GET"));

}

void OpenAPIDebugApi::SrcHandlersDebugIsAliveResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Request completed successfully"));
		break;
	}
}

bool OpenAPIDebugApi::SrcHandlersDebugIsAliveResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return true;
}

}
