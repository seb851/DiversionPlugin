// Copyright 2024 Diversion Company, Inc. All Rights Reserved.
/**
 * Diversion Core API
 * Definition of the Core API used to access low-level functionality of Diversion
 *
 * The version of the OpenAPI document: 0.2.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.10.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "JsonBody.h"
#include "OrganizationInvite.h"

namespace Diversion {
namespace CoreAPI {
namespace Model {



void OrganizationInvite::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	if (mId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("id")); WriteJsonValue(Writer, mId.GetValue());
	}
	if (mOrganization_id.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("organization_id")); WriteJsonValue(Writer, mOrganization_id.GetValue());
	}
	if (mInviting_user_id.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("inviting_user_id")); WriteJsonValue(Writer, mInviting_user_id.GetValue());
	}
	if (mInvited_email.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("invited_email")); WriteJsonValue(Writer, mInvited_email.GetValue());
	}
	if (mStatus.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("status")); WriteJsonValue(Writer, OrganizationInvite::EnumToString(mStatus.GetValue()));
	}
	if (mCreated.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("created")); WriteJsonValue(Writer, mCreated.GetValue());
	}
	if (mExpires.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("expires")); WriteJsonValue(Writer, mExpires.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OrganizationInvite::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{

	const TSharedPtr<FJsonObject>* InnerGeneratorOpenAPIObject;
	if (!JsonValue->TryGetObject(InnerGeneratorOpenAPIObject))
		return false;

	bool ParseSuccess = true;

    

    ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("id"), mId);
    ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("organization_id"), mOrganization_id);
    ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("inviting_user_id"), mInviting_user_id);
    ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("invited_email"), mInvited_email);
    // Reading the value into a string enum first
    TOptional<FString> StatusString;
    bool ParseEnumStatusStringSuccess = TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("status"), StatusString);
    if (ParseEnumStatusStringSuccess && StatusString.IsSet()) {
        ParseSuccess &= OrganizationInvite::EnumFromString(StatusString.GetValue(), mStatus);
    }
    ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("created"), mCreated);
    ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("expires"), mExpires);


	return ParseSuccess;
}


FString OrganizationInvite::EnumToString(const TOptional<StatusEnum>& EnumValue) {
    if(!EnumValue.IsSet()) return TEXT("");
    switch (EnumValue.GetValue())
    {
    case StatusEnum::PENDING:
        return TEXT("PENDING");
    case StatusEnum::ACCEPTED:
        return TEXT("ACCEPTED");
    case StatusEnum::REJECTED:
        return TEXT("REJECTED");
    default:
        return TEXT("");
    }
}

bool OrganizationInvite::EnumFromString(const FString& EnumAsString, TOptional<StatusEnum>& EnumValue) {
    if(EnumAsString.IsEmpty()) return false;
    if(EnumAsString == TEXT("PENDING")) {
        EnumValue = StatusEnum::PENDING;
        return true;
    }
    if(EnumAsString == TEXT("ACCEPTED")) {
        EnumValue = StatusEnum::ACCEPTED;
        return true;
    }
    if(EnumAsString == TEXT("REJECTED")) {
        EnumValue = StatusEnum::REJECTED;
        return true;
    }

    return false;
}


}
}
}

