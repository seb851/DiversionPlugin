// Copyright 2024 Diversion Company, Inc. All Rights Reserved.
/**
 * Diversion Core API
 * Definition of the Core API used to access low-level functionality of Diversion
 *
 * The version of the OpenAPI document: 0.2.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.10.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "RepositoryManagementApi.h"
#include "HTTPResult.h"
#include "JsonBody.h"

#include "Types.h"


namespace Diversion {
namespace CoreAPI {

using namespace Diversion::CoreAPI::Model;

RepositoryManagementApi::RepositoryManagementApi(TSharedPtr<DiversionHttp::FHttpRequestManager> InApiClient)
     : ApiClient(InApiClient) {}

RepositoryManagementApi::~RepositoryManagementApi() {}



THTTPResult<TVariant<TSharedPtr<Src_handlersv2_repo_list_all_200_response>, TSharedPtr<Error>>> RepositoryManagementApi::SrcHandlersv2RepoListAll(TOptional<bool> owned, 
        const FString& Token,
        const TMap<FString, FString>& Headers,
		int ConnectionTimeoutSeconds, int RequestTimeoutSeconds) const
{

    FString URL = TEXT("/v0/repos");

    TMap<FString, FString> localVarQueryParams;
    TMap<FString, FString> localVarFormParams;
    //TMap<FString, TSharedPtr<HttpContent>> localVarFileParams;

    
    TSet<FString> localVarResponseHttpContentTypes;
    localVarResponseHttpContentTypes.Add(TEXT("application/json"));

    FString localVarResponseHttpContentType;

    // use JSON if possible
    if (localVarResponseHttpContentTypes.Num() == 0)
    {
        localVarResponseHttpContentType = TEXT("application/json");
    }
    // JSON
    else if (localVarResponseHttpContentTypes.Contains(TEXT("application/json")))
    {
        localVarResponseHttpContentType = TEXT("application/json");
    }
    else
    {
        return THTTPResult<TVariant<TSharedPtr<Src_handlersv2_repo_list_all_200_response>, TSharedPtr<Error>>>::Failure(TEXT("RepositoryManagementApi->SrcHandlersv2RepoListAll does not produce any supported media type"), 400, {});
    }

    // TODO: Add this to the headers
    //Headers[TEXT("Accept")] = localVarResponseHttpContentType;

    TSet<FString> localVarConsumeHttpContentTypes;

    if (owned.IsSet())
    {
        localVarQueryParams.Add(TEXT("owned"), DiversionHttp::URLEncode(DiversionHttp::parameterToString(owned.Get(false))));
    }

    FString Content = TEXT("");
    // TSharedPtr<IHttpBody> localVarHttpBody;
    FString localVarRequestHttpContentType;

    // use JSON if possible
    if (localVarConsumeHttpContentTypes.Num() == 0 || localVarConsumeHttpContentTypes.Contains(TEXT("application/json")))
    {
        localVarRequestHttpContentType = TEXT("application/json");
    }
    else
    {
        return THTTPResult<TVariant<TSharedPtr<Src_handlersv2_repo_list_all_200_response>, TSharedPtr<Error>>>::Failure(TEXT("RepositoryManagementApi->SrcHandlersv2RepoListAll does not consume any supported media type"), 415, {});
    }

    // Add query params
    if (localVarQueryParams.Num() > 0) {
        URL += TEXT("?");
        FString QueryParams;
        for (const auto& Param : localVarQueryParams)
        {
            QueryParams += Param.Key + TEXT("=") + Param.Value + TEXT("&");
        }
        QueryParams.RemoveFromEnd(TEXT("&"));
        URL += QueryParams;
    }

    DiversionHttp::HTTPCallResponse Response = ApiClient->SendRequest(URL, DiversionHttp::HttpMethod::GET, Token, localVarRequestHttpContentType, 
        Content, Headers, ConnectionTimeoutSeconds, RequestTimeoutSeconds);

    // TODO: Add validation - check response content type
    
    if (Response.ResponseCode == 200) {
        if(localVarResponseHttpContentType == TEXT("application/json"))
        {
            TSharedPtr<Src_handlersv2_repo_list_all_200_response> localVarResult = MakeShared<Src_handlersv2_repo_list_all_200_response>();
            TSharedPtr<FJsonValue> JsonValue;
            TSharedRef<TJsonReader<>> JsonReader = TJsonReaderFactory<>::Create(Response.Contents);
            if (!FJsonSerializer::Deserialize(JsonReader, JsonValue) || !JsonValue.IsValid())
            {
                return THTTPResult<TVariant<TSharedPtr<Src_handlersv2_repo_list_all_200_response>, TSharedPtr<Error>>>::Failure(TEXT("error calling src_handlersv2_repo_listAll: JSON reader failed parsing the response string"), 500, Response.Headers);
            }

            
            if (localVarResult->FromJson(JsonValue)) {
                TVariant<TSharedPtr<Src_handlersv2_repo_list_all_200_response>, TSharedPtr<Error>> variantResult;
                variantResult.Emplace<TSharedPtr<Src_handlersv2_repo_list_all_200_response>>(localVarResult);
                return THTTPResult<TVariant<TSharedPtr<Src_handlersv2_repo_list_all_200_response>, TSharedPtr<Error>>>::Success(TOptional(variantResult), Response.ResponseCode, Response.Headers);
            }
            else {
                return THTTPResult<TVariant<TSharedPtr<Src_handlersv2_repo_list_all_200_response>, TSharedPtr<Error>>>::Failure(TEXT("error calling src_handlersv2_repo_listAll: JSON response was not in the expected format"), 500, Response.Headers);
            }
        }


        else
        {
            return THTTPResult<TVariant<TSharedPtr<Src_handlersv2_repo_list_all_200_response>, TSharedPtr<Error>>>::Failure(TEXT("error calling src_handlersv2_repo_listAll: unsupported response type"), 500, Response.Headers);
        }
    }
    if (Response.ResponseCode == 0) {
        if(localVarResponseHttpContentType == TEXT("application/json"))
        {
            TSharedPtr<Error> localVarResult = MakeShared<Error>();
            TSharedPtr<FJsonValue> JsonValue;
            TSharedRef<TJsonReader<>> JsonReader = TJsonReaderFactory<>::Create(Response.Contents);
            if (!FJsonSerializer::Deserialize(JsonReader, JsonValue) || !JsonValue.IsValid())
            {
                return THTTPResult<TVariant<TSharedPtr<Src_handlersv2_repo_list_all_200_response>, TSharedPtr<Error>>>::Failure(TEXT("error calling src_handlersv2_repo_listAll: JSON reader failed parsing the response string"), 500, Response.Headers);
            }

            
            if (localVarResult->FromJson(JsonValue)) {
                TVariant<TSharedPtr<Src_handlersv2_repo_list_all_200_response>, TSharedPtr<Error>> variantResult;
                variantResult.Emplace<TSharedPtr<Error>>(localVarResult);
                return THTTPResult<TVariant<TSharedPtr<Src_handlersv2_repo_list_all_200_response>, TSharedPtr<Error>>>::Success(TOptional(variantResult), Response.ResponseCode, Response.Headers);
            }
            else {
                return THTTPResult<TVariant<TSharedPtr<Src_handlersv2_repo_list_all_200_response>, TSharedPtr<Error>>>::Failure(TEXT("error calling src_handlersv2_repo_listAll: JSON response was not in the expected format"), 500, Response.Headers);
            }
        }


        else
        {
            return THTTPResult<TVariant<TSharedPtr<Src_handlersv2_repo_list_all_200_response>, TSharedPtr<Error>>>::Failure(TEXT("error calling src_handlersv2_repo_listAll: unsupported response type"), 500, Response.Headers);
        }
    }


    if (Response.ResponseCode >= 400)
    {
            FString ErrorMessage = TEXT("General Failure");
            if(Response.Error.IsSet()) {
                ErrorMessage = Response.Error.GetValue();
            } 
            else if(!Response.Contents.IsEmpty()) {
                // Try parsing as JSON
                TSharedPtr<FJsonObject> JsonObject;
                TSharedRef<TJsonReader<>> JsonReader = TJsonReaderFactory<>::Create(Response.Contents);
                if (FJsonSerializer::Deserialize(JsonReader, JsonObject) 
                    && JsonObject.IsValid())
                {
                    if (JsonObject->HasField(TEXT("error_message"))) {
                        ErrorMessage = JsonObject->GetStringField(TEXT("error_message"));
                    }
                    else {
                        // Treat it as an error string 
                        ErrorMessage = Response.Contents;
                    }
                }
                else {
                    // Treat it as an error string 
                    ErrorMessage = Response.Contents;
                }
            }

            FString CurrError = TEXT("error calling src_handlersv2_repo_listAll: ") + ErrorMessage;
            return THTTPResult<TVariant<TSharedPtr<Src_handlersv2_repo_list_all_200_response>, TSharedPtr<Error>>>::Failure(CurrError, Response.ResponseCode, Response.Headers);
    }

    // Unepxected response code - TODO: try parse as any of the expected response types
    return THTTPResult<TVariant<TSharedPtr<Src_handlersv2_repo_list_all_200_response>, TSharedPtr<Error>>>::Failure(TEXT("error calling SrcHandlersv2RepoListAll: unexpected response code"), Response.ResponseCode, Response.Headers);
}


}
}

