// Copyright 2024 Diversion Company, Inc. All Rights Reserved.
/**
 * Diversion Core API
 * Definition of the Core API used to access low-level functionality of Diversion
 *
 * The version of the OpenAPI document: 0.2.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.10.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "JsonBody.h"
#include "ConflictIndex.h"

namespace Diversion {
namespace CoreAPI {
namespace Model {



void ConflictIndex::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("conflict_index_id")); WriteJsonValue(Writer, ConflictIndex::EnumToString(mConflict_index_id));
	Writer->WriteIdentifierPrefix(TEXT("file_mode")); WriteJsonValue(Writer, mFile_mode);
	Writer->WriteIdentifierPrefix(TEXT("path")); WriteJsonValue(Writer, mPath);
	if (mPrev_path.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("prev_path")); WriteJsonValue(Writer, mPrev_path.GetValue());
	}
	Writer->WriteIdentifierPrefix(TEXT("type")); WriteJsonValue(Writer, mType);
	if (mStorage_backend.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("storage_backend")); WriteJsonValue(Writer, mStorage_backend.GetValue());
	}
	if (mStorage_uri.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("storage_uri")); WriteJsonValue(Writer, mStorage_uri.GetValue());
	}
	if (mSize.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("size")); WriteJsonValue(Writer, mSize.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool ConflictIndex::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{

	const TSharedPtr<FJsonObject>* InnerGeneratorOpenAPIObject;
	if (!JsonValue->TryGetObject(InnerGeneratorOpenAPIObject))
		return false;

	bool ParseSuccess = true;

    

    // Reading the value into a string enum first
    FString Conflict_index_idString;
    bool ParseEnumConflict_index_idStringSuccess = TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("conflict_index_id"), Conflict_index_idString);
    if (ParseEnumConflict_index_idStringSuccess) {
        ParseSuccess &= ConflictIndex::EnumFromString(Conflict_index_idString, mConflict_index_id);
        
    }
	ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("file_mode"), mFile_mode);
	ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("path"), mPath);
    ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("prev_path"), mPrev_path);
	ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("type"), mType);
    ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("storage_backend"), mStorage_backend);
    ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("storage_uri"), mStorage_uri);
    ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("size"), mSize);


	return ParseSuccess;
}


FString ConflictIndex::EnumToString(const Conflict_index_idEnum& EnumValue) {
    switch (EnumValue)
    {
    case Conflict_index_idEnum::RESULT:
        return TEXT("RESULT");
    case Conflict_index_idEnum::BASE:
        return TEXT("BASE");
    case Conflict_index_idEnum::OTHER:
        return TEXT("OTHER");
    default:
        return TEXT("");
    }
}

bool ConflictIndex::EnumFromString(const FString& EnumAsString, Conflict_index_idEnum& EnumValue) {
    if(EnumAsString.IsEmpty()) return false;
    if(EnumAsString == TEXT("RESULT")) {
        EnumValue = Conflict_index_idEnum::RESULT;
        return true;
    }
    if(EnumAsString == TEXT("BASE")) {
        EnumValue = Conflict_index_idEnum::BASE;
        return true;
    }
    if(EnumAsString == TEXT("OTHER")) {
        EnumValue = Conflict_index_idEnum::OTHER;
        return true;
    }

    return false;
}


}
}
}

