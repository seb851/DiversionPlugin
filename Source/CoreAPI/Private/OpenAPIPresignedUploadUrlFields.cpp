// Copyright 2024 Diversion Company, Inc. All Rights Reserved.
/**
 * Diversion Core API
 * Definition of the Core API used to access low-level functionality of Diversion
 *
 * OpenAPI spec version: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIPresignedUploadUrlFields.h"

#include "CoreAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace CoreAPI
{

void OpenAPIPresignedUploadUrlFields::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	if (XAmzChecksumAlgorithm.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("x-amz-checksum-algorithm")); WriteJsonValue(Writer, XAmzChecksumAlgorithm.GetValue());
	}
	if (Key.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("key")); WriteJsonValue(Writer, Key.GetValue());
	}
	if (XAmzAlgorithm.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("x-amz-algorithm")); WriteJsonValue(Writer, XAmzAlgorithm.GetValue());
	}
	if (XAmzCredential.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("x-amz-credential")); WriteJsonValue(Writer, XAmzCredential.GetValue());
	}
	if (XAmzDate.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("x-amz-date")); WriteJsonValue(Writer, XAmzDate.GetValue());
	}
	if (Policy.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("policy")); WriteJsonValue(Writer, Policy.GetValue());
	}
	if (XAmzSignature.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("x-amz-signature")); WriteJsonValue(Writer, XAmzSignature.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPIPresignedUploadUrlFields::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* InnerGeneratorOpenAPIObject;
	if (!JsonValue->TryGetObject(InnerGeneratorOpenAPIObject))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("x-amz-checksum-algorithm"), XAmzChecksumAlgorithm);
	ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("key"), Key);
	ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("x-amz-algorithm"), XAmzAlgorithm);
	ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("x-amz-credential"), XAmzCredential);
	ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("x-amz-date"), XAmzDate);
	ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("policy"), Policy);
	ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("x-amz-signature"), XAmzSignature);

	return ParseSuccess;
}

}
