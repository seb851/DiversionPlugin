// Copyright 2024 Diversion Company, Inc. All Rights Reserved.
/**
 * Diversion Core API
 * Definition of the Core API used to access low-level functionality of Diversion
 *
 * OpenAPI spec version: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIRepositoryWorkspaceManipulationApi.h"

#include "OpenAPIRepositoryWorkspaceManipulationApiOperations.h"
#include "CoreAPIModule.h"

#include "HttpModule.h"
#include "Serialization/JsonSerializer.h"

namespace CoreAPI
{

OpenAPIRepositoryWorkspaceManipulationApi::OpenAPIRepositoryWorkspaceManipulationApi()
: Url(TEXT("https://api.diversion.dev/v0"))
{
}

OpenAPIRepositoryWorkspaceManipulationApi::~OpenAPIRepositoryWorkspaceManipulationApi() {}

void OpenAPIRepositoryWorkspaceManipulationApi::SetURL(const FString& InUrl)
{
	Url = InUrl;
}

void OpenAPIRepositoryWorkspaceManipulationApi::AddHeaderParam(const FString& Key, const FString& Value)
{
	AdditionalHeaderParams.Add(Key, Value);
}

void OpenAPIRepositoryWorkspaceManipulationApi::ClearHeaderParams()
{
	AdditionalHeaderParams.Reset();
}

bool OpenAPIRepositoryWorkspaceManipulationApi::IsValid() const
{
	if (Url.IsEmpty())
	{
		UE_LOG(LogCoreAPI, Error, TEXT("OpenAPIRepositoryWorkspaceManipulationApi: Endpoint Url is not set, request cannot be performed"));
		return false;
	}

	return true;
}

void OpenAPIRepositoryWorkspaceManipulationApi::SetHttpRetryManager(FHttpRetrySystem::FManager& InRetryManager)
{
	if (RetryManager != &InRetryManager)
	{
		DefaultRetryManager.Reset();
		RetryManager = &InRetryManager;
	}
}

FHttpRetrySystem::FManager& OpenAPIRepositoryWorkspaceManipulationApi::GetHttpRetryManager()
{
	checkf(RetryManager, TEXT("OpenAPIRepositoryWorkspaceManipulationApi: RetryManager is null.  You may have meant to set it with SetHttpRetryManager first, or you may not be using a custom RetryManager at all."))
	return *RetryManager;
}

FHttpRequestRef OpenAPIRepositoryWorkspaceManipulationApi::CreateHttpRequest(const Request& Request) const
{
	if (!Request.GetRetryParams().IsSet())
	{
		return FHttpModule::Get().CreateRequest();
	}
	else
	{
		if (!RetryManager)
		{
			// Create default retry manager if none was specified
			DefaultRetryManager = MakeUnique<HttpRetryManager>(6, 60);
			RetryManager = DefaultRetryManager.Get();
		}

		const HttpRetryParams& Params = Request.GetRetryParams().GetValue();
		return RetryManager->CreateRequest(Params.RetryLimitCountOverride, Params.RetryTimeoutRelativeSecondsOverride, Params.RetryResponseCodes, Params.RetryVerbs, Params.RetryDomains);
	}
}

void OpenAPIRepositoryWorkspaceManipulationApi::HandleResponse(FHttpResponsePtr HttpResponse, bool bSucceeded, Response& InOutResponse) const
{
	InOutResponse.SetHttpResponse(HttpResponse);
	InOutResponse.SetSuccessful(bSucceeded);

	if (bSucceeded && HttpResponse.IsValid())
	{
		InOutResponse.SetHttpResponseCode((EHttpResponseCodes::Type)HttpResponse->GetResponseCode());
		FString ContentType = HttpResponse->GetContentType();
		FString Content;

		if (ContentType.IsEmpty() || HttpResponse->GetContentLength() == 0)
		{
			return; // Nothing to parse
		}
		else if (ContentType.StartsWith(TEXT("application/json")) || ContentType.StartsWith("text/json"))
		{
			Content = HttpResponse->GetContentAsString();

			TSharedPtr<FJsonValue> JsonValue;
			auto Reader = TJsonReaderFactory<>::Create(Content);

			if (FJsonSerializer::Deserialize(Reader, JsonValue) && JsonValue.IsValid())
			{
				if (InOutResponse.FromJson(JsonValue))
					return; // Successfully parsed
			}
		}
		else if(ContentType.StartsWith(TEXT("text/plain")))
		{
			Content = HttpResponse->GetContentAsString();
			InOutResponse.SetResponseString(Content);
			return; // Successfully parsed
		}

		// Report the parse error but do not mark the request as unsuccessful. Data could be partial or malformed, but the request succeeded.
		UE_LOG(LogCoreAPI, Error, TEXT("Failed to deserialize Http response content (type:%s):\n%s"), *ContentType , *Content);
		return;
	}

	// By default, assume we failed to establish connection
	InOutResponse.SetHttpResponseCode(EHttpResponseCodes::RequestTimeout);
}

FHttpRequestPtr OpenAPIRepositoryWorkspaceManipulationApi::SrcHandlersv2WorkspaceApplyClientUpdates(const SrcHandlersv2WorkspaceApplyClientUpdatesRequest& Request, const FSrcHandlersv2WorkspaceApplyClientUpdatesDelegate& Delegate /*= FSrcHandlersv2WorkspaceApplyClientUpdatesDelegate()*/, float InTimeoutSecs /*= -1.f*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	if(InTimeoutSecs > 0.f){
		HttpRequest->SetTimeout(InTimeoutSecs);
	}
	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindSP(SharedThis(this), &OpenAPIRepositoryWorkspaceManipulationApi::OnSrcHandlersv2WorkspaceApplyClientUpdatesResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIRepositoryWorkspaceManipulationApi::OnSrcHandlersv2WorkspaceApplyClientUpdatesResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSrcHandlersv2WorkspaceApplyClientUpdatesDelegate Delegate) const
{
	SrcHandlersv2WorkspaceApplyClientUpdatesResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIRepositoryWorkspaceManipulationApi::SrcHandlersv2WorkspaceCheckout(const SrcHandlersv2WorkspaceCheckoutRequest& Request, const FSrcHandlersv2WorkspaceCheckoutDelegate& Delegate /*= FSrcHandlersv2WorkspaceCheckoutDelegate()*/, float InTimeoutSecs /*= -1.f*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	if(InTimeoutSecs > 0.f){
		HttpRequest->SetTimeout(InTimeoutSecs);
	}
	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindSP(SharedThis(this), &OpenAPIRepositoryWorkspaceManipulationApi::OnSrcHandlersv2WorkspaceCheckoutResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIRepositoryWorkspaceManipulationApi::OnSrcHandlersv2WorkspaceCheckoutResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSrcHandlersv2WorkspaceCheckoutDelegate Delegate) const
{
	SrcHandlersv2WorkspaceCheckoutResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIRepositoryWorkspaceManipulationApi::SrcHandlersv2WorkspaceCherryPick(const SrcHandlersv2WorkspaceCherryPickRequest& Request, const FSrcHandlersv2WorkspaceCherryPickDelegate& Delegate /*= FSrcHandlersv2WorkspaceCherryPickDelegate()*/, float InTimeoutSecs /*= -1.f*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	if(InTimeoutSecs > 0.f){
		HttpRequest->SetTimeout(InTimeoutSecs);
	}
	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindSP(SharedThis(this), &OpenAPIRepositoryWorkspaceManipulationApi::OnSrcHandlersv2WorkspaceCherryPickResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIRepositoryWorkspaceManipulationApi::OnSrcHandlersv2WorkspaceCherryPickResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSrcHandlersv2WorkspaceCherryPickDelegate Delegate) const
{
	SrcHandlersv2WorkspaceCherryPickResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIRepositoryWorkspaceManipulationApi::SrcHandlersv2WorkspaceCreateWorkspace(const SrcHandlersv2WorkspaceCreateWorkspaceRequest& Request, const FSrcHandlersv2WorkspaceCreateWorkspaceDelegate& Delegate /*= FSrcHandlersv2WorkspaceCreateWorkspaceDelegate()*/, float InTimeoutSecs /*= -1.f*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	if(InTimeoutSecs > 0.f){
		HttpRequest->SetTimeout(InTimeoutSecs);
	}
	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindSP(SharedThis(this), &OpenAPIRepositoryWorkspaceManipulationApi::OnSrcHandlersv2WorkspaceCreateWorkspaceResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIRepositoryWorkspaceManipulationApi::OnSrcHandlersv2WorkspaceCreateWorkspaceResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSrcHandlersv2WorkspaceCreateWorkspaceDelegate Delegate) const
{
	SrcHandlersv2WorkspaceCreateWorkspaceResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIRepositoryWorkspaceManipulationApi::SrcHandlersv2WorkspaceDelete(const SrcHandlersv2WorkspaceDeleteRequest& Request, const FSrcHandlersv2WorkspaceDeleteDelegate& Delegate /*= FSrcHandlersv2WorkspaceDeleteDelegate()*/, float InTimeoutSecs /*= -1.f*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	if(InTimeoutSecs > 0.f){
		HttpRequest->SetTimeout(InTimeoutSecs);
	}
	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindSP(SharedThis(this), &OpenAPIRepositoryWorkspaceManipulationApi::OnSrcHandlersv2WorkspaceDeleteResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIRepositoryWorkspaceManipulationApi::OnSrcHandlersv2WorkspaceDeleteResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSrcHandlersv2WorkspaceDeleteDelegate Delegate) const
{
	SrcHandlersv2WorkspaceDeleteResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIRepositoryWorkspaceManipulationApi::SrcHandlersv2WorkspaceForwardWorkspace(const SrcHandlersv2WorkspaceForwardWorkspaceRequest& Request, const FSrcHandlersv2WorkspaceForwardWorkspaceDelegate& Delegate /*= FSrcHandlersv2WorkspaceForwardWorkspaceDelegate()*/, float InTimeoutSecs /*= -1.f*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	if(InTimeoutSecs > 0.f){
		HttpRequest->SetTimeout(InTimeoutSecs);
	}
	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindSP(SharedThis(this), &OpenAPIRepositoryWorkspaceManipulationApi::OnSrcHandlersv2WorkspaceForwardWorkspaceResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIRepositoryWorkspaceManipulationApi::OnSrcHandlersv2WorkspaceForwardWorkspaceResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSrcHandlersv2WorkspaceForwardWorkspaceDelegate Delegate) const
{
	SrcHandlersv2WorkspaceForwardWorkspaceResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIRepositoryWorkspaceManipulationApi::SrcHandlersv2WorkspaceGetClientShouldUploadLogs(const SrcHandlersv2WorkspaceGetClientShouldUploadLogsRequest& Request, const FSrcHandlersv2WorkspaceGetClientShouldUploadLogsDelegate& Delegate /*= FSrcHandlersv2WorkspaceGetClientShouldUploadLogsDelegate()*/, float InTimeoutSecs /*= -1.f*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	if(InTimeoutSecs > 0.f){
		HttpRequest->SetTimeout(InTimeoutSecs);
	}
	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindSP(SharedThis(this), &OpenAPIRepositoryWorkspaceManipulationApi::OnSrcHandlersv2WorkspaceGetClientShouldUploadLogsResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIRepositoryWorkspaceManipulationApi::OnSrcHandlersv2WorkspaceGetClientShouldUploadLogsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSrcHandlersv2WorkspaceGetClientShouldUploadLogsDelegate Delegate) const
{
	SrcHandlersv2WorkspaceGetClientShouldUploadLogsResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIRepositoryWorkspaceManipulationApi::SrcHandlersv2WorkspaceGetOtherStatuses(const SrcHandlersv2WorkspaceGetOtherStatusesRequest& Request, const FSrcHandlersv2WorkspaceGetOtherStatusesDelegate& Delegate /*= FSrcHandlersv2WorkspaceGetOtherStatusesDelegate()*/, float InTimeoutSecs /*= -1.f*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	if(InTimeoutSecs > 0.f){
		HttpRequest->SetTimeout(InTimeoutSecs);
	}
	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindSP(SharedThis(this), &OpenAPIRepositoryWorkspaceManipulationApi::OnSrcHandlersv2WorkspaceGetOtherStatusesResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIRepositoryWorkspaceManipulationApi::OnSrcHandlersv2WorkspaceGetOtherStatusesResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSrcHandlersv2WorkspaceGetOtherStatusesDelegate Delegate) const
{
	SrcHandlersv2WorkspaceGetOtherStatusesResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIRepositoryWorkspaceManipulationApi::SrcHandlersv2WorkspaceGetPreferences(const SrcHandlersv2WorkspaceGetPreferencesRequest& Request, const FSrcHandlersv2WorkspaceGetPreferencesDelegate& Delegate /*= FSrcHandlersv2WorkspaceGetPreferencesDelegate()*/, float InTimeoutSecs /*= -1.f*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	if(InTimeoutSecs > 0.f){
		HttpRequest->SetTimeout(InTimeoutSecs);
	}
	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindSP(SharedThis(this), &OpenAPIRepositoryWorkspaceManipulationApi::OnSrcHandlersv2WorkspaceGetPreferencesResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIRepositoryWorkspaceManipulationApi::OnSrcHandlersv2WorkspaceGetPreferencesResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSrcHandlersv2WorkspaceGetPreferencesDelegate Delegate) const
{
	SrcHandlersv2WorkspaceGetPreferencesResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIRepositoryWorkspaceManipulationApi::SrcHandlersv2WorkspaceGetStatus(const SrcHandlersv2WorkspaceGetStatusRequest& Request, const FSrcHandlersv2WorkspaceGetStatusDelegate& Delegate /*= FSrcHandlersv2WorkspaceGetStatusDelegate()*/, float InTimeoutSecs /*= -1.f*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	if(InTimeoutSecs > 0.f){
		HttpRequest->SetTimeout(InTimeoutSecs);
	}
	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindSP(SharedThis(this), &OpenAPIRepositoryWorkspaceManipulationApi::OnSrcHandlersv2WorkspaceGetStatusResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIRepositoryWorkspaceManipulationApi::OnSrcHandlersv2WorkspaceGetStatusResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSrcHandlersv2WorkspaceGetStatusDelegate Delegate) const
{
	SrcHandlersv2WorkspaceGetStatusResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIRepositoryWorkspaceManipulationApi::SrcHandlersv2WorkspaceGetUploadingAgents(const SrcHandlersv2WorkspaceGetUploadingAgentsRequest& Request, const FSrcHandlersv2WorkspaceGetUploadingAgentsDelegate& Delegate /*= FSrcHandlersv2WorkspaceGetUploadingAgentsDelegate()*/, float InTimeoutSecs /*= -1.f*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	if(InTimeoutSecs > 0.f){
		HttpRequest->SetTimeout(InTimeoutSecs);
	}
	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindSP(SharedThis(this), &OpenAPIRepositoryWorkspaceManipulationApi::OnSrcHandlersv2WorkspaceGetUploadingAgentsResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIRepositoryWorkspaceManipulationApi::OnSrcHandlersv2WorkspaceGetUploadingAgentsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSrcHandlersv2WorkspaceGetUploadingAgentsDelegate Delegate) const
{
	SrcHandlersv2WorkspaceGetUploadingAgentsResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIRepositoryWorkspaceManipulationApi::SrcHandlersv2WorkspaceGetWorkspace(const SrcHandlersv2WorkspaceGetWorkspaceRequest& Request, const FSrcHandlersv2WorkspaceGetWorkspaceDelegate& Delegate /*= FSrcHandlersv2WorkspaceGetWorkspaceDelegate()*/, float InTimeoutSecs /*= -1.f*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	if(InTimeoutSecs > 0.f){
		HttpRequest->SetTimeout(InTimeoutSecs);
	}
	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindSP(SharedThis(this), &OpenAPIRepositoryWorkspaceManipulationApi::OnSrcHandlersv2WorkspaceGetWorkspaceResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIRepositoryWorkspaceManipulationApi::OnSrcHandlersv2WorkspaceGetWorkspaceResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSrcHandlersv2WorkspaceGetWorkspaceDelegate Delegate) const
{
	SrcHandlersv2WorkspaceGetWorkspaceResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIRepositoryWorkspaceManipulationApi::SrcHandlersv2WorkspaceGetWorkspaceUpdates(const SrcHandlersv2WorkspaceGetWorkspaceUpdatesRequest& Request, const FSrcHandlersv2WorkspaceGetWorkspaceUpdatesDelegate& Delegate /*= FSrcHandlersv2WorkspaceGetWorkspaceUpdatesDelegate()*/, float InTimeoutSecs /*= -1.f*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	if(InTimeoutSecs > 0.f){
		HttpRequest->SetTimeout(InTimeoutSecs);
	}
	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindSP(SharedThis(this), &OpenAPIRepositoryWorkspaceManipulationApi::OnSrcHandlersv2WorkspaceGetWorkspaceUpdatesResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIRepositoryWorkspaceManipulationApi::OnSrcHandlersv2WorkspaceGetWorkspaceUpdatesResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSrcHandlersv2WorkspaceGetWorkspaceUpdatesDelegate Delegate) const
{
	SrcHandlersv2WorkspaceGetWorkspaceUpdatesResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIRepositoryWorkspaceManipulationApi::SrcHandlersv2WorkspaceListAllWorkspaces(const SrcHandlersv2WorkspaceListAllWorkspacesRequest& Request, const FSrcHandlersv2WorkspaceListAllWorkspacesDelegate& Delegate /*= FSrcHandlersv2WorkspaceListAllWorkspacesDelegate()*/, float InTimeoutSecs /*= -1.f*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	if(InTimeoutSecs > 0.f){
		HttpRequest->SetTimeout(InTimeoutSecs);
	}
	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindSP(SharedThis(this), &OpenAPIRepositoryWorkspaceManipulationApi::OnSrcHandlersv2WorkspaceListAllWorkspacesResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIRepositoryWorkspaceManipulationApi::OnSrcHandlersv2WorkspaceListAllWorkspacesResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSrcHandlersv2WorkspaceListAllWorkspacesDelegate Delegate) const
{
	SrcHandlersv2WorkspaceListAllWorkspacesResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIRepositoryWorkspaceManipulationApi::SrcHandlersv2WorkspaceRenameWorkspace(const SrcHandlersv2WorkspaceRenameWorkspaceRequest& Request, const FSrcHandlersv2WorkspaceRenameWorkspaceDelegate& Delegate /*= FSrcHandlersv2WorkspaceRenameWorkspaceDelegate()*/, float InTimeoutSecs /*= -1.f*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	if(InTimeoutSecs > 0.f){
		HttpRequest->SetTimeout(InTimeoutSecs);
	}
	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindSP(SharedThis(this), &OpenAPIRepositoryWorkspaceManipulationApi::OnSrcHandlersv2WorkspaceRenameWorkspaceResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIRepositoryWorkspaceManipulationApi::OnSrcHandlersv2WorkspaceRenameWorkspaceResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSrcHandlersv2WorkspaceRenameWorkspaceDelegate Delegate) const
{
	SrcHandlersv2WorkspaceRenameWorkspaceResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIRepositoryWorkspaceManipulationApi::SrcHandlersv2WorkspaceReset(const SrcHandlersv2WorkspaceResetRequest& Request, const FSrcHandlersv2WorkspaceResetDelegate& Delegate /*= FSrcHandlersv2WorkspaceResetDelegate()*/, float InTimeoutSecs /*= -1.f*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	if(InTimeoutSecs > 0.f){
		HttpRequest->SetTimeout(InTimeoutSecs);
	}
	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindSP(SharedThis(this), &OpenAPIRepositoryWorkspaceManipulationApi::OnSrcHandlersv2WorkspaceResetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIRepositoryWorkspaceManipulationApi::OnSrcHandlersv2WorkspaceResetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSrcHandlersv2WorkspaceResetDelegate Delegate) const
{
	SrcHandlersv2WorkspaceResetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIRepositoryWorkspaceManipulationApi::SrcHandlersv2WorkspaceSetPreferences(const SrcHandlersv2WorkspaceSetPreferencesRequest& Request, const FSrcHandlersv2WorkspaceSetPreferencesDelegate& Delegate /*= FSrcHandlersv2WorkspaceSetPreferencesDelegate()*/, float InTimeoutSecs /*= -1.f*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	if(InTimeoutSecs > 0.f){
		HttpRequest->SetTimeout(InTimeoutSecs);
	}
	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindSP(SharedThis(this), &OpenAPIRepositoryWorkspaceManipulationApi::OnSrcHandlersv2WorkspaceSetPreferencesResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIRepositoryWorkspaceManipulationApi::OnSrcHandlersv2WorkspaceSetPreferencesResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSrcHandlersv2WorkspaceSetPreferencesDelegate Delegate) const
{
	SrcHandlersv2WorkspaceSetPreferencesResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr OpenAPIRepositoryWorkspaceManipulationApi::SrcHandlersv2WorkspaceSetUploading(const SrcHandlersv2WorkspaceSetUploadingRequest& Request, const FSrcHandlersv2WorkspaceSetUploadingDelegate& Delegate /*= FSrcHandlersv2WorkspaceSetUploadingDelegate()*/, float InTimeoutSecs /*= -1.f*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	if(InTimeoutSecs > 0.f){
		HttpRequest->SetTimeout(InTimeoutSecs);
	}
	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindSP(SharedThis(this), &OpenAPIRepositoryWorkspaceManipulationApi::OnSrcHandlersv2WorkspaceSetUploadingResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void OpenAPIRepositoryWorkspaceManipulationApi::OnSrcHandlersv2WorkspaceSetUploadingResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSrcHandlersv2WorkspaceSetUploadingDelegate Delegate) const
{
	SrcHandlersv2WorkspaceSetUploadingResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

}
