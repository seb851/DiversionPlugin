// Copyright 2024 Diversion Company, Inc. All Rights Reserved.
/**
 * Diversion Core API
 * Definition of the Core API used to access low-level functionality of Diversion
 *
 * OpenAPI spec version: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIRepositoryManagementApiOperations.h"

#include "CoreAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Dom/JsonObject.h"
#include "Templates/SharedPointer.h"
#include "HttpModule.h"
#include "PlatformHttp.h"

namespace CoreAPI
{

FString OpenAPIRepositoryManagementApi::SrcHandlersv2RepoListAllRequest::ComputePath() const
{
	FString InnerGeneratorOpenAPIPath(TEXT("/repos"));
	TArray<FString> QueryParams;
	if(Owned.IsSet())
	{
		QueryParams.Add(FString(TEXT("owned=")) + ToUrlString(Owned.GetValue()));
	}
	InnerGeneratorOpenAPIPath += TCHAR('?');
	InnerGeneratorOpenAPIPath += FString::Join(QueryParams, TEXT("&"));

	return InnerGeneratorOpenAPIPath;
}

void OpenAPIRepositoryManagementApi::SrcHandlersv2RepoListAllRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void OpenAPIRepositoryManagementApi::SrcHandlersv2RepoListAllResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Success"));
		break;
	case 0:
	default:
		SetResponseString(TEXT("An error occurred"));
		break;
	}
}

bool OpenAPIRepositoryManagementApi::SrcHandlersv2RepoListAllResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIRepositoryManagementApi::SrcHandlersv2RepoPostRequest::ComputePath() const
{
	FString InnerGeneratorOpenAPIPath(TEXT("/repos"));
	return InnerGeneratorOpenAPIPath;
}

void OpenAPIRepositoryManagementApi::SrcHandlersv2RepoPostRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = { TEXT("application/json") };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("POST"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
		// Body parameters
		FString JsonBody;
		JsonWriter Writer = TJsonWriterFactory<>::Create(&JsonBody);

		WriteJsonValue(Writer, OpenAPISrcHandlersv2RepoPostRequest);
		Writer->Close();

		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/json; charset=utf-8"));
		HttpRequest->SetContentAsString(JsonBody);
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
		UE_LOG(LogCoreAPI, Error, TEXT("Body parameter (OpenAPISrcHandlersv2RepoPostRequest) was ignored, not supported in multipart form"));
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
		UE_LOG(LogCoreAPI, Error, TEXT("Body parameter (OpenAPISrcHandlersv2RepoPostRequest) was ignored, not supported in urlencoded requests"));
	}
	else
	{
		UE_LOG(LogCoreAPI, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void OpenAPIRepositoryManagementApi::SrcHandlersv2RepoPostResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 201:
		SetResponseString(TEXT("The newly created repo object"));
		break;
	case 409:
		SetResponseString(TEXT("Repo with the same name already exists"));
		break;
	case 0:
	default:
		SetResponseString(TEXT("An error occurred"));
		break;
	}
}

bool OpenAPIRepositoryManagementApi::SrcHandlersv2RepoPostResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

}
