// Copyright 2024 Diversion Company, Inc. All Rights Reserved.
/**
 * Diversion Core API
 * Definition of the Core API used to access low-level functionality of Diversion
 *
 * The version of the OpenAPI document: 0.2.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.10.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "JsonBody.h"
#include "Inline_object_4.h"

namespace Diversion {
namespace CoreAPI {
namespace Model {



void Inline_object_4::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("object")); WriteJsonValue(Writer, Inline_object_4::EnumToString(mobject));
	Writer->WriteIdentifierPrefix(TEXT("items")); WriteJsonValue(Writer, mItems);
	if (mWorkspace_journal_ordinal_id.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("workspace_journal_ordinal_id")); WriteJsonValue(Writer, mWorkspace_journal_ordinal_id.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool Inline_object_4::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{

	const TSharedPtr<FJsonObject>* InnerGeneratorOpenAPIObject;
	if (!JsonValue->TryGetObject(InnerGeneratorOpenAPIObject))
		return false;

	bool ParseSuccess = true;

    

    // Reading the value into a string enum first
    FString objectString;
    bool ParseEnumobjectStringSuccess = TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("object"), objectString);
    if (ParseEnumobjectStringSuccess) {
        ParseSuccess &= Inline_object_4::EnumFromString(objectString, mobject);
        
    }
	ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("items"), mItems);
    ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("workspace_journal_ordinal_id"), mWorkspace_journal_ordinal_id);


	return ParseSuccess;
}


FString Inline_object_4::EnumToString(const ObjectEnum& EnumValue) {
    switch (EnumValue)
    {
    case ObjectEnum::FILEENTRY:
        return TEXT("FILEENTRY");
    default:
        return TEXT("");
    }
}

bool Inline_object_4::EnumFromString(const FString& EnumAsString, ObjectEnum& EnumValue) {
    if(EnumAsString.IsEmpty()) return false;
    if(EnumAsString == TEXT("FILEENTRY")) {
        EnumValue = ObjectEnum::FILEENTRY;
        return true;
    }

    return false;
}


}
}
}

