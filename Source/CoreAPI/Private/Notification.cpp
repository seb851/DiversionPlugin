// Copyright 2024 Diversion Company, Inc. All Rights Reserved.
/**
 * Diversion Core API
 * Definition of the Core API used to access low-level functionality of Diversion
 *
 * The version of the OpenAPI document: 0.2.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.10.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "JsonBody.h"
#include "Notification.h"

namespace Diversion {
namespace CoreAPI {
namespace Model {



void Notification::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("id")); WriteJsonValue(Writer, mId);
	Writer->WriteIdentifierPrefix(TEXT("message")); WriteJsonValue(Writer, mMessage);
	Writer->WriteIdentifierPrefix(TEXT("type")); WriteJsonValue(Writer, Notification::EnumToString(mType));
	Writer->WriteIdentifierPrefix(TEXT("dismissible")); WriteJsonValue(Writer, mDismissible);
	Writer->WriteObjectEnd();
}

bool Notification::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{

	const TSharedPtr<FJsonObject>* InnerGeneratorOpenAPIObject;
	if (!JsonValue->TryGetObject(InnerGeneratorOpenAPIObject))
		return false;

	bool ParseSuccess = true;

    

	ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("id"), mId);
	ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("message"), mMessage);
    // Reading the value into a string enum first
    FString TypeString;
    bool ParseEnumTypeStringSuccess = TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("type"), TypeString);
    if (ParseEnumTypeStringSuccess) {
        ParseSuccess &= Notification::EnumFromString(TypeString, mType);
        
    }
	ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("dismissible"), mDismissible);


	return ParseSuccess;
}


FString Notification::EnumToString(const TypeEnum& EnumValue) {
    switch (EnumValue)
    {
    case TypeEnum::TRIAL:
        return TEXT("TRIAL");
    case TypeEnum::SUCCESS:
        return TEXT("SUCCESS");
    case TypeEnum::INFO:
        return TEXT("INFO");
    case TypeEnum::WARNING:
        return TEXT("WARNING");
    case TypeEnum::ERROR:
        return TEXT("ERROR");
    default:
        return TEXT("");
    }
}

bool Notification::EnumFromString(const FString& EnumAsString, TypeEnum& EnumValue) {
    if(EnumAsString.IsEmpty()) return false;
    if(EnumAsString == TEXT("TRIAL")) {
        EnumValue = TypeEnum::TRIAL;
        return true;
    }
    if(EnumAsString == TEXT("SUCCESS")) {
        EnumValue = TypeEnum::SUCCESS;
        return true;
    }
    if(EnumAsString == TEXT("INFO")) {
        EnumValue = TypeEnum::INFO;
        return true;
    }
    if(EnumAsString == TEXT("WARNING")) {
        EnumValue = TypeEnum::WARNING;
        return true;
    }
    if(EnumAsString == TEXT("ERROR")) {
        EnumValue = TypeEnum::ERROR;
        return true;
    }

    return false;
}


}
}
}

