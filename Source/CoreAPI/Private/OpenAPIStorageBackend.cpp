// Copyright 2024 Diversion Company, Inc. All Rights Reserved.
/**
 * Diversion Core API
 * Definition of the Core API used to access low-level functionality of Diversion
 *
 * OpenAPI spec version: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIStorageBackend.h"

#include "CoreAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace CoreAPI
{

inline FString ToString(const OpenAPIStorageBackend::Values& Value)
{
	switch (Value)
	{
	case OpenAPIStorageBackend::Values::Efs:
		return TEXT("Efs");
	case OpenAPIStorageBackend::Values::S3:
		return TEXT("S3");
	}

	UE_LOG(LogCoreAPI, Error, TEXT("Invalid OpenAPIStorageBackend::Values Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIStorageBackend::EnumToString(const OpenAPIStorageBackend::Values& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIStorageBackend::Values& Value)
{
	static TMap<FString, OpenAPIStorageBackend::Values> StringToEnum = { 
		{ TEXT("Efs"), OpenAPIStorageBackend::Values::Efs },
		{ TEXT("S3"), OpenAPIStorageBackend::Values::S3 }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIStorageBackend::EnumFromString(const FString& EnumAsString, OpenAPIStorageBackend::Values& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIStorageBackend::Values& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIStorageBackend::Values& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void OpenAPIStorageBackend::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteObjectEnd();
}

bool OpenAPIStorageBackend::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* InnerGeneratorOpenAPIObject;
	if (!JsonValue->TryGetObject(InnerGeneratorOpenAPIObject))
		return false;

	bool ParseSuccess = true;


	return ParseSuccess;
}

}
