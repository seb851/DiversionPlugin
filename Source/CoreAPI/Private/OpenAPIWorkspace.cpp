// Copyright 2024 Diversion Company, Inc. All Rights Reserved.
/**
 * Diversion Core API
 * Definition of the Core API used to access low-level functionality of Diversion
 *
 * OpenAPI spec version: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIWorkspace.h"

#include "CoreAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace CoreAPI
{

void OpenAPIWorkspace::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("workspace_id")); WriteJsonValue(Writer, WorkspaceId);
	if (Name.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("name")); WriteJsonValue(Writer, Name.GetValue());
	}
	if (SourceCommit.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("source_commit")); WriteJsonValue(Writer, SourceCommit.GetValue());
	}
	if (BranchId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("branch_id")); WriteJsonValue(Writer, BranchId.GetValue());
	}
	Writer->WriteIdentifierPrefix(TEXT("base_commit_id")); WriteJsonValue(Writer, BaseCommitId);
	Writer->WriteIdentifierPrefix(TEXT("repo_id")); WriteJsonValue(Writer, RepoId);
	Writer->WriteIdentifierPrefix(TEXT("journal_ordinal_id")); WriteJsonValue(Writer, JournalOrdinalId);
	if (ClientId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("client_id")); WriteJsonValue(Writer, ClientId.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPIWorkspace::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* InnerGeneratorOpenAPIObject;
	if (!JsonValue->TryGetObject(InnerGeneratorOpenAPIObject))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("workspace_id"), WorkspaceId);
	ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("name"), Name);
	ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("source_commit"), SourceCommit);
	ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("branch_id"), BranchId);
	ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("base_commit_id"), BaseCommitId);
	ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("repo_id"), RepoId);
	ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("journal_ordinal_id"), JournalOrdinalId);
	ParseSuccess &= TryGetJsonValue(*InnerGeneratorOpenAPIObject, TEXT("client_id"), ClientId);

	return ParseSuccess;
}

}
