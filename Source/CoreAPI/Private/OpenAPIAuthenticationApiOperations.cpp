// Copyright 2024 Diversion Company, Inc. All Rights Reserved.
/**
 * Diversion Core API
 * Definition of the Core API used to access low-level functionality of Diversion
 *
 * OpenAPI spec version: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIAuthenticationApiOperations.h"

#include "CoreAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Dom/JsonObject.h"
#include "Templates/SharedPointer.h"
#include "HttpModule.h"
#include "PlatformHttp.h"

namespace CoreAPI
{

FString OpenAPIAuthenticationApi::SrcHandlersAuthCompleteRequest::ComputePath() const
{
	FString InnerGeneratorOpenAPIPath(TEXT("/auth/complete"));
	TArray<FString> QueryParams;
	if(Code.IsSet())
	{
		QueryParams.Add(FString(TEXT("code=")) + ToUrlString(Code.GetValue()));
	}
	QueryParams.Add(FString(TEXT("state=")) + ToUrlString(State));
	if(ErrorDescription.IsSet())
	{
		QueryParams.Add(FString(TEXT("error_description=")) + ToUrlString(ErrorDescription.GetValue()));
	}
	InnerGeneratorOpenAPIPath += TCHAR('?');
	InnerGeneratorOpenAPIPath += FString::Join(QueryParams, TEXT("&"));

	return InnerGeneratorOpenAPIPath;
}

void OpenAPIAuthenticationApi::SrcHandlersAuthCompleteRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("text/html") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void OpenAPIAuthenticationApi::SrcHandlersAuthCompleteResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Sign-in flow completed"));
		break;
	}
}

bool OpenAPIAuthenticationApi::SrcHandlersAuthCompleteResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIAuthenticationApi::SrcHandlersAuthFetchCodeRequest::ComputePath() const
{
	FString InnerGeneratorOpenAPIPath(TEXT("/auth/fetch_code"));
	TArray<FString> QueryParams;
	QueryParams.Add(FString(TEXT("code_challenge=")) + ToUrlString(CodeChallenge));
	QueryParams.Add(FString(TEXT("code_verifier=")) + ToUrlString(CodeVerifier));
	InnerGeneratorOpenAPIPath += TCHAR('?');
	InnerGeneratorOpenAPIPath += FString::Join(QueryParams, TEXT("&"));

	return InnerGeneratorOpenAPIPath;
}

void OpenAPIAuthenticationApi::SrcHandlersAuthFetchCodeRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void OpenAPIAuthenticationApi::SrcHandlersAuthFetchCodeResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Code challenge and verifier are correct, code grant returned"));
		break;
	case 0:
	default:
		SetResponseString(TEXT("An error occurred"));
		break;
	}
}

bool OpenAPIAuthenticationApi::SrcHandlersAuthFetchCodeResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIAuthenticationApi::SrcHandlersAuthPollRequest::ComputePath() const
{
	FString InnerGeneratorOpenAPIPath(TEXT("/auth/poll"));
	TArray<FString> QueryParams;
	QueryParams.Add(FString(TEXT("code_challenge=")) + ToUrlString(CodeChallenge));
	InnerGeneratorOpenAPIPath += TCHAR('?');
	InnerGeneratorOpenAPIPath += FString::Join(QueryParams, TEXT("&"));

	return InnerGeneratorOpenAPIPath;
}

void OpenAPIAuthenticationApi::SrcHandlersAuthPollRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void OpenAPIAuthenticationApi::SrcHandlersAuthPollResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 202:
		SetResponseString(TEXT("Not yet completed"));
		break;
	case 302:
		SetResponseString(TEXT("Sign-in completed, go to redirected address to fetch the code"));
		break;
	case 404:
		SetResponseString(TEXT("Provided &#x60;code_challenge&#x60; not found. The user might have not yet started the sign-in flow"));
		break;
	}
}

bool OpenAPIAuthenticationApi::SrcHandlersAuthPollResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return true;
}

FString OpenAPIAuthenticationApi::SrcHandlersAuthTestTokenRequest::ComputePath() const
{
	FString InnerGeneratorOpenAPIPath(TEXT("/auth/test"));
	TArray<FString> QueryParams;
	if(RepoId.IsSet())
	{
		QueryParams.Add(FString(TEXT("repo_id=")) + ToUrlString(RepoId.GetValue()));
	}
	InnerGeneratorOpenAPIPath += TCHAR('?');
	InnerGeneratorOpenAPIPath += FString::Join(QueryParams, TEXT("&"));

	return InnerGeneratorOpenAPIPath;
}

void OpenAPIAuthenticationApi::SrcHandlersAuthTestTokenRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void OpenAPIAuthenticationApi::SrcHandlersAuthTestTokenResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 204:
		SetResponseString(TEXT("Request completed successfully"));
		break;
	case 404:
		SetResponseString(TEXT("The specified resource was not found"));
		break;
	case 0:
	default:
		SetResponseString(TEXT("An error occurred"));
		break;
	}
}

bool OpenAPIAuthenticationApi::SrcHandlersAuthTestTokenResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return true;
}

}
